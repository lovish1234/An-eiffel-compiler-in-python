Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    DQUOTES
    INVARIANT
    COMMENT
    CHECK
    BOOL
    ATTACHED
    SEPARTOR
    CONVERT
    REQUIRE
    OCTINT
    CHARCONST
    DEBUG
    ATTRIBUTE
    NOT
    BININT
    DOT
    OLD
    DETACHABLE
    AGENT
    ENSURE
    ARRAY
    INSPECT
    BOOLEAN
    HEXINT
    RETRY
    CREATION
    AT_SIGN
    WHEN
    INDEXING
    LOCAL
    NOTE

Grammar

Rule 0     S' -> class
Rule 1     class -> class_header generic_class obsolete_class inheritance create features END
Rule 2     class_header -> hmark CLASS IDENTIFIER
Rule 3     hmark -> DEFERRED
Rule 4     hmark -> EXPANDED
Rule 5     hmark -> SEPERATE
Rule 6     hmark -> empty
Rule 7     generic_class -> LSQUARE generic_list RSQUARE
Rule 8     generic_class -> empty
Rule 9     generic_list -> generic_term
Rule 10    generic_list -> generic_list COMMA generic_term
Rule 11    generic_list -> empty
Rule 12    generic_term -> IDENTIFIER constraint
Rule 13    constraint -> empty
Rule 14    obsolete_class -> OBSOLETE STRING
Rule 15    obsolete_class -> empty
Rule 16    inheritance -> INHERIT inh_list
Rule 17    inheritance -> empty
Rule 18    inh_list -> class_element
Rule 19    inh_list -> inh_list class_element
Rule 20    inh_list -> inh_list COLON class_element
Rule 21    class_element -> class_type inh_features
Rule 22    inh_features -> feature_arrangement1
Rule 23    inh_features -> feature_arrangement2
Rule 24    inh_features -> feature_arrangement3
Rule 25    inh_features -> feature_arrangement4
Rule 26    inh_features -> feature_arrangement5
Rule 27    inh_features -> empty
Rule 28    feature_arrangement1 -> rename export_opt undefine_opt redefine_opt select_opt END
Rule 29    feature_arrangement2 -> export undefine_opt redefine_opt select_opt END
Rule 30    feature_arrangement3 -> undefine redefine_opt select_opt END
Rule 31    feature_arrangement4 -> redefine select_opt END
Rule 32    feature_arrangement5 -> select END
Rule 33    rename -> RENAME rname_list
Rule 34    rname_list -> fname ASSIGN fname
Rule 35    rname_list -> rname_list COMMA fname ASSIGN fname
Rule 36    export_opt -> export
Rule 37    export_opt -> empty
Rule 38    export -> EXPORT elist
Rule 39    elist -> eitem
Rule 40    elist -> elist eitem
Rule 41    elist -> elist COMMA eitem
Rule 42    eitem -> users routine
Rule 43    routine -> routine_list
Rule 44    routine -> ALL
Rule 45    routine_list -> fname
Rule 46    routine_list -> empty
Rule 47    users -> LCUR_PARN class_list RCUR_PARN
Rule 48    class_list -> IDENTIFIER
Rule 49    class_list -> class_list COMMA IDENTIFIER
Rule 50    class_list -> empty
Rule 51    undefine_opt -> undefine
Rule 52    undefine_opt -> empty
Rule 53    undefine -> UNDEFINE routine_list
Rule 54    redefine_opt -> redefine
Rule 55    redefine_opt -> empty
Rule 56    redefine -> REDEFINE routine_list
Rule 57    select_opt -> select
Rule 58    select_opt -> empty
Rule 59    select -> SELECT routine_list
Rule 60    create -> create_block
Rule 61    create -> empty
Rule 62    create_block -> CREATE users_opt proc_list
Rule 63    users_opt -> users
Rule 64    users_opt -> empty
Rule 65    proc_list -> IDENTIFIER
Rule 66    proc_list -> proc_list COMMA IDENTIFIER
Rule 67    proc_list -> empty
Rule 68    features -> fblock
Rule 69    features -> empty
Rule 70    fblock -> FEATURE users_opt fdec_list
Rule 71    fdec_list -> fdec
Rule 72    fdec_list -> fdec_list fdec
Rule 73    fdec_list -> fdec_list COLON fdec
Rule 74    fdec -> new_feature fbody
Rule 75    new_feature -> fname
Rule 76    new_feature -> FROZEN fname
Rule 77    fbody -> arg_type_opt basic_body
Rule 78    arg_type_opt -> LPAREN entity_list RPAREN COLON type
Rule 79    arg_type_opt -> empty
Rule 80    entity_list -> entity_group
Rule 81    entity_list -> entity_list entity_group
Rule 82    entity_list -> entity_list COMMA entity_group
Rule 83    entity_group -> idlist COLON type
Rule 84    idlist -> IDENTIFIER
Rule 85    idlist -> idlist COMMA IDENTIFIER
Rule 86    basic_body -> IS fvalue
Rule 87    basic_body -> empty
Rule 88    fvalue -> manifest_constant
Rule 89    fvalue -> UNIQUE
Rule 90    fvalue -> function
Rule 91    function -> function_body END
Rule 92    function_body -> DEFERRED
Rule 93    function_body -> Do fnbody
Rule 94    function_body -> ONCE fnbody
Rule 95    function_body -> EXTERNAL STRING exname
Rule 96    exname -> ALIAS STRING
Rule 97    exname -> empty
Rule 98    fnbody -> ins
Rule 99    fnbody -> fnbody ins
Rule 100   ins -> assignment
Rule 101   ins -> conditional
Rule 102   ins -> loop
Rule 103   ins -> COMMA
Rule 104   assignment -> variable ass_op expr
Rule 105   variable -> IDENTIFIER
Rule 106   variable -> RESULT
Rule 107   ass_op -> ASSIGNMENT
Rule 108   conditional -> IF expr THEN fnbody elseif_group else_opt END
Rule 109   elseif_group -> elseif_group ELSEIF expr THEN fnbody
Rule 110   elseif_group -> empty
Rule 111   else_opt -> ELSE fnbody
Rule 112   else_opt -> empty
Rule 113   loop -> FROM fnbody variant UNTIL expr LOOP fnbody END
Rule 114   variant -> VARIANT
Rule 115   variant -> VARIANT expr
Rule 116   variant -> VARIANT IDENTIFIER COLON expr
Rule 117   variant -> empty
Rule 118   expr -> expr EQUAL expr
Rule 119   expr -> expr NOT_EQUAL expr
Rule 120   expr -> expr GREATER expr
Rule 121   expr -> expr LESS expr
Rule 122   expr -> expr LESS_EQUAL expr
Rule 123   expr -> expr GREATER_EQUAL expr
Rule 124   expr -> expr PLUS expr
Rule 125   expr -> expr MINUS expr
Rule 126   expr -> expr TIMES expr
Rule 127   expr -> expr DIVIDE expr
Rule 128   expr -> expr INT_DIVIDE expr
Rule 129   expr -> expr INT_REMAINDER expr
Rule 130   expr -> expr AND expr
Rule 131   expr -> expr OR expr
Rule 132   expr -> expr XOR expr
Rule 133   expr -> expr AND_THEN expr
Rule 134   expr -> expr OR_ELSE expr
Rule 135   expr -> expr IMPLIES expr
Rule 136   expr -> RESULT
Rule 137   expr -> CURRENT
Rule 138   expr -> LPAREN expr RPAREN
Rule 139   expr -> bool_const
Rule 140   expr -> CHARACTER
Rule 141   expr -> INTEGER
Rule 142   expr -> REAL
Rule 143   expr -> STRING
Rule 144   attr_list -> IDENTIFIER
Rule 145   attr_list -> attr_list COMMA IDENTIFIER
Rule 146   attr_list -> empty
Rule 147   expr_list -> expr
Rule 148   expr_list -> expr_list COMMA expr
Rule 149   expr_list -> empty
Rule 150   manifest_constant -> bool_const
Rule 151   manifest_constant -> CHARACTER
Rule 152   manifest_constant -> int_const
Rule 153   manifest_constant -> real_const
Rule 154   manifest_constant -> STRING
Rule 155   bool_const -> TRUE
Rule 156   bool_const -> FALSE
Rule 157   int_const -> INTEGER
Rule 158   int_const -> MINUS INTEGER
Rule 159   int_const -> PLUS INTEGER
Rule 160   real_const -> REAL
Rule 161   real_const -> MINUS REAL
Rule 162   real_const -> PLUS REAL
Rule 163   fname -> IDENTIFIER
Rule 164   type -> class_type
Rule 165   type -> EXPANDED class_type
Rule 166   type -> LIKE CURRENT
Rule 167   type -> LIKE IDENTIFIER
Rule 168   class_type -> IDENTIFIER generic
Rule 169   generic -> LSQUARE type_list RSQUARE
Rule 170   generic -> empty
Rule 171   type_list -> type
Rule 172   type_list -> type_list COMMA type
Rule 173   type_list -> empty
Rule 174   empty -> <empty>

Terminals, with rules where they appear

AGENT                : 
ALIAS                : 96
ALL                  : 44
AND                  : 130
AND_THEN             : 133
ARRAY                : 
ASSIGN               : 34 35
ASSIGNMENT           : 107
ATTACHED             : 
ATTRIBUTE            : 
AT_SIGN              : 
BININT               : 
BOOL                 : 
BOOLEAN              : 
CHARACTER            : 140 151
CHARCONST            : 
CHECK                : 
CLASS                : 2
COLON                : 20 73 78 83 116
COMMA                : 10 35 41 49 66 82 85 103 145 148 172
COMMENT              : 
CONVERT              : 
CREATE               : 62
CREATION             : 
CURRENT              : 137 166
DEBUG                : 
DEFERRED             : 3 92
DETACHABLE           : 
DIVIDE               : 127
DOT                  : 
DQUOTES              : 
Do                   : 93
ELSE                 : 111
ELSEIF               : 109
END                  : 1 28 29 30 31 32 91 108 113
ENSURE               : 
EQUAL                : 118
EXPANDED             : 4 165
EXPORT               : 38
EXTERNAL             : 95
FALSE                : 156
FEATURE              : 70
FROM                 : 113
FROZEN               : 76
GREATER              : 120
GREATER_EQUAL        : 123
HEXINT               : 
IDENTIFIER           : 2 12 48 49 65 66 84 85 105 116 144 145 163 167 168
IF                   : 108
IMPLIES              : 135
INDEXING             : 
INHERIT              : 16
INSPECT              : 
INTEGER              : 141 157 158 159
INT_DIVIDE           : 128
INT_REMAINDER        : 129
INVARIANT            : 
IS                   : 86
LCUR_PARN            : 47
LESS                 : 121
LESS_EQUAL           : 122
LIKE                 : 166 167
LOCAL                : 
LOOP                 : 113
LPAREN               : 78 138
LSQUARE              : 7 169
MINUS                : 125 158 161
NOT                  : 
NOTE                 : 
NOT_EQUAL            : 119
OBSOLETE             : 14
OCTINT               : 
OLD                  : 
ONCE                 : 94
OR                   : 131
OR_ELSE              : 134
PLUS                 : 124 159 162
RCUR_PARN            : 47
REAL                 : 142 160 161 162
REDEFINE             : 56
RENAME               : 33
REQUIRE              : 
RESULT               : 106 136
RETRY                : 
RPAREN               : 78 138
RSQUARE              : 7 169
SELECT               : 59
SEPARTOR             : 
SEPERATE             : 5
STRING               : 14 95 96 143 154
THEN                 : 108 109
TIMES                : 126
TRUE                 : 155
UNDEFINE             : 53
UNIQUE               : 89
UNTIL                : 113
VARIANT              : 114 115 116
WHEN                 : 
XOR                  : 132
error                : 

Nonterminals, with rules where they appear

arg_type_opt         : 77
ass_op               : 104
assignment           : 100
attr_list            : 145
basic_body           : 77
bool_const           : 139 150
class                : 0
class_element        : 18 19 20
class_header         : 1
class_list           : 47 49
class_type           : 21 164 165
conditional          : 101
constraint           : 12
create               : 1
create_block         : 60
eitem                : 39 40 41
elist                : 38 40 41
else_opt             : 108
elseif_group         : 108 109
empty                : 6 8 11 13 15 17 27 37 46 50 52 55 58 61 64 67 69 79 87 97 110 112 117 146 149 170 173
entity_group         : 80 81 82
entity_list          : 78 81 82
exname               : 95
export               : 29 36
export_opt           : 28
expr                 : 104 108 109 113 115 116 118 118 119 119 120 120 121 121 122 122 123 123 124 124 125 125 126 126 127 127 128 128 129 129 130 130 131 131 132 132 133 133 134 134 135 135 138 147 148
expr_list            : 148
fblock               : 68
fbody                : 74
fdec                 : 71 72 73
fdec_list            : 70 72 73
feature_arrangement1 : 22
feature_arrangement2 : 23
feature_arrangement3 : 24
feature_arrangement4 : 25
feature_arrangement5 : 26
features             : 1
fname                : 34 34 35 35 45 75 76
fnbody               : 93 94 99 108 109 111 113 113
function             : 90
function_body        : 91
fvalue               : 86
generic              : 168
generic_class        : 1
generic_list         : 7 10
generic_term         : 9 10
hmark                : 2
idlist               : 83 85
inh_features         : 21
inh_list             : 16 19 20
inheritance          : 1
ins                  : 98 99
int_const            : 152
loop                 : 102
manifest_constant    : 88
new_feature          : 74
obsolete_class       : 1
proc_list            : 62 66
real_const           : 153
redefine             : 31 54
redefine_opt         : 28 29 30
rename               : 28
rname_list           : 33 35
routine              : 42
routine_list         : 43 53 56 59
select               : 32 57
select_opt           : 28 29 30 31
type                 : 78 83 171 172
type_list            : 169 172
undefine             : 30 51
undefine_opt         : 28 29
users                : 42 63
users_opt            : 62 70
variable             : 104
variant              : 113

Parsing method: LALR

state 0

    (0) S' -> . class
    (1) class -> . class_header generic_class obsolete_class inheritance create features END
    (2) class_header -> . hmark CLASS IDENTIFIER
    (3) hmark -> . DEFERRED
    (4) hmark -> . EXPANDED
    (5) hmark -> . SEPERATE
    (6) hmark -> . empty
    (174) empty -> .

    DEFERRED        shift and go to state 3
    EXPANDED        shift and go to state 2
    SEPERATE        shift and go to state 1
    CLASS           reduce using rule 174 (empty -> .)

    hmark                          shift and go to state 4
    class_header                   shift and go to state 5
    class                          shift and go to state 6
    empty                          shift and go to state 7

state 1

    (5) hmark -> SEPERATE .

    CLASS           reduce using rule 5 (hmark -> SEPERATE .)


state 2

    (4) hmark -> EXPANDED .

    CLASS           reduce using rule 4 (hmark -> EXPANDED .)


state 3

    (3) hmark -> DEFERRED .

    CLASS           reduce using rule 3 (hmark -> DEFERRED .)


state 4

    (2) class_header -> hmark . CLASS IDENTIFIER

    CLASS           shift and go to state 8


state 5

    (1) class -> class_header . generic_class obsolete_class inheritance create features END
    (7) generic_class -> . LSQUARE generic_list RSQUARE
    (8) generic_class -> . empty
    (174) empty -> .

    LSQUARE         shift and go to state 10
    OBSOLETE        reduce using rule 174 (empty -> .)
    INHERIT         reduce using rule 174 (empty -> .)
    CREATE          reduce using rule 174 (empty -> .)
    FEATURE         reduce using rule 174 (empty -> .)
    END             reduce using rule 174 (empty -> .)

    generic_class                  shift and go to state 9
    empty                          shift and go to state 11

state 6

    (0) S' -> class .



state 7

    (6) hmark -> empty .

    CLASS           reduce using rule 6 (hmark -> empty .)


state 8

    (2) class_header -> hmark CLASS . IDENTIFIER

    IDENTIFIER      shift and go to state 12


state 9

    (1) class -> class_header generic_class . obsolete_class inheritance create features END
    (14) obsolete_class -> . OBSOLETE STRING
    (15) obsolete_class -> . empty
    (174) empty -> .

    OBSOLETE        shift and go to state 14
    INHERIT         reduce using rule 174 (empty -> .)
    CREATE          reduce using rule 174 (empty -> .)
    FEATURE         reduce using rule 174 (empty -> .)
    END             reduce using rule 174 (empty -> .)

    obsolete_class                 shift and go to state 13
    empty                          shift and go to state 15

state 10

    (7) generic_class -> LSQUARE . generic_list RSQUARE
    (9) generic_list -> . generic_term
    (10) generic_list -> . generic_list COMMA generic_term
    (11) generic_list -> . empty
    (12) generic_term -> . IDENTIFIER constraint
    (174) empty -> .

    IDENTIFIER      shift and go to state 18
    RSQUARE         reduce using rule 174 (empty -> .)
    COMMA           reduce using rule 174 (empty -> .)

    generic_term                   shift and go to state 17
    generic_list                   shift and go to state 16
    empty                          shift and go to state 19

state 11

    (8) generic_class -> empty .

    OBSOLETE        reduce using rule 8 (generic_class -> empty .)
    INHERIT         reduce using rule 8 (generic_class -> empty .)
    CREATE          reduce using rule 8 (generic_class -> empty .)
    FEATURE         reduce using rule 8 (generic_class -> empty .)
    END             reduce using rule 8 (generic_class -> empty .)


state 12

    (2) class_header -> hmark CLASS IDENTIFIER .

    LSQUARE         reduce using rule 2 (class_header -> hmark CLASS IDENTIFIER .)
    OBSOLETE        reduce using rule 2 (class_header -> hmark CLASS IDENTIFIER .)
    INHERIT         reduce using rule 2 (class_header -> hmark CLASS IDENTIFIER .)
    CREATE          reduce using rule 2 (class_header -> hmark CLASS IDENTIFIER .)
    FEATURE         reduce using rule 2 (class_header -> hmark CLASS IDENTIFIER .)
    END             reduce using rule 2 (class_header -> hmark CLASS IDENTIFIER .)


state 13

    (1) class -> class_header generic_class obsolete_class . inheritance create features END
    (16) inheritance -> . INHERIT inh_list
    (17) inheritance -> . empty
    (174) empty -> .

    INHERIT         shift and go to state 21
    CREATE          reduce using rule 174 (empty -> .)
    FEATURE         reduce using rule 174 (empty -> .)
    END             reduce using rule 174 (empty -> .)

    inheritance                    shift and go to state 20
    empty                          shift and go to state 22

state 14

    (14) obsolete_class -> OBSOLETE . STRING

    STRING          shift and go to state 23


state 15

    (15) obsolete_class -> empty .

    INHERIT         reduce using rule 15 (obsolete_class -> empty .)
    CREATE          reduce using rule 15 (obsolete_class -> empty .)
    FEATURE         reduce using rule 15 (obsolete_class -> empty .)
    END             reduce using rule 15 (obsolete_class -> empty .)


state 16

    (7) generic_class -> LSQUARE generic_list . RSQUARE
    (10) generic_list -> generic_list . COMMA generic_term

    RSQUARE         shift and go to state 24
    COMMA           shift and go to state 25


state 17

    (9) generic_list -> generic_term .

    RSQUARE         reduce using rule 9 (generic_list -> generic_term .)
    COMMA           reduce using rule 9 (generic_list -> generic_term .)


state 18

    (12) generic_term -> IDENTIFIER . constraint
    (13) constraint -> . empty
    (174) empty -> .

    RSQUARE         reduce using rule 174 (empty -> .)
    COMMA           reduce using rule 174 (empty -> .)

    empty                          shift and go to state 26
    constraint                     shift and go to state 27

state 19

    (11) generic_list -> empty .

    RSQUARE         reduce using rule 11 (generic_list -> empty .)
    COMMA           reduce using rule 11 (generic_list -> empty .)


state 20

    (1) class -> class_header generic_class obsolete_class inheritance . create features END
    (60) create -> . create_block
    (61) create -> . empty
    (62) create_block -> . CREATE users_opt proc_list
    (174) empty -> .

    CREATE          shift and go to state 30
    FEATURE         reduce using rule 174 (empty -> .)
    END             reduce using rule 174 (empty -> .)

    create                         shift and go to state 28
    empty                          shift and go to state 29
    create_block                   shift and go to state 31

state 21

    (16) inheritance -> INHERIT . inh_list
    (18) inh_list -> . class_element
    (19) inh_list -> . inh_list class_element
    (20) inh_list -> . inh_list COLON class_element
    (21) class_element -> . class_type inh_features
    (168) class_type -> . IDENTIFIER generic

    IDENTIFIER      shift and go to state 35

    class_element                  shift and go to state 34
    class_type                     shift and go to state 32
    inh_list                       shift and go to state 33

state 22

    (17) inheritance -> empty .

    CREATE          reduce using rule 17 (inheritance -> empty .)
    FEATURE         reduce using rule 17 (inheritance -> empty .)
    END             reduce using rule 17 (inheritance -> empty .)


state 23

    (14) obsolete_class -> OBSOLETE STRING .

    INHERIT         reduce using rule 14 (obsolete_class -> OBSOLETE STRING .)
    CREATE          reduce using rule 14 (obsolete_class -> OBSOLETE STRING .)
    FEATURE         reduce using rule 14 (obsolete_class -> OBSOLETE STRING .)
    END             reduce using rule 14 (obsolete_class -> OBSOLETE STRING .)


state 24

    (7) generic_class -> LSQUARE generic_list RSQUARE .

    OBSOLETE        reduce using rule 7 (generic_class -> LSQUARE generic_list RSQUARE .)
    INHERIT         reduce using rule 7 (generic_class -> LSQUARE generic_list RSQUARE .)
    CREATE          reduce using rule 7 (generic_class -> LSQUARE generic_list RSQUARE .)
    FEATURE         reduce using rule 7 (generic_class -> LSQUARE generic_list RSQUARE .)
    END             reduce using rule 7 (generic_class -> LSQUARE generic_list RSQUARE .)


state 25

    (10) generic_list -> generic_list COMMA . generic_term
    (12) generic_term -> . IDENTIFIER constraint

    IDENTIFIER      shift and go to state 18

    generic_term                   shift and go to state 36

state 26

    (13) constraint -> empty .

    RSQUARE         reduce using rule 13 (constraint -> empty .)
    COMMA           reduce using rule 13 (constraint -> empty .)


state 27

    (12) generic_term -> IDENTIFIER constraint .

    RSQUARE         reduce using rule 12 (generic_term -> IDENTIFIER constraint .)
    COMMA           reduce using rule 12 (generic_term -> IDENTIFIER constraint .)


state 28

    (1) class -> class_header generic_class obsolete_class inheritance create . features END
    (68) features -> . fblock
    (69) features -> . empty
    (70) fblock -> . FEATURE users_opt fdec_list
    (174) empty -> .

    FEATURE         shift and go to state 38
    END             reduce using rule 174 (empty -> .)

    features                       shift and go to state 37
    fblock                         shift and go to state 39
    empty                          shift and go to state 40

state 29

    (61) create -> empty .

    FEATURE         reduce using rule 61 (create -> empty .)
    END             reduce using rule 61 (create -> empty .)


state 30

    (62) create_block -> CREATE . users_opt proc_list
    (63) users_opt -> . users
    (64) users_opt -> . empty
    (47) users -> . LCUR_PARN class_list RCUR_PARN
    (174) empty -> .

    LCUR_PARN       shift and go to state 43
    IDENTIFIER      reduce using rule 174 (empty -> .)
    COMMA           reduce using rule 174 (empty -> .)
    FEATURE         reduce using rule 174 (empty -> .)
    END             reduce using rule 174 (empty -> .)

    users                          shift and go to state 41
    empty                          shift and go to state 44
    users_opt                      shift and go to state 42

state 31

    (60) create -> create_block .

    FEATURE         reduce using rule 60 (create -> create_block .)
    END             reduce using rule 60 (create -> create_block .)


state 32

    (21) class_element -> class_type . inh_features
    (22) inh_features -> . feature_arrangement1
    (23) inh_features -> . feature_arrangement2
    (24) inh_features -> . feature_arrangement3
    (25) inh_features -> . feature_arrangement4
    (26) inh_features -> . feature_arrangement5
    (27) inh_features -> . empty
    (28) feature_arrangement1 -> . rename export_opt undefine_opt redefine_opt select_opt END
    (29) feature_arrangement2 -> . export undefine_opt redefine_opt select_opt END
    (30) feature_arrangement3 -> . undefine redefine_opt select_opt END
    (31) feature_arrangement4 -> . redefine select_opt END
    (32) feature_arrangement5 -> . select END
    (174) empty -> .
    (33) rename -> . RENAME rname_list
    (38) export -> . EXPORT elist
    (53) undefine -> . UNDEFINE routine_list
    (56) redefine -> . REDEFINE routine_list
    (59) select -> . SELECT routine_list

    COLON           reduce using rule 174 (empty -> .)
    IDENTIFIER      reduce using rule 174 (empty -> .)
    CREATE          reduce using rule 174 (empty -> .)
    FEATURE         reduce using rule 174 (empty -> .)
    END             reduce using rule 174 (empty -> .)
    RENAME          shift and go to state 46
    EXPORT          shift and go to state 50
    UNDEFINE        shift and go to state 49
    REDEFINE        shift and go to state 48
    SELECT          shift and go to state 53

    rename                         shift and go to state 45
    redefine                       shift and go to state 47
    feature_arrangement5           shift and go to state 55
    feature_arrangement4           shift and go to state 56
    feature_arrangement1           shift and go to state 57
    feature_arrangement3           shift and go to state 58
    feature_arrangement2           shift and go to state 59
    undefine                       shift and go to state 60
    select                         shift and go to state 51
    export                         shift and go to state 61
    empty                          shift and go to state 54
    inh_features                   shift and go to state 52

state 33

    (16) inheritance -> INHERIT inh_list .
    (19) inh_list -> inh_list . class_element
    (20) inh_list -> inh_list . COLON class_element
    (21) class_element -> . class_type inh_features
    (168) class_type -> . IDENTIFIER generic

    CREATE          reduce using rule 16 (inheritance -> INHERIT inh_list .)
    FEATURE         reduce using rule 16 (inheritance -> INHERIT inh_list .)
    END             reduce using rule 16 (inheritance -> INHERIT inh_list .)
    COLON           shift and go to state 63
    IDENTIFIER      shift and go to state 35

    class_element                  shift and go to state 62
    class_type                     shift and go to state 32

state 34

    (18) inh_list -> class_element .

    COLON           reduce using rule 18 (inh_list -> class_element .)
    IDENTIFIER      reduce using rule 18 (inh_list -> class_element .)
    CREATE          reduce using rule 18 (inh_list -> class_element .)
    FEATURE         reduce using rule 18 (inh_list -> class_element .)
    END             reduce using rule 18 (inh_list -> class_element .)


state 35

    (168) class_type -> IDENTIFIER . generic
    (169) generic -> . LSQUARE type_list RSQUARE
    (170) generic -> . empty
    (174) empty -> .

    LSQUARE         shift and go to state 65
    RENAME          reduce using rule 174 (empty -> .)
    EXPORT          reduce using rule 174 (empty -> .)
    UNDEFINE        reduce using rule 174 (empty -> .)
    REDEFINE        reduce using rule 174 (empty -> .)
    SELECT          reduce using rule 174 (empty -> .)
    COLON           reduce using rule 174 (empty -> .)
    IDENTIFIER      reduce using rule 174 (empty -> .)
    CREATE          reduce using rule 174 (empty -> .)
    FEATURE         reduce using rule 174 (empty -> .)
    END             reduce using rule 174 (empty -> .)
    RSQUARE         reduce using rule 174 (empty -> .)
    COMMA           reduce using rule 174 (empty -> .)
    RPAREN          reduce using rule 174 (empty -> .)
    IS              reduce using rule 174 (empty -> .)
    FROZEN          reduce using rule 174 (empty -> .)

    generic                        shift and go to state 64
    empty                          shift and go to state 66

state 36

    (10) generic_list -> generic_list COMMA generic_term .

    RSQUARE         reduce using rule 10 (generic_list -> generic_list COMMA generic_term .)
    COMMA           reduce using rule 10 (generic_list -> generic_list COMMA generic_term .)


state 37

    (1) class -> class_header generic_class obsolete_class inheritance create features . END

    END             shift and go to state 67


state 38

    (70) fblock -> FEATURE . users_opt fdec_list
    (63) users_opt -> . users
    (64) users_opt -> . empty
    (47) users -> . LCUR_PARN class_list RCUR_PARN
    (174) empty -> .

    LCUR_PARN       shift and go to state 43
    FROZEN          reduce using rule 174 (empty -> .)
    IDENTIFIER      reduce using rule 174 (empty -> .)

    users                          shift and go to state 41
    empty                          shift and go to state 44
    users_opt                      shift and go to state 68

state 39

    (68) features -> fblock .

    END             reduce using rule 68 (features -> fblock .)


state 40

    (69) features -> empty .

    END             reduce using rule 69 (features -> empty .)


state 41

    (63) users_opt -> users .

    FROZEN          reduce using rule 63 (users_opt -> users .)
    IDENTIFIER      reduce using rule 63 (users_opt -> users .)
    COMMA           reduce using rule 63 (users_opt -> users .)
    FEATURE         reduce using rule 63 (users_opt -> users .)
    END             reduce using rule 63 (users_opt -> users .)


state 42

    (62) create_block -> CREATE users_opt . proc_list
    (65) proc_list -> . IDENTIFIER
    (66) proc_list -> . proc_list COMMA IDENTIFIER
    (67) proc_list -> . empty
    (174) empty -> .

    IDENTIFIER      shift and go to state 70
    COMMA           reduce using rule 174 (empty -> .)
    FEATURE         reduce using rule 174 (empty -> .)
    END             reduce using rule 174 (empty -> .)

    proc_list                      shift and go to state 69
    empty                          shift and go to state 71

state 43

    (47) users -> LCUR_PARN . class_list RCUR_PARN
    (48) class_list -> . IDENTIFIER
    (49) class_list -> . class_list COMMA IDENTIFIER
    (50) class_list -> . empty
    (174) empty -> .

    IDENTIFIER      shift and go to state 73
    RCUR_PARN       reduce using rule 174 (empty -> .)
    COMMA           reduce using rule 174 (empty -> .)

    class_list                     shift and go to state 72
    empty                          shift and go to state 74

state 44

    (64) users_opt -> empty .

    FROZEN          reduce using rule 64 (users_opt -> empty .)
    IDENTIFIER      reduce using rule 64 (users_opt -> empty .)
    COMMA           reduce using rule 64 (users_opt -> empty .)
    FEATURE         reduce using rule 64 (users_opt -> empty .)
    END             reduce using rule 64 (users_opt -> empty .)


state 45

    (28) feature_arrangement1 -> rename . export_opt undefine_opt redefine_opt select_opt END
    (36) export_opt -> . export
    (37) export_opt -> . empty
    (38) export -> . EXPORT elist
    (174) empty -> .

    EXPORT          shift and go to state 50
    UNDEFINE        reduce using rule 174 (empty -> .)
    REDEFINE        reduce using rule 174 (empty -> .)
    SELECT          reduce using rule 174 (empty -> .)
    END             reduce using rule 174 (empty -> .)

    export                         shift and go to state 75
    export_opt                     shift and go to state 76
    empty                          shift and go to state 77

state 46

    (33) rename -> RENAME . rname_list
    (34) rname_list -> . fname ASSIGN fname
    (35) rname_list -> . rname_list COMMA fname ASSIGN fname
    (163) fname -> . IDENTIFIER

    IDENTIFIER      shift and go to state 80

    rname_list                     shift and go to state 79
    fname                          shift and go to state 78

state 47

    (31) feature_arrangement4 -> redefine . select_opt END
    (57) select_opt -> . select
    (58) select_opt -> . empty
    (59) select -> . SELECT routine_list
    (174) empty -> .

    SELECT          shift and go to state 53
    END             reduce using rule 174 (empty -> .)

    select_opt                     shift and go to state 82
    empty                          shift and go to state 83
    select                         shift and go to state 81

state 48

    (56) redefine -> REDEFINE . routine_list
    (45) routine_list -> . fname
    (46) routine_list -> . empty
    (163) fname -> . IDENTIFIER
    (174) empty -> .

    IDENTIFIER      shift and go to state 80
    SELECT          reduce using rule 174 (empty -> .)
    END             reduce using rule 174 (empty -> .)

    empty                          shift and go to state 84
    fname                          shift and go to state 85
    routine_list                   shift and go to state 86

state 49

    (53) undefine -> UNDEFINE . routine_list
    (45) routine_list -> . fname
    (46) routine_list -> . empty
    (163) fname -> . IDENTIFIER
    (174) empty -> .

    IDENTIFIER      shift and go to state 80
    REDEFINE        reduce using rule 174 (empty -> .)
    SELECT          reduce using rule 174 (empty -> .)
    END             reduce using rule 174 (empty -> .)

    empty                          shift and go to state 84
    fname                          shift and go to state 85
    routine_list                   shift and go to state 87

state 50

    (38) export -> EXPORT . elist
    (39) elist -> . eitem
    (40) elist -> . elist eitem
    (41) elist -> . elist COMMA eitem
    (42) eitem -> . users routine
    (47) users -> . LCUR_PARN class_list RCUR_PARN

    LCUR_PARN       shift and go to state 43

    elist                          shift and go to state 89
    eitem                          shift and go to state 90
    users                          shift and go to state 88

state 51

    (32) feature_arrangement5 -> select . END

    END             shift and go to state 91


state 52

    (21) class_element -> class_type inh_features .

    COLON           reduce using rule 21 (class_element -> class_type inh_features .)
    IDENTIFIER      reduce using rule 21 (class_element -> class_type inh_features .)
    CREATE          reduce using rule 21 (class_element -> class_type inh_features .)
    FEATURE         reduce using rule 21 (class_element -> class_type inh_features .)
    END             reduce using rule 21 (class_element -> class_type inh_features .)


state 53

    (59) select -> SELECT . routine_list
    (45) routine_list -> . fname
    (46) routine_list -> . empty
    (163) fname -> . IDENTIFIER
    (174) empty -> .

    IDENTIFIER      shift and go to state 80
    END             reduce using rule 174 (empty -> .)

    empty                          shift and go to state 84
    fname                          shift and go to state 85
    routine_list                   shift and go to state 92

state 54

    (27) inh_features -> empty .

    COLON           reduce using rule 27 (inh_features -> empty .)
    IDENTIFIER      reduce using rule 27 (inh_features -> empty .)
    CREATE          reduce using rule 27 (inh_features -> empty .)
    FEATURE         reduce using rule 27 (inh_features -> empty .)
    END             reduce using rule 27 (inh_features -> empty .)


state 55

    (26) inh_features -> feature_arrangement5 .

    COLON           reduce using rule 26 (inh_features -> feature_arrangement5 .)
    IDENTIFIER      reduce using rule 26 (inh_features -> feature_arrangement5 .)
    CREATE          reduce using rule 26 (inh_features -> feature_arrangement5 .)
    FEATURE         reduce using rule 26 (inh_features -> feature_arrangement5 .)
    END             reduce using rule 26 (inh_features -> feature_arrangement5 .)


state 56

    (25) inh_features -> feature_arrangement4 .

    COLON           reduce using rule 25 (inh_features -> feature_arrangement4 .)
    IDENTIFIER      reduce using rule 25 (inh_features -> feature_arrangement4 .)
    CREATE          reduce using rule 25 (inh_features -> feature_arrangement4 .)
    FEATURE         reduce using rule 25 (inh_features -> feature_arrangement4 .)
    END             reduce using rule 25 (inh_features -> feature_arrangement4 .)


state 57

    (22) inh_features -> feature_arrangement1 .

    COLON           reduce using rule 22 (inh_features -> feature_arrangement1 .)
    IDENTIFIER      reduce using rule 22 (inh_features -> feature_arrangement1 .)
    CREATE          reduce using rule 22 (inh_features -> feature_arrangement1 .)
    FEATURE         reduce using rule 22 (inh_features -> feature_arrangement1 .)
    END             reduce using rule 22 (inh_features -> feature_arrangement1 .)


state 58

    (24) inh_features -> feature_arrangement3 .

    COLON           reduce using rule 24 (inh_features -> feature_arrangement3 .)
    IDENTIFIER      reduce using rule 24 (inh_features -> feature_arrangement3 .)
    CREATE          reduce using rule 24 (inh_features -> feature_arrangement3 .)
    FEATURE         reduce using rule 24 (inh_features -> feature_arrangement3 .)
    END             reduce using rule 24 (inh_features -> feature_arrangement3 .)


state 59

    (23) inh_features -> feature_arrangement2 .

    COLON           reduce using rule 23 (inh_features -> feature_arrangement2 .)
    IDENTIFIER      reduce using rule 23 (inh_features -> feature_arrangement2 .)
    CREATE          reduce using rule 23 (inh_features -> feature_arrangement2 .)
    FEATURE         reduce using rule 23 (inh_features -> feature_arrangement2 .)
    END             reduce using rule 23 (inh_features -> feature_arrangement2 .)


state 60

    (30) feature_arrangement3 -> undefine . redefine_opt select_opt END
    (54) redefine_opt -> . redefine
    (55) redefine_opt -> . empty
    (56) redefine -> . REDEFINE routine_list
    (174) empty -> .

    REDEFINE        shift and go to state 48
    SELECT          reduce using rule 174 (empty -> .)
    END             reduce using rule 174 (empty -> .)

    redefine                       shift and go to state 93
    redefine_opt                   shift and go to state 94
    empty                          shift and go to state 95

state 61

    (29) feature_arrangement2 -> export . undefine_opt redefine_opt select_opt END
    (51) undefine_opt -> . undefine
    (52) undefine_opt -> . empty
    (53) undefine -> . UNDEFINE routine_list
    (174) empty -> .

    UNDEFINE        shift and go to state 49
    REDEFINE        reduce using rule 174 (empty -> .)
    SELECT          reduce using rule 174 (empty -> .)
    END             reduce using rule 174 (empty -> .)

    undefine                       shift and go to state 96
    undefine_opt                   shift and go to state 97
    empty                          shift and go to state 98

state 62

    (19) inh_list -> inh_list class_element .

    COLON           reduce using rule 19 (inh_list -> inh_list class_element .)
    IDENTIFIER      reduce using rule 19 (inh_list -> inh_list class_element .)
    CREATE          reduce using rule 19 (inh_list -> inh_list class_element .)
    FEATURE         reduce using rule 19 (inh_list -> inh_list class_element .)
    END             reduce using rule 19 (inh_list -> inh_list class_element .)


state 63

    (20) inh_list -> inh_list COLON . class_element
    (21) class_element -> . class_type inh_features
    (168) class_type -> . IDENTIFIER generic

    IDENTIFIER      shift and go to state 35

    class_element                  shift and go to state 99
    class_type                     shift and go to state 32

state 64

    (168) class_type -> IDENTIFIER generic .

    RENAME          reduce using rule 168 (class_type -> IDENTIFIER generic .)
    EXPORT          reduce using rule 168 (class_type -> IDENTIFIER generic .)
    UNDEFINE        reduce using rule 168 (class_type -> IDENTIFIER generic .)
    REDEFINE        reduce using rule 168 (class_type -> IDENTIFIER generic .)
    SELECT          reduce using rule 168 (class_type -> IDENTIFIER generic .)
    COLON           reduce using rule 168 (class_type -> IDENTIFIER generic .)
    IDENTIFIER      reduce using rule 168 (class_type -> IDENTIFIER generic .)
    CREATE          reduce using rule 168 (class_type -> IDENTIFIER generic .)
    FEATURE         reduce using rule 168 (class_type -> IDENTIFIER generic .)
    END             reduce using rule 168 (class_type -> IDENTIFIER generic .)
    RSQUARE         reduce using rule 168 (class_type -> IDENTIFIER generic .)
    COMMA           reduce using rule 168 (class_type -> IDENTIFIER generic .)
    RPAREN          reduce using rule 168 (class_type -> IDENTIFIER generic .)
    IS              reduce using rule 168 (class_type -> IDENTIFIER generic .)
    FROZEN          reduce using rule 168 (class_type -> IDENTIFIER generic .)


state 65

    (169) generic -> LSQUARE . type_list RSQUARE
    (171) type_list -> . type
    (172) type_list -> . type_list COMMA type
    (173) type_list -> . empty
    (164) type -> . class_type
    (165) type -> . EXPANDED class_type
    (166) type -> . LIKE CURRENT
    (167) type -> . LIKE IDENTIFIER
    (174) empty -> .
    (168) class_type -> . IDENTIFIER generic

    EXPANDED        shift and go to state 101
    LIKE            shift and go to state 105
    RSQUARE         reduce using rule 174 (empty -> .)
    COMMA           reduce using rule 174 (empty -> .)
    IDENTIFIER      shift and go to state 35

    type_list                      shift and go to state 102
    type                           shift and go to state 103
    class_type                     shift and go to state 100
    empty                          shift and go to state 104

state 66

    (170) generic -> empty .

    RENAME          reduce using rule 170 (generic -> empty .)
    EXPORT          reduce using rule 170 (generic -> empty .)
    UNDEFINE        reduce using rule 170 (generic -> empty .)
    REDEFINE        reduce using rule 170 (generic -> empty .)
    SELECT          reduce using rule 170 (generic -> empty .)
    COLON           reduce using rule 170 (generic -> empty .)
    IDENTIFIER      reduce using rule 170 (generic -> empty .)
    CREATE          reduce using rule 170 (generic -> empty .)
    FEATURE         reduce using rule 170 (generic -> empty .)
    END             reduce using rule 170 (generic -> empty .)
    RSQUARE         reduce using rule 170 (generic -> empty .)
    COMMA           reduce using rule 170 (generic -> empty .)
    RPAREN          reduce using rule 170 (generic -> empty .)
    IS              reduce using rule 170 (generic -> empty .)
    FROZEN          reduce using rule 170 (generic -> empty .)


state 67

    (1) class -> class_header generic_class obsolete_class inheritance create features END .

    $end            reduce using rule 1 (class -> class_header generic_class obsolete_class inheritance create features END .)


state 68

    (70) fblock -> FEATURE users_opt . fdec_list
    (71) fdec_list -> . fdec
    (72) fdec_list -> . fdec_list fdec
    (73) fdec_list -> . fdec_list COLON fdec
    (74) fdec -> . new_feature fbody
    (75) new_feature -> . fname
    (76) new_feature -> . FROZEN fname
    (163) fname -> . IDENTIFIER

    FROZEN          shift and go to state 107
    IDENTIFIER      shift and go to state 80

    new_feature                    shift and go to state 110
    fdec_list                      shift and go to state 108
    fdec                           shift and go to state 109
    fname                          shift and go to state 106

state 69

    (62) create_block -> CREATE users_opt proc_list .
    (66) proc_list -> proc_list . COMMA IDENTIFIER

    FEATURE         reduce using rule 62 (create_block -> CREATE users_opt proc_list .)
    END             reduce using rule 62 (create_block -> CREATE users_opt proc_list .)
    COMMA           shift and go to state 111


state 70

    (65) proc_list -> IDENTIFIER .

    COMMA           reduce using rule 65 (proc_list -> IDENTIFIER .)
    FEATURE         reduce using rule 65 (proc_list -> IDENTIFIER .)
    END             reduce using rule 65 (proc_list -> IDENTIFIER .)


state 71

    (67) proc_list -> empty .

    COMMA           reduce using rule 67 (proc_list -> empty .)
    FEATURE         reduce using rule 67 (proc_list -> empty .)
    END             reduce using rule 67 (proc_list -> empty .)


state 72

    (47) users -> LCUR_PARN class_list . RCUR_PARN
    (49) class_list -> class_list . COMMA IDENTIFIER

    RCUR_PARN       shift and go to state 112
    COMMA           shift and go to state 113


state 73

    (48) class_list -> IDENTIFIER .

    RCUR_PARN       reduce using rule 48 (class_list -> IDENTIFIER .)
    COMMA           reduce using rule 48 (class_list -> IDENTIFIER .)


state 74

    (50) class_list -> empty .

    RCUR_PARN       reduce using rule 50 (class_list -> empty .)
    COMMA           reduce using rule 50 (class_list -> empty .)


state 75

    (36) export_opt -> export .

    UNDEFINE        reduce using rule 36 (export_opt -> export .)
    REDEFINE        reduce using rule 36 (export_opt -> export .)
    SELECT          reduce using rule 36 (export_opt -> export .)
    END             reduce using rule 36 (export_opt -> export .)


state 76

    (28) feature_arrangement1 -> rename export_opt . undefine_opt redefine_opt select_opt END
    (51) undefine_opt -> . undefine
    (52) undefine_opt -> . empty
    (53) undefine -> . UNDEFINE routine_list
    (174) empty -> .

    UNDEFINE        shift and go to state 49
    REDEFINE        reduce using rule 174 (empty -> .)
    SELECT          reduce using rule 174 (empty -> .)
    END             reduce using rule 174 (empty -> .)

    undefine                       shift and go to state 96
    undefine_opt                   shift and go to state 114
    empty                          shift and go to state 98

state 77

    (37) export_opt -> empty .

    UNDEFINE        reduce using rule 37 (export_opt -> empty .)
    REDEFINE        reduce using rule 37 (export_opt -> empty .)
    SELECT          reduce using rule 37 (export_opt -> empty .)
    END             reduce using rule 37 (export_opt -> empty .)


state 78

    (34) rname_list -> fname . ASSIGN fname

    ASSIGN          shift and go to state 115


state 79

    (33) rename -> RENAME rname_list .
    (35) rname_list -> rname_list . COMMA fname ASSIGN fname

    EXPORT          reduce using rule 33 (rename -> RENAME rname_list .)
    UNDEFINE        reduce using rule 33 (rename -> RENAME rname_list .)
    REDEFINE        reduce using rule 33 (rename -> RENAME rname_list .)
    SELECT          reduce using rule 33 (rename -> RENAME rname_list .)
    END             reduce using rule 33 (rename -> RENAME rname_list .)
    COMMA           shift and go to state 116


state 80

    (163) fname -> IDENTIFIER .

    COMMA           reduce using rule 163 (fname -> IDENTIFIER .)
    EXPORT          reduce using rule 163 (fname -> IDENTIFIER .)
    UNDEFINE        reduce using rule 163 (fname -> IDENTIFIER .)
    REDEFINE        reduce using rule 163 (fname -> IDENTIFIER .)
    SELECT          reduce using rule 163 (fname -> IDENTIFIER .)
    END             reduce using rule 163 (fname -> IDENTIFIER .)
    LPAREN          reduce using rule 163 (fname -> IDENTIFIER .)
    IS              reduce using rule 163 (fname -> IDENTIFIER .)
    COLON           reduce using rule 163 (fname -> IDENTIFIER .)
    FROZEN          reduce using rule 163 (fname -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 163 (fname -> IDENTIFIER .)
    ASSIGN          reduce using rule 163 (fname -> IDENTIFIER .)
    LCUR_PARN       reduce using rule 163 (fname -> IDENTIFIER .)


state 81

    (57) select_opt -> select .

    END             reduce using rule 57 (select_opt -> select .)


state 82

    (31) feature_arrangement4 -> redefine select_opt . END

    END             shift and go to state 117


state 83

    (58) select_opt -> empty .

    END             reduce using rule 58 (select_opt -> empty .)


state 84

    (46) routine_list -> empty .

    COMMA           reduce using rule 46 (routine_list -> empty .)
    LCUR_PARN       reduce using rule 46 (routine_list -> empty .)
    UNDEFINE        reduce using rule 46 (routine_list -> empty .)
    REDEFINE        reduce using rule 46 (routine_list -> empty .)
    SELECT          reduce using rule 46 (routine_list -> empty .)
    END             reduce using rule 46 (routine_list -> empty .)


state 85

    (45) routine_list -> fname .

    COMMA           reduce using rule 45 (routine_list -> fname .)
    LCUR_PARN       reduce using rule 45 (routine_list -> fname .)
    UNDEFINE        reduce using rule 45 (routine_list -> fname .)
    REDEFINE        reduce using rule 45 (routine_list -> fname .)
    SELECT          reduce using rule 45 (routine_list -> fname .)
    END             reduce using rule 45 (routine_list -> fname .)


state 86

    (56) redefine -> REDEFINE routine_list .

    SELECT          reduce using rule 56 (redefine -> REDEFINE routine_list .)
    END             reduce using rule 56 (redefine -> REDEFINE routine_list .)


state 87

    (53) undefine -> UNDEFINE routine_list .

    REDEFINE        reduce using rule 53 (undefine -> UNDEFINE routine_list .)
    SELECT          reduce using rule 53 (undefine -> UNDEFINE routine_list .)
    END             reduce using rule 53 (undefine -> UNDEFINE routine_list .)


state 88

    (42) eitem -> users . routine
    (43) routine -> . routine_list
    (44) routine -> . ALL
    (45) routine_list -> . fname
    (46) routine_list -> . empty
    (163) fname -> . IDENTIFIER
    (174) empty -> .

    ALL             shift and go to state 118
    IDENTIFIER      shift and go to state 80
    COMMA           reduce using rule 174 (empty -> .)
    LCUR_PARN       reduce using rule 174 (empty -> .)
    UNDEFINE        reduce using rule 174 (empty -> .)
    REDEFINE        reduce using rule 174 (empty -> .)
    SELECT          reduce using rule 174 (empty -> .)
    END             reduce using rule 174 (empty -> .)

    empty                          shift and go to state 84
    routine_list                   shift and go to state 120
    fname                          shift and go to state 85
    routine                        shift and go to state 119

state 89

    (38) export -> EXPORT elist .
    (40) elist -> elist . eitem
    (41) elist -> elist . COMMA eitem
    (42) eitem -> . users routine
    (47) users -> . LCUR_PARN class_list RCUR_PARN

    UNDEFINE        reduce using rule 38 (export -> EXPORT elist .)
    REDEFINE        reduce using rule 38 (export -> EXPORT elist .)
    SELECT          reduce using rule 38 (export -> EXPORT elist .)
    END             reduce using rule 38 (export -> EXPORT elist .)
    COMMA           shift and go to state 122
    LCUR_PARN       shift and go to state 43

    eitem                          shift and go to state 121
    users                          shift and go to state 88

state 90

    (39) elist -> eitem .

    COMMA           reduce using rule 39 (elist -> eitem .)
    LCUR_PARN       reduce using rule 39 (elist -> eitem .)
    UNDEFINE        reduce using rule 39 (elist -> eitem .)
    REDEFINE        reduce using rule 39 (elist -> eitem .)
    SELECT          reduce using rule 39 (elist -> eitem .)
    END             reduce using rule 39 (elist -> eitem .)


state 91

    (32) feature_arrangement5 -> select END .

    COLON           reduce using rule 32 (feature_arrangement5 -> select END .)
    IDENTIFIER      reduce using rule 32 (feature_arrangement5 -> select END .)
    CREATE          reduce using rule 32 (feature_arrangement5 -> select END .)
    FEATURE         reduce using rule 32 (feature_arrangement5 -> select END .)
    END             reduce using rule 32 (feature_arrangement5 -> select END .)


state 92

    (59) select -> SELECT routine_list .

    END             reduce using rule 59 (select -> SELECT routine_list .)


state 93

    (54) redefine_opt -> redefine .

    SELECT          reduce using rule 54 (redefine_opt -> redefine .)
    END             reduce using rule 54 (redefine_opt -> redefine .)


state 94

    (30) feature_arrangement3 -> undefine redefine_opt . select_opt END
    (57) select_opt -> . select
    (58) select_opt -> . empty
    (59) select -> . SELECT routine_list
    (174) empty -> .

    SELECT          shift and go to state 53
    END             reduce using rule 174 (empty -> .)

    select_opt                     shift and go to state 123
    select                         shift and go to state 81
    empty                          shift and go to state 83

state 95

    (55) redefine_opt -> empty .

    SELECT          reduce using rule 55 (redefine_opt -> empty .)
    END             reduce using rule 55 (redefine_opt -> empty .)


state 96

    (51) undefine_opt -> undefine .

    REDEFINE        reduce using rule 51 (undefine_opt -> undefine .)
    SELECT          reduce using rule 51 (undefine_opt -> undefine .)
    END             reduce using rule 51 (undefine_opt -> undefine .)


state 97

    (29) feature_arrangement2 -> export undefine_opt . redefine_opt select_opt END
    (54) redefine_opt -> . redefine
    (55) redefine_opt -> . empty
    (56) redefine -> . REDEFINE routine_list
    (174) empty -> .

    REDEFINE        shift and go to state 48
    SELECT          reduce using rule 174 (empty -> .)
    END             reduce using rule 174 (empty -> .)

    redefine                       shift and go to state 93
    redefine_opt                   shift and go to state 124
    empty                          shift and go to state 95

state 98

    (52) undefine_opt -> empty .

    REDEFINE        reduce using rule 52 (undefine_opt -> empty .)
    SELECT          reduce using rule 52 (undefine_opt -> empty .)
    END             reduce using rule 52 (undefine_opt -> empty .)


state 99

    (20) inh_list -> inh_list COLON class_element .

    COLON           reduce using rule 20 (inh_list -> inh_list COLON class_element .)
    IDENTIFIER      reduce using rule 20 (inh_list -> inh_list COLON class_element .)
    CREATE          reduce using rule 20 (inh_list -> inh_list COLON class_element .)
    FEATURE         reduce using rule 20 (inh_list -> inh_list COLON class_element .)
    END             reduce using rule 20 (inh_list -> inh_list COLON class_element .)


state 100

    (164) type -> class_type .

    RPAREN          reduce using rule 164 (type -> class_type .)
    COMMA           reduce using rule 164 (type -> class_type .)
    IDENTIFIER      reduce using rule 164 (type -> class_type .)
    IS              reduce using rule 164 (type -> class_type .)
    COLON           reduce using rule 164 (type -> class_type .)
    FROZEN          reduce using rule 164 (type -> class_type .)
    END             reduce using rule 164 (type -> class_type .)
    RSQUARE         reduce using rule 164 (type -> class_type .)


state 101

    (165) type -> EXPANDED . class_type
    (168) class_type -> . IDENTIFIER generic

    IDENTIFIER      shift and go to state 35

    class_type                     shift and go to state 125

state 102

    (169) generic -> LSQUARE type_list . RSQUARE
    (172) type_list -> type_list . COMMA type

    RSQUARE         shift and go to state 126
    COMMA           shift and go to state 127


state 103

    (171) type_list -> type .

    RSQUARE         reduce using rule 171 (type_list -> type .)
    COMMA           reduce using rule 171 (type_list -> type .)


state 104

    (173) type_list -> empty .

    RSQUARE         reduce using rule 173 (type_list -> empty .)
    COMMA           reduce using rule 173 (type_list -> empty .)


state 105

    (166) type -> LIKE . CURRENT
    (167) type -> LIKE . IDENTIFIER

    CURRENT         shift and go to state 128
    IDENTIFIER      shift and go to state 129


state 106

    (75) new_feature -> fname .

    LPAREN          reduce using rule 75 (new_feature -> fname .)
    IS              reduce using rule 75 (new_feature -> fname .)
    COLON           reduce using rule 75 (new_feature -> fname .)
    FROZEN          reduce using rule 75 (new_feature -> fname .)
    IDENTIFIER      reduce using rule 75 (new_feature -> fname .)
    END             reduce using rule 75 (new_feature -> fname .)


state 107

    (76) new_feature -> FROZEN . fname
    (163) fname -> . IDENTIFIER

    IDENTIFIER      shift and go to state 80

    fname                          shift and go to state 130

state 108

    (70) fblock -> FEATURE users_opt fdec_list .
    (72) fdec_list -> fdec_list . fdec
    (73) fdec_list -> fdec_list . COLON fdec
    (74) fdec -> . new_feature fbody
    (75) new_feature -> . fname
    (76) new_feature -> . FROZEN fname
    (163) fname -> . IDENTIFIER

    END             reduce using rule 70 (fblock -> FEATURE users_opt fdec_list .)
    COLON           shift and go to state 132
    FROZEN          shift and go to state 107
    IDENTIFIER      shift and go to state 80

    new_feature                    shift and go to state 110
    fdec                           shift and go to state 131
    fname                          shift and go to state 106

state 109

    (71) fdec_list -> fdec .

    COLON           reduce using rule 71 (fdec_list -> fdec .)
    FROZEN          reduce using rule 71 (fdec_list -> fdec .)
    IDENTIFIER      reduce using rule 71 (fdec_list -> fdec .)
    END             reduce using rule 71 (fdec_list -> fdec .)


state 110

    (74) fdec -> new_feature . fbody
    (77) fbody -> . arg_type_opt basic_body
    (78) arg_type_opt -> . LPAREN entity_list RPAREN COLON type
    (79) arg_type_opt -> . empty
    (174) empty -> .

    LPAREN          shift and go to state 134
    IS              reduce using rule 174 (empty -> .)
    COLON           reduce using rule 174 (empty -> .)
    FROZEN          reduce using rule 174 (empty -> .)
    IDENTIFIER      reduce using rule 174 (empty -> .)
    END             reduce using rule 174 (empty -> .)

    arg_type_opt                   shift and go to state 133
    fbody                          shift and go to state 135
    empty                          shift and go to state 136

state 111

    (66) proc_list -> proc_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 137


state 112

    (47) users -> LCUR_PARN class_list RCUR_PARN .

    ALL             reduce using rule 47 (users -> LCUR_PARN class_list RCUR_PARN .)
    IDENTIFIER      reduce using rule 47 (users -> LCUR_PARN class_list RCUR_PARN .)
    COMMA           reduce using rule 47 (users -> LCUR_PARN class_list RCUR_PARN .)
    LCUR_PARN       reduce using rule 47 (users -> LCUR_PARN class_list RCUR_PARN .)
    UNDEFINE        reduce using rule 47 (users -> LCUR_PARN class_list RCUR_PARN .)
    REDEFINE        reduce using rule 47 (users -> LCUR_PARN class_list RCUR_PARN .)
    SELECT          reduce using rule 47 (users -> LCUR_PARN class_list RCUR_PARN .)
    END             reduce using rule 47 (users -> LCUR_PARN class_list RCUR_PARN .)
    FROZEN          reduce using rule 47 (users -> LCUR_PARN class_list RCUR_PARN .)
    FEATURE         reduce using rule 47 (users -> LCUR_PARN class_list RCUR_PARN .)


state 113

    (49) class_list -> class_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 138


state 114

    (28) feature_arrangement1 -> rename export_opt undefine_opt . redefine_opt select_opt END
    (54) redefine_opt -> . redefine
    (55) redefine_opt -> . empty
    (56) redefine -> . REDEFINE routine_list
    (174) empty -> .

    REDEFINE        shift and go to state 48
    SELECT          reduce using rule 174 (empty -> .)
    END             reduce using rule 174 (empty -> .)

    redefine                       shift and go to state 93
    redefine_opt                   shift and go to state 139
    empty                          shift and go to state 95

state 115

    (34) rname_list -> fname ASSIGN . fname
    (163) fname -> . IDENTIFIER

    IDENTIFIER      shift and go to state 80

    fname                          shift and go to state 140

state 116

    (35) rname_list -> rname_list COMMA . fname ASSIGN fname
    (163) fname -> . IDENTIFIER

    IDENTIFIER      shift and go to state 80

    fname                          shift and go to state 141

state 117

    (31) feature_arrangement4 -> redefine select_opt END .

    COLON           reduce using rule 31 (feature_arrangement4 -> redefine select_opt END .)
    IDENTIFIER      reduce using rule 31 (feature_arrangement4 -> redefine select_opt END .)
    CREATE          reduce using rule 31 (feature_arrangement4 -> redefine select_opt END .)
    FEATURE         reduce using rule 31 (feature_arrangement4 -> redefine select_opt END .)
    END             reduce using rule 31 (feature_arrangement4 -> redefine select_opt END .)


state 118

    (44) routine -> ALL .

    COMMA           reduce using rule 44 (routine -> ALL .)
    LCUR_PARN       reduce using rule 44 (routine -> ALL .)
    UNDEFINE        reduce using rule 44 (routine -> ALL .)
    REDEFINE        reduce using rule 44 (routine -> ALL .)
    SELECT          reduce using rule 44 (routine -> ALL .)
    END             reduce using rule 44 (routine -> ALL .)


state 119

    (42) eitem -> users routine .

    COMMA           reduce using rule 42 (eitem -> users routine .)
    LCUR_PARN       reduce using rule 42 (eitem -> users routine .)
    UNDEFINE        reduce using rule 42 (eitem -> users routine .)
    REDEFINE        reduce using rule 42 (eitem -> users routine .)
    SELECT          reduce using rule 42 (eitem -> users routine .)
    END             reduce using rule 42 (eitem -> users routine .)


state 120

    (43) routine -> routine_list .

    COMMA           reduce using rule 43 (routine -> routine_list .)
    LCUR_PARN       reduce using rule 43 (routine -> routine_list .)
    UNDEFINE        reduce using rule 43 (routine -> routine_list .)
    REDEFINE        reduce using rule 43 (routine -> routine_list .)
    SELECT          reduce using rule 43 (routine -> routine_list .)
    END             reduce using rule 43 (routine -> routine_list .)


state 121

    (40) elist -> elist eitem .

    COMMA           reduce using rule 40 (elist -> elist eitem .)
    LCUR_PARN       reduce using rule 40 (elist -> elist eitem .)
    UNDEFINE        reduce using rule 40 (elist -> elist eitem .)
    REDEFINE        reduce using rule 40 (elist -> elist eitem .)
    SELECT          reduce using rule 40 (elist -> elist eitem .)
    END             reduce using rule 40 (elist -> elist eitem .)


state 122

    (41) elist -> elist COMMA . eitem
    (42) eitem -> . users routine
    (47) users -> . LCUR_PARN class_list RCUR_PARN

    LCUR_PARN       shift and go to state 43

    eitem                          shift and go to state 142
    users                          shift and go to state 88

state 123

    (30) feature_arrangement3 -> undefine redefine_opt select_opt . END

    END             shift and go to state 143


state 124

    (29) feature_arrangement2 -> export undefine_opt redefine_opt . select_opt END
    (57) select_opt -> . select
    (58) select_opt -> . empty
    (59) select -> . SELECT routine_list
    (174) empty -> .

    SELECT          shift and go to state 53
    END             reduce using rule 174 (empty -> .)

    select_opt                     shift and go to state 144
    select                         shift and go to state 81
    empty                          shift and go to state 83

state 125

    (165) type -> EXPANDED class_type .

    RPAREN          reduce using rule 165 (type -> EXPANDED class_type .)
    COMMA           reduce using rule 165 (type -> EXPANDED class_type .)
    IDENTIFIER      reduce using rule 165 (type -> EXPANDED class_type .)
    IS              reduce using rule 165 (type -> EXPANDED class_type .)
    COLON           reduce using rule 165 (type -> EXPANDED class_type .)
    FROZEN          reduce using rule 165 (type -> EXPANDED class_type .)
    END             reduce using rule 165 (type -> EXPANDED class_type .)
    RSQUARE         reduce using rule 165 (type -> EXPANDED class_type .)


state 126

    (169) generic -> LSQUARE type_list RSQUARE .

    RENAME          reduce using rule 169 (generic -> LSQUARE type_list RSQUARE .)
    EXPORT          reduce using rule 169 (generic -> LSQUARE type_list RSQUARE .)
    UNDEFINE        reduce using rule 169 (generic -> LSQUARE type_list RSQUARE .)
    REDEFINE        reduce using rule 169 (generic -> LSQUARE type_list RSQUARE .)
    SELECT          reduce using rule 169 (generic -> LSQUARE type_list RSQUARE .)
    COLON           reduce using rule 169 (generic -> LSQUARE type_list RSQUARE .)
    IDENTIFIER      reduce using rule 169 (generic -> LSQUARE type_list RSQUARE .)
    CREATE          reduce using rule 169 (generic -> LSQUARE type_list RSQUARE .)
    FEATURE         reduce using rule 169 (generic -> LSQUARE type_list RSQUARE .)
    END             reduce using rule 169 (generic -> LSQUARE type_list RSQUARE .)
    RSQUARE         reduce using rule 169 (generic -> LSQUARE type_list RSQUARE .)
    COMMA           reduce using rule 169 (generic -> LSQUARE type_list RSQUARE .)
    RPAREN          reduce using rule 169 (generic -> LSQUARE type_list RSQUARE .)
    IS              reduce using rule 169 (generic -> LSQUARE type_list RSQUARE .)
    FROZEN          reduce using rule 169 (generic -> LSQUARE type_list RSQUARE .)


state 127

    (172) type_list -> type_list COMMA . type
    (164) type -> . class_type
    (165) type -> . EXPANDED class_type
    (166) type -> . LIKE CURRENT
    (167) type -> . LIKE IDENTIFIER
    (168) class_type -> . IDENTIFIER generic

    EXPANDED        shift and go to state 101
    LIKE            shift and go to state 105
    IDENTIFIER      shift and go to state 35

    type                           shift and go to state 145
    class_type                     shift and go to state 100

state 128

    (166) type -> LIKE CURRENT .

    RPAREN          reduce using rule 166 (type -> LIKE CURRENT .)
    COMMA           reduce using rule 166 (type -> LIKE CURRENT .)
    IDENTIFIER      reduce using rule 166 (type -> LIKE CURRENT .)
    IS              reduce using rule 166 (type -> LIKE CURRENT .)
    COLON           reduce using rule 166 (type -> LIKE CURRENT .)
    FROZEN          reduce using rule 166 (type -> LIKE CURRENT .)
    END             reduce using rule 166 (type -> LIKE CURRENT .)
    RSQUARE         reduce using rule 166 (type -> LIKE CURRENT .)


state 129

    (167) type -> LIKE IDENTIFIER .

    RPAREN          reduce using rule 167 (type -> LIKE IDENTIFIER .)
    COMMA           reduce using rule 167 (type -> LIKE IDENTIFIER .)
    IDENTIFIER      reduce using rule 167 (type -> LIKE IDENTIFIER .)
    IS              reduce using rule 167 (type -> LIKE IDENTIFIER .)
    COLON           reduce using rule 167 (type -> LIKE IDENTIFIER .)
    FROZEN          reduce using rule 167 (type -> LIKE IDENTIFIER .)
    END             reduce using rule 167 (type -> LIKE IDENTIFIER .)
    RSQUARE         reduce using rule 167 (type -> LIKE IDENTIFIER .)


state 130

    (76) new_feature -> FROZEN fname .

    LPAREN          reduce using rule 76 (new_feature -> FROZEN fname .)
    IS              reduce using rule 76 (new_feature -> FROZEN fname .)
    COLON           reduce using rule 76 (new_feature -> FROZEN fname .)
    FROZEN          reduce using rule 76 (new_feature -> FROZEN fname .)
    IDENTIFIER      reduce using rule 76 (new_feature -> FROZEN fname .)
    END             reduce using rule 76 (new_feature -> FROZEN fname .)


state 131

    (72) fdec_list -> fdec_list fdec .

    COLON           reduce using rule 72 (fdec_list -> fdec_list fdec .)
    FROZEN          reduce using rule 72 (fdec_list -> fdec_list fdec .)
    IDENTIFIER      reduce using rule 72 (fdec_list -> fdec_list fdec .)
    END             reduce using rule 72 (fdec_list -> fdec_list fdec .)


state 132

    (73) fdec_list -> fdec_list COLON . fdec
    (74) fdec -> . new_feature fbody
    (75) new_feature -> . fname
    (76) new_feature -> . FROZEN fname
    (163) fname -> . IDENTIFIER

    FROZEN          shift and go to state 107
    IDENTIFIER      shift and go to state 80

    fdec                           shift and go to state 146
    fname                          shift and go to state 106
    new_feature                    shift and go to state 110

state 133

    (77) fbody -> arg_type_opt . basic_body
    (86) basic_body -> . IS fvalue
    (87) basic_body -> . empty
    (174) empty -> .

    IS              shift and go to state 147
    COLON           reduce using rule 174 (empty -> .)
    FROZEN          reduce using rule 174 (empty -> .)
    IDENTIFIER      reduce using rule 174 (empty -> .)
    END             reduce using rule 174 (empty -> .)

    basic_body                     shift and go to state 148
    empty                          shift and go to state 149

state 134

    (78) arg_type_opt -> LPAREN . entity_list RPAREN COLON type
    (80) entity_list -> . entity_group
    (81) entity_list -> . entity_list entity_group
    (82) entity_list -> . entity_list COMMA entity_group
    (83) entity_group -> . idlist COLON type
    (84) idlist -> . IDENTIFIER
    (85) idlist -> . idlist COMMA IDENTIFIER

    IDENTIFIER      shift and go to state 150

    entity_group                   shift and go to state 153
    idlist                         shift and go to state 151
    entity_list                    shift and go to state 152

state 135

    (74) fdec -> new_feature fbody .

    COLON           reduce using rule 74 (fdec -> new_feature fbody .)
    FROZEN          reduce using rule 74 (fdec -> new_feature fbody .)
    IDENTIFIER      reduce using rule 74 (fdec -> new_feature fbody .)
    END             reduce using rule 74 (fdec -> new_feature fbody .)


state 136

    (79) arg_type_opt -> empty .

    IS              reduce using rule 79 (arg_type_opt -> empty .)
    COLON           reduce using rule 79 (arg_type_opt -> empty .)
    FROZEN          reduce using rule 79 (arg_type_opt -> empty .)
    IDENTIFIER      reduce using rule 79 (arg_type_opt -> empty .)
    END             reduce using rule 79 (arg_type_opt -> empty .)


state 137

    (66) proc_list -> proc_list COMMA IDENTIFIER .

    COMMA           reduce using rule 66 (proc_list -> proc_list COMMA IDENTIFIER .)
    FEATURE         reduce using rule 66 (proc_list -> proc_list COMMA IDENTIFIER .)
    END             reduce using rule 66 (proc_list -> proc_list COMMA IDENTIFIER .)


state 138

    (49) class_list -> class_list COMMA IDENTIFIER .

    RCUR_PARN       reduce using rule 49 (class_list -> class_list COMMA IDENTIFIER .)
    COMMA           reduce using rule 49 (class_list -> class_list COMMA IDENTIFIER .)


state 139

    (28) feature_arrangement1 -> rename export_opt undefine_opt redefine_opt . select_opt END
    (57) select_opt -> . select
    (58) select_opt -> . empty
    (59) select -> . SELECT routine_list
    (174) empty -> .

    SELECT          shift and go to state 53
    END             reduce using rule 174 (empty -> .)

    select_opt                     shift and go to state 154
    empty                          shift and go to state 83
    select                         shift and go to state 81

state 140

    (34) rname_list -> fname ASSIGN fname .

    COMMA           reduce using rule 34 (rname_list -> fname ASSIGN fname .)
    EXPORT          reduce using rule 34 (rname_list -> fname ASSIGN fname .)
    UNDEFINE        reduce using rule 34 (rname_list -> fname ASSIGN fname .)
    REDEFINE        reduce using rule 34 (rname_list -> fname ASSIGN fname .)
    SELECT          reduce using rule 34 (rname_list -> fname ASSIGN fname .)
    END             reduce using rule 34 (rname_list -> fname ASSIGN fname .)


state 141

    (35) rname_list -> rname_list COMMA fname . ASSIGN fname

    ASSIGN          shift and go to state 155


state 142

    (41) elist -> elist COMMA eitem .

    COMMA           reduce using rule 41 (elist -> elist COMMA eitem .)
    LCUR_PARN       reduce using rule 41 (elist -> elist COMMA eitem .)
    UNDEFINE        reduce using rule 41 (elist -> elist COMMA eitem .)
    REDEFINE        reduce using rule 41 (elist -> elist COMMA eitem .)
    SELECT          reduce using rule 41 (elist -> elist COMMA eitem .)
    END             reduce using rule 41 (elist -> elist COMMA eitem .)


state 143

    (30) feature_arrangement3 -> undefine redefine_opt select_opt END .

    COLON           reduce using rule 30 (feature_arrangement3 -> undefine redefine_opt select_opt END .)
    IDENTIFIER      reduce using rule 30 (feature_arrangement3 -> undefine redefine_opt select_opt END .)
    CREATE          reduce using rule 30 (feature_arrangement3 -> undefine redefine_opt select_opt END .)
    FEATURE         reduce using rule 30 (feature_arrangement3 -> undefine redefine_opt select_opt END .)
    END             reduce using rule 30 (feature_arrangement3 -> undefine redefine_opt select_opt END .)


state 144

    (29) feature_arrangement2 -> export undefine_opt redefine_opt select_opt . END

    END             shift and go to state 156


state 145

    (172) type_list -> type_list COMMA type .

    RSQUARE         reduce using rule 172 (type_list -> type_list COMMA type .)
    COMMA           reduce using rule 172 (type_list -> type_list COMMA type .)


state 146

    (73) fdec_list -> fdec_list COLON fdec .

    COLON           reduce using rule 73 (fdec_list -> fdec_list COLON fdec .)
    FROZEN          reduce using rule 73 (fdec_list -> fdec_list COLON fdec .)
    IDENTIFIER      reduce using rule 73 (fdec_list -> fdec_list COLON fdec .)
    END             reduce using rule 73 (fdec_list -> fdec_list COLON fdec .)


state 147

    (86) basic_body -> IS . fvalue
    (88) fvalue -> . manifest_constant
    (89) fvalue -> . UNIQUE
    (90) fvalue -> . function
    (150) manifest_constant -> . bool_const
    (151) manifest_constant -> . CHARACTER
    (152) manifest_constant -> . int_const
    (153) manifest_constant -> . real_const
    (154) manifest_constant -> . STRING
    (91) function -> . function_body END
    (155) bool_const -> . TRUE
    (156) bool_const -> . FALSE
    (157) int_const -> . INTEGER
    (158) int_const -> . MINUS INTEGER
    (159) int_const -> . PLUS INTEGER
    (160) real_const -> . REAL
    (161) real_const -> . MINUS REAL
    (162) real_const -> . PLUS REAL
    (92) function_body -> . DEFERRED
    (93) function_body -> . Do fnbody
    (94) function_body -> . ONCE fnbody
    (95) function_body -> . EXTERNAL STRING exname

    UNIQUE          shift and go to state 172
    CHARACTER       shift and go to state 159
    STRING          shift and go to state 170
    TRUE            shift and go to state 162
    FALSE           shift and go to state 174
    INTEGER         shift and go to state 167
    MINUS           shift and go to state 163
    PLUS            shift and go to state 166
    REAL            shift and go to state 157
    DEFERRED        shift and go to state 175
    Do              shift and go to state 164
    ONCE            shift and go to state 168
    EXTERNAL        shift and go to state 171

    function                       shift and go to state 169
    int_const                      shift and go to state 173
    manifest_constant              shift and go to state 165
    real_const                     shift and go to state 158
    bool_const                     shift and go to state 160
    function_body                  shift and go to state 161
    fvalue                         shift and go to state 176

state 148

    (77) fbody -> arg_type_opt basic_body .

    COLON           reduce using rule 77 (fbody -> arg_type_opt basic_body .)
    FROZEN          reduce using rule 77 (fbody -> arg_type_opt basic_body .)
    IDENTIFIER      reduce using rule 77 (fbody -> arg_type_opt basic_body .)
    END             reduce using rule 77 (fbody -> arg_type_opt basic_body .)


state 149

    (87) basic_body -> empty .

    COLON           reduce using rule 87 (basic_body -> empty .)
    FROZEN          reduce using rule 87 (basic_body -> empty .)
    IDENTIFIER      reduce using rule 87 (basic_body -> empty .)
    END             reduce using rule 87 (basic_body -> empty .)


state 150

    (84) idlist -> IDENTIFIER .

    COLON           reduce using rule 84 (idlist -> IDENTIFIER .)
    COMMA           reduce using rule 84 (idlist -> IDENTIFIER .)


state 151

    (83) entity_group -> idlist . COLON type
    (85) idlist -> idlist . COMMA IDENTIFIER

    COLON           shift and go to state 178
    COMMA           shift and go to state 177


state 152

    (78) arg_type_opt -> LPAREN entity_list . RPAREN COLON type
    (81) entity_list -> entity_list . entity_group
    (82) entity_list -> entity_list . COMMA entity_group
    (83) entity_group -> . idlist COLON type
    (84) idlist -> . IDENTIFIER
    (85) idlist -> . idlist COMMA IDENTIFIER

    RPAREN          shift and go to state 179
    COMMA           shift and go to state 181
    IDENTIFIER      shift and go to state 150

    entity_group                   shift and go to state 180
    idlist                         shift and go to state 151

state 153

    (80) entity_list -> entity_group .

    RPAREN          reduce using rule 80 (entity_list -> entity_group .)
    COMMA           reduce using rule 80 (entity_list -> entity_group .)
    IDENTIFIER      reduce using rule 80 (entity_list -> entity_group .)


state 154

    (28) feature_arrangement1 -> rename export_opt undefine_opt redefine_opt select_opt . END

    END             shift and go to state 182


state 155

    (35) rname_list -> rname_list COMMA fname ASSIGN . fname
    (163) fname -> . IDENTIFIER

    IDENTIFIER      shift and go to state 80

    fname                          shift and go to state 183

state 156

    (29) feature_arrangement2 -> export undefine_opt redefine_opt select_opt END .

    COLON           reduce using rule 29 (feature_arrangement2 -> export undefine_opt redefine_opt select_opt END .)
    IDENTIFIER      reduce using rule 29 (feature_arrangement2 -> export undefine_opt redefine_opt select_opt END .)
    CREATE          reduce using rule 29 (feature_arrangement2 -> export undefine_opt redefine_opt select_opt END .)
    FEATURE         reduce using rule 29 (feature_arrangement2 -> export undefine_opt redefine_opt select_opt END .)
    END             reduce using rule 29 (feature_arrangement2 -> export undefine_opt redefine_opt select_opt END .)


state 157

    (160) real_const -> REAL .

    COLON           reduce using rule 160 (real_const -> REAL .)
    FROZEN          reduce using rule 160 (real_const -> REAL .)
    IDENTIFIER      reduce using rule 160 (real_const -> REAL .)
    END             reduce using rule 160 (real_const -> REAL .)


state 158

    (153) manifest_constant -> real_const .

    COLON           reduce using rule 153 (manifest_constant -> real_const .)
    FROZEN          reduce using rule 153 (manifest_constant -> real_const .)
    IDENTIFIER      reduce using rule 153 (manifest_constant -> real_const .)
    END             reduce using rule 153 (manifest_constant -> real_const .)


state 159

    (151) manifest_constant -> CHARACTER .

    COLON           reduce using rule 151 (manifest_constant -> CHARACTER .)
    FROZEN          reduce using rule 151 (manifest_constant -> CHARACTER .)
    IDENTIFIER      reduce using rule 151 (manifest_constant -> CHARACTER .)
    END             reduce using rule 151 (manifest_constant -> CHARACTER .)


state 160

    (150) manifest_constant -> bool_const .

    COLON           reduce using rule 150 (manifest_constant -> bool_const .)
    FROZEN          reduce using rule 150 (manifest_constant -> bool_const .)
    IDENTIFIER      reduce using rule 150 (manifest_constant -> bool_const .)
    END             reduce using rule 150 (manifest_constant -> bool_const .)


state 161

    (91) function -> function_body . END

    END             shift and go to state 184


state 162

    (155) bool_const -> TRUE .

    EQUAL           reduce using rule 155 (bool_const -> TRUE .)
    NOT_EQUAL       reduce using rule 155 (bool_const -> TRUE .)
    GREATER         reduce using rule 155 (bool_const -> TRUE .)
    LESS            reduce using rule 155 (bool_const -> TRUE .)
    LESS_EQUAL      reduce using rule 155 (bool_const -> TRUE .)
    GREATER_EQUAL   reduce using rule 155 (bool_const -> TRUE .)
    PLUS            reduce using rule 155 (bool_const -> TRUE .)
    MINUS           reduce using rule 155 (bool_const -> TRUE .)
    TIMES           reduce using rule 155 (bool_const -> TRUE .)
    DIVIDE          reduce using rule 155 (bool_const -> TRUE .)
    INT_DIVIDE      reduce using rule 155 (bool_const -> TRUE .)
    INT_REMAINDER   reduce using rule 155 (bool_const -> TRUE .)
    AND             reduce using rule 155 (bool_const -> TRUE .)
    OR              reduce using rule 155 (bool_const -> TRUE .)
    XOR             reduce using rule 155 (bool_const -> TRUE .)
    AND_THEN        reduce using rule 155 (bool_const -> TRUE .)
    OR_ELSE         reduce using rule 155 (bool_const -> TRUE .)
    IMPLIES         reduce using rule 155 (bool_const -> TRUE .)
    THEN            reduce using rule 155 (bool_const -> TRUE .)
    COMMA           reduce using rule 155 (bool_const -> TRUE .)
    IF              reduce using rule 155 (bool_const -> TRUE .)
    FROM            reduce using rule 155 (bool_const -> TRUE .)
    IDENTIFIER      reduce using rule 155 (bool_const -> TRUE .)
    RESULT          reduce using rule 155 (bool_const -> TRUE .)
    END             reduce using rule 155 (bool_const -> TRUE .)
    VARIANT         reduce using rule 155 (bool_const -> TRUE .)
    UNTIL           reduce using rule 155 (bool_const -> TRUE .)
    ELSEIF          reduce using rule 155 (bool_const -> TRUE .)
    ELSE            reduce using rule 155 (bool_const -> TRUE .)
    RPAREN          reduce using rule 155 (bool_const -> TRUE .)
    LOOP            reduce using rule 155 (bool_const -> TRUE .)
    COLON           reduce using rule 155 (bool_const -> TRUE .)
    FROZEN          reduce using rule 155 (bool_const -> TRUE .)


state 163

    (158) int_const -> MINUS . INTEGER
    (161) real_const -> MINUS . REAL

    INTEGER         shift and go to state 186
    REAL            shift and go to state 185


state 164

    (93) function_body -> Do . fnbody
    (98) fnbody -> . ins
    (99) fnbody -> . fnbody ins
    (100) ins -> . assignment
    (101) ins -> . conditional
    (102) ins -> . loop
    (103) ins -> . COMMA
    (104) assignment -> . variable ass_op expr
    (108) conditional -> . IF expr THEN fnbody elseif_group else_opt END
    (113) loop -> . FROM fnbody variant UNTIL expr LOOP fnbody END
    (105) variable -> . IDENTIFIER
    (106) variable -> . RESULT

    COMMA           shift and go to state 191
    IF              shift and go to state 197
    FROM            shift and go to state 194
    IDENTIFIER      shift and go to state 195
    RESULT          shift and go to state 187

    assignment                     shift and go to state 188
    conditional                    shift and go to state 189
    ins                            shift and go to state 190
    fnbody                         shift and go to state 192
    variable                       shift and go to state 193
    loop                           shift and go to state 196

state 165

    (88) fvalue -> manifest_constant .

    COLON           reduce using rule 88 (fvalue -> manifest_constant .)
    FROZEN          reduce using rule 88 (fvalue -> manifest_constant .)
    IDENTIFIER      reduce using rule 88 (fvalue -> manifest_constant .)
    END             reduce using rule 88 (fvalue -> manifest_constant .)


state 166

    (159) int_const -> PLUS . INTEGER
    (162) real_const -> PLUS . REAL

    INTEGER         shift and go to state 199
    REAL            shift and go to state 198


state 167

    (157) int_const -> INTEGER .

    COLON           reduce using rule 157 (int_const -> INTEGER .)
    FROZEN          reduce using rule 157 (int_const -> INTEGER .)
    IDENTIFIER      reduce using rule 157 (int_const -> INTEGER .)
    END             reduce using rule 157 (int_const -> INTEGER .)


state 168

    (94) function_body -> ONCE . fnbody
    (98) fnbody -> . ins
    (99) fnbody -> . fnbody ins
    (100) ins -> . assignment
    (101) ins -> . conditional
    (102) ins -> . loop
    (103) ins -> . COMMA
    (104) assignment -> . variable ass_op expr
    (108) conditional -> . IF expr THEN fnbody elseif_group else_opt END
    (113) loop -> . FROM fnbody variant UNTIL expr LOOP fnbody END
    (105) variable -> . IDENTIFIER
    (106) variable -> . RESULT

    COMMA           shift and go to state 191
    IF              shift and go to state 197
    FROM            shift and go to state 194
    IDENTIFIER      shift and go to state 195
    RESULT          shift and go to state 187

    assignment                     shift and go to state 188
    conditional                    shift and go to state 189
    ins                            shift and go to state 190
    fnbody                         shift and go to state 200
    variable                       shift and go to state 193
    loop                           shift and go to state 196

state 169

    (90) fvalue -> function .

    COLON           reduce using rule 90 (fvalue -> function .)
    FROZEN          reduce using rule 90 (fvalue -> function .)
    IDENTIFIER      reduce using rule 90 (fvalue -> function .)
    END             reduce using rule 90 (fvalue -> function .)


state 170

    (154) manifest_constant -> STRING .

    COLON           reduce using rule 154 (manifest_constant -> STRING .)
    FROZEN          reduce using rule 154 (manifest_constant -> STRING .)
    IDENTIFIER      reduce using rule 154 (manifest_constant -> STRING .)
    END             reduce using rule 154 (manifest_constant -> STRING .)


state 171

    (95) function_body -> EXTERNAL . STRING exname

    STRING          shift and go to state 201


state 172

    (89) fvalue -> UNIQUE .

    COLON           reduce using rule 89 (fvalue -> UNIQUE .)
    FROZEN          reduce using rule 89 (fvalue -> UNIQUE .)
    IDENTIFIER      reduce using rule 89 (fvalue -> UNIQUE .)
    END             reduce using rule 89 (fvalue -> UNIQUE .)


state 173

    (152) manifest_constant -> int_const .

    COLON           reduce using rule 152 (manifest_constant -> int_const .)
    FROZEN          reduce using rule 152 (manifest_constant -> int_const .)
    IDENTIFIER      reduce using rule 152 (manifest_constant -> int_const .)
    END             reduce using rule 152 (manifest_constant -> int_const .)


state 174

    (156) bool_const -> FALSE .

    EQUAL           reduce using rule 156 (bool_const -> FALSE .)
    NOT_EQUAL       reduce using rule 156 (bool_const -> FALSE .)
    GREATER         reduce using rule 156 (bool_const -> FALSE .)
    LESS            reduce using rule 156 (bool_const -> FALSE .)
    LESS_EQUAL      reduce using rule 156 (bool_const -> FALSE .)
    GREATER_EQUAL   reduce using rule 156 (bool_const -> FALSE .)
    PLUS            reduce using rule 156 (bool_const -> FALSE .)
    MINUS           reduce using rule 156 (bool_const -> FALSE .)
    TIMES           reduce using rule 156 (bool_const -> FALSE .)
    DIVIDE          reduce using rule 156 (bool_const -> FALSE .)
    INT_DIVIDE      reduce using rule 156 (bool_const -> FALSE .)
    INT_REMAINDER   reduce using rule 156 (bool_const -> FALSE .)
    AND             reduce using rule 156 (bool_const -> FALSE .)
    OR              reduce using rule 156 (bool_const -> FALSE .)
    XOR             reduce using rule 156 (bool_const -> FALSE .)
    AND_THEN        reduce using rule 156 (bool_const -> FALSE .)
    OR_ELSE         reduce using rule 156 (bool_const -> FALSE .)
    IMPLIES         reduce using rule 156 (bool_const -> FALSE .)
    THEN            reduce using rule 156 (bool_const -> FALSE .)
    COMMA           reduce using rule 156 (bool_const -> FALSE .)
    IF              reduce using rule 156 (bool_const -> FALSE .)
    FROM            reduce using rule 156 (bool_const -> FALSE .)
    IDENTIFIER      reduce using rule 156 (bool_const -> FALSE .)
    RESULT          reduce using rule 156 (bool_const -> FALSE .)
    END             reduce using rule 156 (bool_const -> FALSE .)
    VARIANT         reduce using rule 156 (bool_const -> FALSE .)
    UNTIL           reduce using rule 156 (bool_const -> FALSE .)
    ELSEIF          reduce using rule 156 (bool_const -> FALSE .)
    ELSE            reduce using rule 156 (bool_const -> FALSE .)
    RPAREN          reduce using rule 156 (bool_const -> FALSE .)
    LOOP            reduce using rule 156 (bool_const -> FALSE .)
    COLON           reduce using rule 156 (bool_const -> FALSE .)
    FROZEN          reduce using rule 156 (bool_const -> FALSE .)


state 175

    (92) function_body -> DEFERRED .

    END             reduce using rule 92 (function_body -> DEFERRED .)


state 176

    (86) basic_body -> IS fvalue .

    COLON           reduce using rule 86 (basic_body -> IS fvalue .)
    FROZEN          reduce using rule 86 (basic_body -> IS fvalue .)
    IDENTIFIER      reduce using rule 86 (basic_body -> IS fvalue .)
    END             reduce using rule 86 (basic_body -> IS fvalue .)


state 177

    (85) idlist -> idlist COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 202


state 178

    (83) entity_group -> idlist COLON . type
    (164) type -> . class_type
    (165) type -> . EXPANDED class_type
    (166) type -> . LIKE CURRENT
    (167) type -> . LIKE IDENTIFIER
    (168) class_type -> . IDENTIFIER generic

    EXPANDED        shift and go to state 101
    LIKE            shift and go to state 105
    IDENTIFIER      shift and go to state 35

    type                           shift and go to state 203
    class_type                     shift and go to state 100

state 179

    (78) arg_type_opt -> LPAREN entity_list RPAREN . COLON type

    COLON           shift and go to state 204


state 180

    (81) entity_list -> entity_list entity_group .

    RPAREN          reduce using rule 81 (entity_list -> entity_list entity_group .)
    COMMA           reduce using rule 81 (entity_list -> entity_list entity_group .)
    IDENTIFIER      reduce using rule 81 (entity_list -> entity_list entity_group .)


state 181

    (82) entity_list -> entity_list COMMA . entity_group
    (83) entity_group -> . idlist COLON type
    (84) idlist -> . IDENTIFIER
    (85) idlist -> . idlist COMMA IDENTIFIER

    IDENTIFIER      shift and go to state 150

    entity_group                   shift and go to state 205
    idlist                         shift and go to state 151

state 182

    (28) feature_arrangement1 -> rename export_opt undefine_opt redefine_opt select_opt END .

    COLON           reduce using rule 28 (feature_arrangement1 -> rename export_opt undefine_opt redefine_opt select_opt END .)
    IDENTIFIER      reduce using rule 28 (feature_arrangement1 -> rename export_opt undefine_opt redefine_opt select_opt END .)
    CREATE          reduce using rule 28 (feature_arrangement1 -> rename export_opt undefine_opt redefine_opt select_opt END .)
    FEATURE         reduce using rule 28 (feature_arrangement1 -> rename export_opt undefine_opt redefine_opt select_opt END .)
    END             reduce using rule 28 (feature_arrangement1 -> rename export_opt undefine_opt redefine_opt select_opt END .)


state 183

    (35) rname_list -> rname_list COMMA fname ASSIGN fname .

    COMMA           reduce using rule 35 (rname_list -> rname_list COMMA fname ASSIGN fname .)
    EXPORT          reduce using rule 35 (rname_list -> rname_list COMMA fname ASSIGN fname .)
    UNDEFINE        reduce using rule 35 (rname_list -> rname_list COMMA fname ASSIGN fname .)
    REDEFINE        reduce using rule 35 (rname_list -> rname_list COMMA fname ASSIGN fname .)
    SELECT          reduce using rule 35 (rname_list -> rname_list COMMA fname ASSIGN fname .)
    END             reduce using rule 35 (rname_list -> rname_list COMMA fname ASSIGN fname .)


state 184

    (91) function -> function_body END .

    COLON           reduce using rule 91 (function -> function_body END .)
    FROZEN          reduce using rule 91 (function -> function_body END .)
    IDENTIFIER      reduce using rule 91 (function -> function_body END .)
    END             reduce using rule 91 (function -> function_body END .)


state 185

    (161) real_const -> MINUS REAL .

    COLON           reduce using rule 161 (real_const -> MINUS REAL .)
    FROZEN          reduce using rule 161 (real_const -> MINUS REAL .)
    IDENTIFIER      reduce using rule 161 (real_const -> MINUS REAL .)
    END             reduce using rule 161 (real_const -> MINUS REAL .)


state 186

    (158) int_const -> MINUS INTEGER .

    COLON           reduce using rule 158 (int_const -> MINUS INTEGER .)
    FROZEN          reduce using rule 158 (int_const -> MINUS INTEGER .)
    IDENTIFIER      reduce using rule 158 (int_const -> MINUS INTEGER .)
    END             reduce using rule 158 (int_const -> MINUS INTEGER .)


state 187

    (106) variable -> RESULT .

    ASSIGNMENT      reduce using rule 106 (variable -> RESULT .)


state 188

    (100) ins -> assignment .

    VARIANT         reduce using rule 100 (ins -> assignment .)
    COMMA           reduce using rule 100 (ins -> assignment .)
    IF              reduce using rule 100 (ins -> assignment .)
    FROM            reduce using rule 100 (ins -> assignment .)
    IDENTIFIER      reduce using rule 100 (ins -> assignment .)
    RESULT          reduce using rule 100 (ins -> assignment .)
    UNTIL           reduce using rule 100 (ins -> assignment .)
    END             reduce using rule 100 (ins -> assignment .)
    ELSEIF          reduce using rule 100 (ins -> assignment .)
    ELSE            reduce using rule 100 (ins -> assignment .)


state 189

    (101) ins -> conditional .

    VARIANT         reduce using rule 101 (ins -> conditional .)
    COMMA           reduce using rule 101 (ins -> conditional .)
    IF              reduce using rule 101 (ins -> conditional .)
    FROM            reduce using rule 101 (ins -> conditional .)
    IDENTIFIER      reduce using rule 101 (ins -> conditional .)
    RESULT          reduce using rule 101 (ins -> conditional .)
    UNTIL           reduce using rule 101 (ins -> conditional .)
    END             reduce using rule 101 (ins -> conditional .)
    ELSEIF          reduce using rule 101 (ins -> conditional .)
    ELSE            reduce using rule 101 (ins -> conditional .)


state 190

    (98) fnbody -> ins .

    COMMA           reduce using rule 98 (fnbody -> ins .)
    IF              reduce using rule 98 (fnbody -> ins .)
    FROM            reduce using rule 98 (fnbody -> ins .)
    IDENTIFIER      reduce using rule 98 (fnbody -> ins .)
    RESULT          reduce using rule 98 (fnbody -> ins .)
    ELSEIF          reduce using rule 98 (fnbody -> ins .)
    ELSE            reduce using rule 98 (fnbody -> ins .)
    END             reduce using rule 98 (fnbody -> ins .)
    VARIANT         reduce using rule 98 (fnbody -> ins .)
    UNTIL           reduce using rule 98 (fnbody -> ins .)


state 191

    (103) ins -> COMMA .

    VARIANT         reduce using rule 103 (ins -> COMMA .)
    COMMA           reduce using rule 103 (ins -> COMMA .)
    IF              reduce using rule 103 (ins -> COMMA .)
    FROM            reduce using rule 103 (ins -> COMMA .)
    IDENTIFIER      reduce using rule 103 (ins -> COMMA .)
    RESULT          reduce using rule 103 (ins -> COMMA .)
    UNTIL           reduce using rule 103 (ins -> COMMA .)
    END             reduce using rule 103 (ins -> COMMA .)
    ELSEIF          reduce using rule 103 (ins -> COMMA .)
    ELSE            reduce using rule 103 (ins -> COMMA .)


state 192

    (93) function_body -> Do fnbody .
    (99) fnbody -> fnbody . ins
    (100) ins -> . assignment
    (101) ins -> . conditional
    (102) ins -> . loop
    (103) ins -> . COMMA
    (104) assignment -> . variable ass_op expr
    (108) conditional -> . IF expr THEN fnbody elseif_group else_opt END
    (113) loop -> . FROM fnbody variant UNTIL expr LOOP fnbody END
    (105) variable -> . IDENTIFIER
    (106) variable -> . RESULT

    END             reduce using rule 93 (function_body -> Do fnbody .)
    COMMA           shift and go to state 191
    IF              shift and go to state 197
    FROM            shift and go to state 194
    IDENTIFIER      shift and go to state 195
    RESULT          shift and go to state 187

    assignment                     shift and go to state 188
    conditional                    shift and go to state 189
    ins                            shift and go to state 206
    variable                       shift and go to state 193
    loop                           shift and go to state 196

state 193

    (104) assignment -> variable . ass_op expr
    (107) ass_op -> . ASSIGNMENT

    ASSIGNMENT      shift and go to state 208

    ass_op                         shift and go to state 207

state 194

    (113) loop -> FROM . fnbody variant UNTIL expr LOOP fnbody END
    (98) fnbody -> . ins
    (99) fnbody -> . fnbody ins
    (100) ins -> . assignment
    (101) ins -> . conditional
    (102) ins -> . loop
    (103) ins -> . COMMA
    (104) assignment -> . variable ass_op expr
    (108) conditional -> . IF expr THEN fnbody elseif_group else_opt END
    (113) loop -> . FROM fnbody variant UNTIL expr LOOP fnbody END
    (105) variable -> . IDENTIFIER
    (106) variable -> . RESULT

    COMMA           shift and go to state 191
    IF              shift and go to state 197
    FROM            shift and go to state 194
    IDENTIFIER      shift and go to state 195
    RESULT          shift and go to state 187

    conditional                    shift and go to state 189
    ins                            shift and go to state 190
    fnbody                         shift and go to state 209
    assignment                     shift and go to state 188
    variable                       shift and go to state 193
    loop                           shift and go to state 196

state 195

    (105) variable -> IDENTIFIER .

    ASSIGNMENT      reduce using rule 105 (variable -> IDENTIFIER .)


state 196

    (102) ins -> loop .

    VARIANT         reduce using rule 102 (ins -> loop .)
    COMMA           reduce using rule 102 (ins -> loop .)
    IF              reduce using rule 102 (ins -> loop .)
    FROM            reduce using rule 102 (ins -> loop .)
    IDENTIFIER      reduce using rule 102 (ins -> loop .)
    RESULT          reduce using rule 102 (ins -> loop .)
    UNTIL           reduce using rule 102 (ins -> loop .)
    END             reduce using rule 102 (ins -> loop .)
    ELSEIF          reduce using rule 102 (ins -> loop .)
    ELSE            reduce using rule 102 (ins -> loop .)


state 197

    (108) conditional -> IF . expr THEN fnbody elseif_group else_opt END
    (118) expr -> . expr EQUAL expr
    (119) expr -> . expr NOT_EQUAL expr
    (120) expr -> . expr GREATER expr
    (121) expr -> . expr LESS expr
    (122) expr -> . expr LESS_EQUAL expr
    (123) expr -> . expr GREATER_EQUAL expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr MINUS expr
    (126) expr -> . expr TIMES expr
    (127) expr -> . expr DIVIDE expr
    (128) expr -> . expr INT_DIVIDE expr
    (129) expr -> . expr INT_REMAINDER expr
    (130) expr -> . expr AND expr
    (131) expr -> . expr OR expr
    (132) expr -> . expr XOR expr
    (133) expr -> . expr AND_THEN expr
    (134) expr -> . expr OR_ELSE expr
    (135) expr -> . expr IMPLIES expr
    (136) expr -> . RESULT
    (137) expr -> . CURRENT
    (138) expr -> . LPAREN expr RPAREN
    (139) expr -> . bool_const
    (140) expr -> . CHARACTER
    (141) expr -> . INTEGER
    (142) expr -> . REAL
    (143) expr -> . STRING
    (155) bool_const -> . TRUE
    (156) bool_const -> . FALSE

    RESULT          shift and go to state 216
    CURRENT         shift and go to state 215
    LPAREN          shift and go to state 217
    CHARACTER       shift and go to state 211
    INTEGER         shift and go to state 214
    REAL            shift and go to state 210
    STRING          shift and go to state 213
    TRUE            shift and go to state 162
    FALSE           shift and go to state 174

    expr                           shift and go to state 218
    bool_const                     shift and go to state 212

state 198

    (162) real_const -> PLUS REAL .

    COLON           reduce using rule 162 (real_const -> PLUS REAL .)
    FROZEN          reduce using rule 162 (real_const -> PLUS REAL .)
    IDENTIFIER      reduce using rule 162 (real_const -> PLUS REAL .)
    END             reduce using rule 162 (real_const -> PLUS REAL .)


state 199

    (159) int_const -> PLUS INTEGER .

    COLON           reduce using rule 159 (int_const -> PLUS INTEGER .)
    FROZEN          reduce using rule 159 (int_const -> PLUS INTEGER .)
    IDENTIFIER      reduce using rule 159 (int_const -> PLUS INTEGER .)
    END             reduce using rule 159 (int_const -> PLUS INTEGER .)


state 200

    (94) function_body -> ONCE fnbody .
    (99) fnbody -> fnbody . ins
    (100) ins -> . assignment
    (101) ins -> . conditional
    (102) ins -> . loop
    (103) ins -> . COMMA
    (104) assignment -> . variable ass_op expr
    (108) conditional -> . IF expr THEN fnbody elseif_group else_opt END
    (113) loop -> . FROM fnbody variant UNTIL expr LOOP fnbody END
    (105) variable -> . IDENTIFIER
    (106) variable -> . RESULT

    END             reduce using rule 94 (function_body -> ONCE fnbody .)
    COMMA           shift and go to state 191
    IF              shift and go to state 197
    FROM            shift and go to state 194
    IDENTIFIER      shift and go to state 195
    RESULT          shift and go to state 187

    assignment                     shift and go to state 188
    conditional                    shift and go to state 189
    ins                            shift and go to state 206
    variable                       shift and go to state 193
    loop                           shift and go to state 196

state 201

    (95) function_body -> EXTERNAL STRING . exname
    (96) exname -> . ALIAS STRING
    (97) exname -> . empty
    (174) empty -> .

    ALIAS           shift and go to state 219
    END             reduce using rule 174 (empty -> .)

    exname                         shift and go to state 220
    empty                          shift and go to state 221

state 202

    (85) idlist -> idlist COMMA IDENTIFIER .

    COLON           reduce using rule 85 (idlist -> idlist COMMA IDENTIFIER .)
    COMMA           reduce using rule 85 (idlist -> idlist COMMA IDENTIFIER .)


state 203

    (83) entity_group -> idlist COLON type .

    RPAREN          reduce using rule 83 (entity_group -> idlist COLON type .)
    COMMA           reduce using rule 83 (entity_group -> idlist COLON type .)
    IDENTIFIER      reduce using rule 83 (entity_group -> idlist COLON type .)


state 204

    (78) arg_type_opt -> LPAREN entity_list RPAREN COLON . type
    (164) type -> . class_type
    (165) type -> . EXPANDED class_type
    (166) type -> . LIKE CURRENT
    (167) type -> . LIKE IDENTIFIER
    (168) class_type -> . IDENTIFIER generic

    EXPANDED        shift and go to state 101
    LIKE            shift and go to state 105
    IDENTIFIER      shift and go to state 35

    type                           shift and go to state 222
    class_type                     shift and go to state 100

state 205

    (82) entity_list -> entity_list COMMA entity_group .

    RPAREN          reduce using rule 82 (entity_list -> entity_list COMMA entity_group .)
    COMMA           reduce using rule 82 (entity_list -> entity_list COMMA entity_group .)
    IDENTIFIER      reduce using rule 82 (entity_list -> entity_list COMMA entity_group .)


state 206

    (99) fnbody -> fnbody ins .

    COMMA           reduce using rule 99 (fnbody -> fnbody ins .)
    IF              reduce using rule 99 (fnbody -> fnbody ins .)
    FROM            reduce using rule 99 (fnbody -> fnbody ins .)
    IDENTIFIER      reduce using rule 99 (fnbody -> fnbody ins .)
    RESULT          reduce using rule 99 (fnbody -> fnbody ins .)
    ELSEIF          reduce using rule 99 (fnbody -> fnbody ins .)
    ELSE            reduce using rule 99 (fnbody -> fnbody ins .)
    END             reduce using rule 99 (fnbody -> fnbody ins .)
    VARIANT         reduce using rule 99 (fnbody -> fnbody ins .)
    UNTIL           reduce using rule 99 (fnbody -> fnbody ins .)


state 207

    (104) assignment -> variable ass_op . expr
    (118) expr -> . expr EQUAL expr
    (119) expr -> . expr NOT_EQUAL expr
    (120) expr -> . expr GREATER expr
    (121) expr -> . expr LESS expr
    (122) expr -> . expr LESS_EQUAL expr
    (123) expr -> . expr GREATER_EQUAL expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr MINUS expr
    (126) expr -> . expr TIMES expr
    (127) expr -> . expr DIVIDE expr
    (128) expr -> . expr INT_DIVIDE expr
    (129) expr -> . expr INT_REMAINDER expr
    (130) expr -> . expr AND expr
    (131) expr -> . expr OR expr
    (132) expr -> . expr XOR expr
    (133) expr -> . expr AND_THEN expr
    (134) expr -> . expr OR_ELSE expr
    (135) expr -> . expr IMPLIES expr
    (136) expr -> . RESULT
    (137) expr -> . CURRENT
    (138) expr -> . LPAREN expr RPAREN
    (139) expr -> . bool_const
    (140) expr -> . CHARACTER
    (141) expr -> . INTEGER
    (142) expr -> . REAL
    (143) expr -> . STRING
    (155) bool_const -> . TRUE
    (156) bool_const -> . FALSE

    RESULT          shift and go to state 216
    CURRENT         shift and go to state 215
    LPAREN          shift and go to state 217
    CHARACTER       shift and go to state 211
    INTEGER         shift and go to state 214
    REAL            shift and go to state 210
    STRING          shift and go to state 213
    TRUE            shift and go to state 162
    FALSE           shift and go to state 174

    bool_const                     shift and go to state 212
    expr                           shift and go to state 223

state 208

    (107) ass_op -> ASSIGNMENT .

    RESULT          reduce using rule 107 (ass_op -> ASSIGNMENT .)
    CURRENT         reduce using rule 107 (ass_op -> ASSIGNMENT .)
    LPAREN          reduce using rule 107 (ass_op -> ASSIGNMENT .)
    CHARACTER       reduce using rule 107 (ass_op -> ASSIGNMENT .)
    INTEGER         reduce using rule 107 (ass_op -> ASSIGNMENT .)
    REAL            reduce using rule 107 (ass_op -> ASSIGNMENT .)
    STRING          reduce using rule 107 (ass_op -> ASSIGNMENT .)
    TRUE            reduce using rule 107 (ass_op -> ASSIGNMENT .)
    FALSE           reduce using rule 107 (ass_op -> ASSIGNMENT .)


state 209

    (113) loop -> FROM fnbody . variant UNTIL expr LOOP fnbody END
    (99) fnbody -> fnbody . ins
    (114) variant -> . VARIANT
    (115) variant -> . VARIANT expr
    (116) variant -> . VARIANT IDENTIFIER COLON expr
    (117) variant -> . empty
    (100) ins -> . assignment
    (101) ins -> . conditional
    (102) ins -> . loop
    (103) ins -> . COMMA
    (174) empty -> .
    (104) assignment -> . variable ass_op expr
    (108) conditional -> . IF expr THEN fnbody elseif_group else_opt END
    (113) loop -> . FROM fnbody variant UNTIL expr LOOP fnbody END
    (105) variable -> . IDENTIFIER
    (106) variable -> . RESULT

    VARIANT         shift and go to state 224
    COMMA           shift and go to state 191
    UNTIL           reduce using rule 174 (empty -> .)
    IF              shift and go to state 197
    FROM            shift and go to state 194
    IDENTIFIER      shift and go to state 195
    RESULT          shift and go to state 187

    conditional                    shift and go to state 189
    variant                        shift and go to state 226
    ins                            shift and go to state 206
    loop                           shift and go to state 196
    assignment                     shift and go to state 188
    variable                       shift and go to state 193
    empty                          shift and go to state 225

state 210

    (142) expr -> REAL .

    LOOP            reduce using rule 142 (expr -> REAL .)
    EQUAL           reduce using rule 142 (expr -> REAL .)
    NOT_EQUAL       reduce using rule 142 (expr -> REAL .)
    GREATER         reduce using rule 142 (expr -> REAL .)
    LESS            reduce using rule 142 (expr -> REAL .)
    LESS_EQUAL      reduce using rule 142 (expr -> REAL .)
    GREATER_EQUAL   reduce using rule 142 (expr -> REAL .)
    PLUS            reduce using rule 142 (expr -> REAL .)
    MINUS           reduce using rule 142 (expr -> REAL .)
    TIMES           reduce using rule 142 (expr -> REAL .)
    DIVIDE          reduce using rule 142 (expr -> REAL .)
    INT_DIVIDE      reduce using rule 142 (expr -> REAL .)
    INT_REMAINDER   reduce using rule 142 (expr -> REAL .)
    AND             reduce using rule 142 (expr -> REAL .)
    OR              reduce using rule 142 (expr -> REAL .)
    XOR             reduce using rule 142 (expr -> REAL .)
    AND_THEN        reduce using rule 142 (expr -> REAL .)
    OR_ELSE         reduce using rule 142 (expr -> REAL .)
    IMPLIES         reduce using rule 142 (expr -> REAL .)
    THEN            reduce using rule 142 (expr -> REAL .)
    COMMA           reduce using rule 142 (expr -> REAL .)
    IF              reduce using rule 142 (expr -> REAL .)
    FROM            reduce using rule 142 (expr -> REAL .)
    IDENTIFIER      reduce using rule 142 (expr -> REAL .)
    RESULT          reduce using rule 142 (expr -> REAL .)
    END             reduce using rule 142 (expr -> REAL .)
    VARIANT         reduce using rule 142 (expr -> REAL .)
    UNTIL           reduce using rule 142 (expr -> REAL .)
    ELSEIF          reduce using rule 142 (expr -> REAL .)
    ELSE            reduce using rule 142 (expr -> REAL .)
    RPAREN          reduce using rule 142 (expr -> REAL .)


state 211

    (140) expr -> CHARACTER .

    LOOP            reduce using rule 140 (expr -> CHARACTER .)
    EQUAL           reduce using rule 140 (expr -> CHARACTER .)
    NOT_EQUAL       reduce using rule 140 (expr -> CHARACTER .)
    GREATER         reduce using rule 140 (expr -> CHARACTER .)
    LESS            reduce using rule 140 (expr -> CHARACTER .)
    LESS_EQUAL      reduce using rule 140 (expr -> CHARACTER .)
    GREATER_EQUAL   reduce using rule 140 (expr -> CHARACTER .)
    PLUS            reduce using rule 140 (expr -> CHARACTER .)
    MINUS           reduce using rule 140 (expr -> CHARACTER .)
    TIMES           reduce using rule 140 (expr -> CHARACTER .)
    DIVIDE          reduce using rule 140 (expr -> CHARACTER .)
    INT_DIVIDE      reduce using rule 140 (expr -> CHARACTER .)
    INT_REMAINDER   reduce using rule 140 (expr -> CHARACTER .)
    AND             reduce using rule 140 (expr -> CHARACTER .)
    OR              reduce using rule 140 (expr -> CHARACTER .)
    XOR             reduce using rule 140 (expr -> CHARACTER .)
    AND_THEN        reduce using rule 140 (expr -> CHARACTER .)
    OR_ELSE         reduce using rule 140 (expr -> CHARACTER .)
    IMPLIES         reduce using rule 140 (expr -> CHARACTER .)
    THEN            reduce using rule 140 (expr -> CHARACTER .)
    COMMA           reduce using rule 140 (expr -> CHARACTER .)
    IF              reduce using rule 140 (expr -> CHARACTER .)
    FROM            reduce using rule 140 (expr -> CHARACTER .)
    IDENTIFIER      reduce using rule 140 (expr -> CHARACTER .)
    RESULT          reduce using rule 140 (expr -> CHARACTER .)
    END             reduce using rule 140 (expr -> CHARACTER .)
    VARIANT         reduce using rule 140 (expr -> CHARACTER .)
    UNTIL           reduce using rule 140 (expr -> CHARACTER .)
    ELSEIF          reduce using rule 140 (expr -> CHARACTER .)
    ELSE            reduce using rule 140 (expr -> CHARACTER .)
    RPAREN          reduce using rule 140 (expr -> CHARACTER .)


state 212

    (139) expr -> bool_const .

    LOOP            reduce using rule 139 (expr -> bool_const .)
    EQUAL           reduce using rule 139 (expr -> bool_const .)
    NOT_EQUAL       reduce using rule 139 (expr -> bool_const .)
    GREATER         reduce using rule 139 (expr -> bool_const .)
    LESS            reduce using rule 139 (expr -> bool_const .)
    LESS_EQUAL      reduce using rule 139 (expr -> bool_const .)
    GREATER_EQUAL   reduce using rule 139 (expr -> bool_const .)
    PLUS            reduce using rule 139 (expr -> bool_const .)
    MINUS           reduce using rule 139 (expr -> bool_const .)
    TIMES           reduce using rule 139 (expr -> bool_const .)
    DIVIDE          reduce using rule 139 (expr -> bool_const .)
    INT_DIVIDE      reduce using rule 139 (expr -> bool_const .)
    INT_REMAINDER   reduce using rule 139 (expr -> bool_const .)
    AND             reduce using rule 139 (expr -> bool_const .)
    OR              reduce using rule 139 (expr -> bool_const .)
    XOR             reduce using rule 139 (expr -> bool_const .)
    AND_THEN        reduce using rule 139 (expr -> bool_const .)
    OR_ELSE         reduce using rule 139 (expr -> bool_const .)
    IMPLIES         reduce using rule 139 (expr -> bool_const .)
    THEN            reduce using rule 139 (expr -> bool_const .)
    COMMA           reduce using rule 139 (expr -> bool_const .)
    IF              reduce using rule 139 (expr -> bool_const .)
    FROM            reduce using rule 139 (expr -> bool_const .)
    IDENTIFIER      reduce using rule 139 (expr -> bool_const .)
    RESULT          reduce using rule 139 (expr -> bool_const .)
    END             reduce using rule 139 (expr -> bool_const .)
    VARIANT         reduce using rule 139 (expr -> bool_const .)
    UNTIL           reduce using rule 139 (expr -> bool_const .)
    ELSEIF          reduce using rule 139 (expr -> bool_const .)
    ELSE            reduce using rule 139 (expr -> bool_const .)
    RPAREN          reduce using rule 139 (expr -> bool_const .)


state 213

    (143) expr -> STRING .

    LOOP            reduce using rule 143 (expr -> STRING .)
    EQUAL           reduce using rule 143 (expr -> STRING .)
    NOT_EQUAL       reduce using rule 143 (expr -> STRING .)
    GREATER         reduce using rule 143 (expr -> STRING .)
    LESS            reduce using rule 143 (expr -> STRING .)
    LESS_EQUAL      reduce using rule 143 (expr -> STRING .)
    GREATER_EQUAL   reduce using rule 143 (expr -> STRING .)
    PLUS            reduce using rule 143 (expr -> STRING .)
    MINUS           reduce using rule 143 (expr -> STRING .)
    TIMES           reduce using rule 143 (expr -> STRING .)
    DIVIDE          reduce using rule 143 (expr -> STRING .)
    INT_DIVIDE      reduce using rule 143 (expr -> STRING .)
    INT_REMAINDER   reduce using rule 143 (expr -> STRING .)
    AND             reduce using rule 143 (expr -> STRING .)
    OR              reduce using rule 143 (expr -> STRING .)
    XOR             reduce using rule 143 (expr -> STRING .)
    AND_THEN        reduce using rule 143 (expr -> STRING .)
    OR_ELSE         reduce using rule 143 (expr -> STRING .)
    IMPLIES         reduce using rule 143 (expr -> STRING .)
    THEN            reduce using rule 143 (expr -> STRING .)
    COMMA           reduce using rule 143 (expr -> STRING .)
    IF              reduce using rule 143 (expr -> STRING .)
    FROM            reduce using rule 143 (expr -> STRING .)
    IDENTIFIER      reduce using rule 143 (expr -> STRING .)
    RESULT          reduce using rule 143 (expr -> STRING .)
    END             reduce using rule 143 (expr -> STRING .)
    VARIANT         reduce using rule 143 (expr -> STRING .)
    UNTIL           reduce using rule 143 (expr -> STRING .)
    ELSEIF          reduce using rule 143 (expr -> STRING .)
    ELSE            reduce using rule 143 (expr -> STRING .)
    RPAREN          reduce using rule 143 (expr -> STRING .)


state 214

    (141) expr -> INTEGER .

    LOOP            reduce using rule 141 (expr -> INTEGER .)
    EQUAL           reduce using rule 141 (expr -> INTEGER .)
    NOT_EQUAL       reduce using rule 141 (expr -> INTEGER .)
    GREATER         reduce using rule 141 (expr -> INTEGER .)
    LESS            reduce using rule 141 (expr -> INTEGER .)
    LESS_EQUAL      reduce using rule 141 (expr -> INTEGER .)
    GREATER_EQUAL   reduce using rule 141 (expr -> INTEGER .)
    PLUS            reduce using rule 141 (expr -> INTEGER .)
    MINUS           reduce using rule 141 (expr -> INTEGER .)
    TIMES           reduce using rule 141 (expr -> INTEGER .)
    DIVIDE          reduce using rule 141 (expr -> INTEGER .)
    INT_DIVIDE      reduce using rule 141 (expr -> INTEGER .)
    INT_REMAINDER   reduce using rule 141 (expr -> INTEGER .)
    AND             reduce using rule 141 (expr -> INTEGER .)
    OR              reduce using rule 141 (expr -> INTEGER .)
    XOR             reduce using rule 141 (expr -> INTEGER .)
    AND_THEN        reduce using rule 141 (expr -> INTEGER .)
    OR_ELSE         reduce using rule 141 (expr -> INTEGER .)
    IMPLIES         reduce using rule 141 (expr -> INTEGER .)
    THEN            reduce using rule 141 (expr -> INTEGER .)
    COMMA           reduce using rule 141 (expr -> INTEGER .)
    IF              reduce using rule 141 (expr -> INTEGER .)
    FROM            reduce using rule 141 (expr -> INTEGER .)
    IDENTIFIER      reduce using rule 141 (expr -> INTEGER .)
    RESULT          reduce using rule 141 (expr -> INTEGER .)
    END             reduce using rule 141 (expr -> INTEGER .)
    VARIANT         reduce using rule 141 (expr -> INTEGER .)
    UNTIL           reduce using rule 141 (expr -> INTEGER .)
    ELSEIF          reduce using rule 141 (expr -> INTEGER .)
    ELSE            reduce using rule 141 (expr -> INTEGER .)
    RPAREN          reduce using rule 141 (expr -> INTEGER .)


state 215

    (137) expr -> CURRENT .

    LOOP            reduce using rule 137 (expr -> CURRENT .)
    EQUAL           reduce using rule 137 (expr -> CURRENT .)
    NOT_EQUAL       reduce using rule 137 (expr -> CURRENT .)
    GREATER         reduce using rule 137 (expr -> CURRENT .)
    LESS            reduce using rule 137 (expr -> CURRENT .)
    LESS_EQUAL      reduce using rule 137 (expr -> CURRENT .)
    GREATER_EQUAL   reduce using rule 137 (expr -> CURRENT .)
    PLUS            reduce using rule 137 (expr -> CURRENT .)
    MINUS           reduce using rule 137 (expr -> CURRENT .)
    TIMES           reduce using rule 137 (expr -> CURRENT .)
    DIVIDE          reduce using rule 137 (expr -> CURRENT .)
    INT_DIVIDE      reduce using rule 137 (expr -> CURRENT .)
    INT_REMAINDER   reduce using rule 137 (expr -> CURRENT .)
    AND             reduce using rule 137 (expr -> CURRENT .)
    OR              reduce using rule 137 (expr -> CURRENT .)
    XOR             reduce using rule 137 (expr -> CURRENT .)
    AND_THEN        reduce using rule 137 (expr -> CURRENT .)
    OR_ELSE         reduce using rule 137 (expr -> CURRENT .)
    IMPLIES         reduce using rule 137 (expr -> CURRENT .)
    THEN            reduce using rule 137 (expr -> CURRENT .)
    COMMA           reduce using rule 137 (expr -> CURRENT .)
    IF              reduce using rule 137 (expr -> CURRENT .)
    FROM            reduce using rule 137 (expr -> CURRENT .)
    IDENTIFIER      reduce using rule 137 (expr -> CURRENT .)
    RESULT          reduce using rule 137 (expr -> CURRENT .)
    END             reduce using rule 137 (expr -> CURRENT .)
    VARIANT         reduce using rule 137 (expr -> CURRENT .)
    UNTIL           reduce using rule 137 (expr -> CURRENT .)
    ELSEIF          reduce using rule 137 (expr -> CURRENT .)
    ELSE            reduce using rule 137 (expr -> CURRENT .)
    RPAREN          reduce using rule 137 (expr -> CURRENT .)


state 216

    (136) expr -> RESULT .

    LOOP            reduce using rule 136 (expr -> RESULT .)
    EQUAL           reduce using rule 136 (expr -> RESULT .)
    NOT_EQUAL       reduce using rule 136 (expr -> RESULT .)
    GREATER         reduce using rule 136 (expr -> RESULT .)
    LESS            reduce using rule 136 (expr -> RESULT .)
    LESS_EQUAL      reduce using rule 136 (expr -> RESULT .)
    GREATER_EQUAL   reduce using rule 136 (expr -> RESULT .)
    PLUS            reduce using rule 136 (expr -> RESULT .)
    MINUS           reduce using rule 136 (expr -> RESULT .)
    TIMES           reduce using rule 136 (expr -> RESULT .)
    DIVIDE          reduce using rule 136 (expr -> RESULT .)
    INT_DIVIDE      reduce using rule 136 (expr -> RESULT .)
    INT_REMAINDER   reduce using rule 136 (expr -> RESULT .)
    AND             reduce using rule 136 (expr -> RESULT .)
    OR              reduce using rule 136 (expr -> RESULT .)
    XOR             reduce using rule 136 (expr -> RESULT .)
    AND_THEN        reduce using rule 136 (expr -> RESULT .)
    OR_ELSE         reduce using rule 136 (expr -> RESULT .)
    IMPLIES         reduce using rule 136 (expr -> RESULT .)
    THEN            reduce using rule 136 (expr -> RESULT .)
    COMMA           reduce using rule 136 (expr -> RESULT .)
    IF              reduce using rule 136 (expr -> RESULT .)
    FROM            reduce using rule 136 (expr -> RESULT .)
    IDENTIFIER      reduce using rule 136 (expr -> RESULT .)
    RESULT          reduce using rule 136 (expr -> RESULT .)
    END             reduce using rule 136 (expr -> RESULT .)
    VARIANT         reduce using rule 136 (expr -> RESULT .)
    UNTIL           reduce using rule 136 (expr -> RESULT .)
    ELSEIF          reduce using rule 136 (expr -> RESULT .)
    ELSE            reduce using rule 136 (expr -> RESULT .)
    RPAREN          reduce using rule 136 (expr -> RESULT .)


state 217

    (138) expr -> LPAREN . expr RPAREN
    (118) expr -> . expr EQUAL expr
    (119) expr -> . expr NOT_EQUAL expr
    (120) expr -> . expr GREATER expr
    (121) expr -> . expr LESS expr
    (122) expr -> . expr LESS_EQUAL expr
    (123) expr -> . expr GREATER_EQUAL expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr MINUS expr
    (126) expr -> . expr TIMES expr
    (127) expr -> . expr DIVIDE expr
    (128) expr -> . expr INT_DIVIDE expr
    (129) expr -> . expr INT_REMAINDER expr
    (130) expr -> . expr AND expr
    (131) expr -> . expr OR expr
    (132) expr -> . expr XOR expr
    (133) expr -> . expr AND_THEN expr
    (134) expr -> . expr OR_ELSE expr
    (135) expr -> . expr IMPLIES expr
    (136) expr -> . RESULT
    (137) expr -> . CURRENT
    (138) expr -> . LPAREN expr RPAREN
    (139) expr -> . bool_const
    (140) expr -> . CHARACTER
    (141) expr -> . INTEGER
    (142) expr -> . REAL
    (143) expr -> . STRING
    (155) bool_const -> . TRUE
    (156) bool_const -> . FALSE

    RESULT          shift and go to state 216
    CURRENT         shift and go to state 215
    LPAREN          shift and go to state 217
    CHARACTER       shift and go to state 211
    INTEGER         shift and go to state 214
    REAL            shift and go to state 210
    STRING          shift and go to state 213
    TRUE            shift and go to state 162
    FALSE           shift and go to state 174

    expr                           shift and go to state 227
    bool_const                     shift and go to state 212

state 218

    (108) conditional -> IF expr . THEN fnbody elseif_group else_opt END
    (118) expr -> expr . EQUAL expr
    (119) expr -> expr . NOT_EQUAL expr
    (120) expr -> expr . GREATER expr
    (121) expr -> expr . LESS expr
    (122) expr -> expr . LESS_EQUAL expr
    (123) expr -> expr . GREATER_EQUAL expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . MINUS expr
    (126) expr -> expr . TIMES expr
    (127) expr -> expr . DIVIDE expr
    (128) expr -> expr . INT_DIVIDE expr
    (129) expr -> expr . INT_REMAINDER expr
    (130) expr -> expr . AND expr
    (131) expr -> expr . OR expr
    (132) expr -> expr . XOR expr
    (133) expr -> expr . AND_THEN expr
    (134) expr -> expr . OR_ELSE expr
    (135) expr -> expr . IMPLIES expr

    THEN            shift and go to state 228
    EQUAL           shift and go to state 230
    NOT_EQUAL       shift and go to state 233
    GREATER         shift and go to state 243
    LESS            shift and go to state 229
    LESS_EQUAL      shift and go to state 241
    GREATER_EQUAL   shift and go to state 234
    PLUS            shift and go to state 236
    MINUS           shift and go to state 232
    TIMES           shift and go to state 239
    DIVIDE          shift and go to state 238
    INT_DIVIDE      shift and go to state 240
    INT_REMAINDER   shift and go to state 246
    AND             shift and go to state 242
    OR              shift and go to state 245
    XOR             shift and go to state 231
    AND_THEN        shift and go to state 237
    OR_ELSE         shift and go to state 235
    IMPLIES         shift and go to state 244


state 219

    (96) exname -> ALIAS . STRING

    STRING          shift and go to state 247


state 220

    (95) function_body -> EXTERNAL STRING exname .

    END             reduce using rule 95 (function_body -> EXTERNAL STRING exname .)


state 221

    (97) exname -> empty .

    END             reduce using rule 97 (exname -> empty .)


state 222

    (78) arg_type_opt -> LPAREN entity_list RPAREN COLON type .

    IS              reduce using rule 78 (arg_type_opt -> LPAREN entity_list RPAREN COLON type .)
    COLON           reduce using rule 78 (arg_type_opt -> LPAREN entity_list RPAREN COLON type .)
    FROZEN          reduce using rule 78 (arg_type_opt -> LPAREN entity_list RPAREN COLON type .)
    IDENTIFIER      reduce using rule 78 (arg_type_opt -> LPAREN entity_list RPAREN COLON type .)
    END             reduce using rule 78 (arg_type_opt -> LPAREN entity_list RPAREN COLON type .)


state 223

    (104) assignment -> variable ass_op expr .
    (118) expr -> expr . EQUAL expr
    (119) expr -> expr . NOT_EQUAL expr
    (120) expr -> expr . GREATER expr
    (121) expr -> expr . LESS expr
    (122) expr -> expr . LESS_EQUAL expr
    (123) expr -> expr . GREATER_EQUAL expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . MINUS expr
    (126) expr -> expr . TIMES expr
    (127) expr -> expr . DIVIDE expr
    (128) expr -> expr . INT_DIVIDE expr
    (129) expr -> expr . INT_REMAINDER expr
    (130) expr -> expr . AND expr
    (131) expr -> expr . OR expr
    (132) expr -> expr . XOR expr
    (133) expr -> expr . AND_THEN expr
    (134) expr -> expr . OR_ELSE expr
    (135) expr -> expr . IMPLIES expr

    COMMA           reduce using rule 104 (assignment -> variable ass_op expr .)
    IF              reduce using rule 104 (assignment -> variable ass_op expr .)
    FROM            reduce using rule 104 (assignment -> variable ass_op expr .)
    IDENTIFIER      reduce using rule 104 (assignment -> variable ass_op expr .)
    RESULT          reduce using rule 104 (assignment -> variable ass_op expr .)
    END             reduce using rule 104 (assignment -> variable ass_op expr .)
    VARIANT         reduce using rule 104 (assignment -> variable ass_op expr .)
    UNTIL           reduce using rule 104 (assignment -> variable ass_op expr .)
    ELSEIF          reduce using rule 104 (assignment -> variable ass_op expr .)
    ELSE            reduce using rule 104 (assignment -> variable ass_op expr .)
    EQUAL           shift and go to state 230
    NOT_EQUAL       shift and go to state 233
    GREATER         shift and go to state 243
    LESS            shift and go to state 229
    LESS_EQUAL      shift and go to state 241
    GREATER_EQUAL   shift and go to state 234
    PLUS            shift and go to state 236
    MINUS           shift and go to state 232
    TIMES           shift and go to state 239
    DIVIDE          shift and go to state 238
    INT_DIVIDE      shift and go to state 240
    INT_REMAINDER   shift and go to state 246
    AND             shift and go to state 242
    OR              shift and go to state 245
    XOR             shift and go to state 231
    AND_THEN        shift and go to state 237
    OR_ELSE         shift and go to state 235
    IMPLIES         shift and go to state 244


state 224

    (114) variant -> VARIANT .
    (115) variant -> VARIANT . expr
    (116) variant -> VARIANT . IDENTIFIER COLON expr
    (118) expr -> . expr EQUAL expr
    (119) expr -> . expr NOT_EQUAL expr
    (120) expr -> . expr GREATER expr
    (121) expr -> . expr LESS expr
    (122) expr -> . expr LESS_EQUAL expr
    (123) expr -> . expr GREATER_EQUAL expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr MINUS expr
    (126) expr -> . expr TIMES expr
    (127) expr -> . expr DIVIDE expr
    (128) expr -> . expr INT_DIVIDE expr
    (129) expr -> . expr INT_REMAINDER expr
    (130) expr -> . expr AND expr
    (131) expr -> . expr OR expr
    (132) expr -> . expr XOR expr
    (133) expr -> . expr AND_THEN expr
    (134) expr -> . expr OR_ELSE expr
    (135) expr -> . expr IMPLIES expr
    (136) expr -> . RESULT
    (137) expr -> . CURRENT
    (138) expr -> . LPAREN expr RPAREN
    (139) expr -> . bool_const
    (140) expr -> . CHARACTER
    (141) expr -> . INTEGER
    (142) expr -> . REAL
    (143) expr -> . STRING
    (155) bool_const -> . TRUE
    (156) bool_const -> . FALSE

    UNTIL           reduce using rule 114 (variant -> VARIANT .)
    IDENTIFIER      shift and go to state 248
    RESULT          shift and go to state 216
    CURRENT         shift and go to state 215
    LPAREN          shift and go to state 217
    CHARACTER       shift and go to state 211
    INTEGER         shift and go to state 214
    REAL            shift and go to state 210
    STRING          shift and go to state 213
    TRUE            shift and go to state 162
    FALSE           shift and go to state 174

    expr                           shift and go to state 249
    bool_const                     shift and go to state 212

state 225

    (117) variant -> empty .

    UNTIL           reduce using rule 117 (variant -> empty .)


state 226

    (113) loop -> FROM fnbody variant . UNTIL expr LOOP fnbody END

    UNTIL           shift and go to state 250


state 227

    (138) expr -> LPAREN expr . RPAREN
    (118) expr -> expr . EQUAL expr
    (119) expr -> expr . NOT_EQUAL expr
    (120) expr -> expr . GREATER expr
    (121) expr -> expr . LESS expr
    (122) expr -> expr . LESS_EQUAL expr
    (123) expr -> expr . GREATER_EQUAL expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . MINUS expr
    (126) expr -> expr . TIMES expr
    (127) expr -> expr . DIVIDE expr
    (128) expr -> expr . INT_DIVIDE expr
    (129) expr -> expr . INT_REMAINDER expr
    (130) expr -> expr . AND expr
    (131) expr -> expr . OR expr
    (132) expr -> expr . XOR expr
    (133) expr -> expr . AND_THEN expr
    (134) expr -> expr . OR_ELSE expr
    (135) expr -> expr . IMPLIES expr

    RPAREN          shift and go to state 251
    EQUAL           shift and go to state 230
    NOT_EQUAL       shift and go to state 233
    GREATER         shift and go to state 243
    LESS            shift and go to state 229
    LESS_EQUAL      shift and go to state 241
    GREATER_EQUAL   shift and go to state 234
    PLUS            shift and go to state 236
    MINUS           shift and go to state 232
    TIMES           shift and go to state 239
    DIVIDE          shift and go to state 238
    INT_DIVIDE      shift and go to state 240
    INT_REMAINDER   shift and go to state 246
    AND             shift and go to state 242
    OR              shift and go to state 245
    XOR             shift and go to state 231
    AND_THEN        shift and go to state 237
    OR_ELSE         shift and go to state 235
    IMPLIES         shift and go to state 244


state 228

    (108) conditional -> IF expr THEN . fnbody elseif_group else_opt END
    (98) fnbody -> . ins
    (99) fnbody -> . fnbody ins
    (100) ins -> . assignment
    (101) ins -> . conditional
    (102) ins -> . loop
    (103) ins -> . COMMA
    (104) assignment -> . variable ass_op expr
    (108) conditional -> . IF expr THEN fnbody elseif_group else_opt END
    (113) loop -> . FROM fnbody variant UNTIL expr LOOP fnbody END
    (105) variable -> . IDENTIFIER
    (106) variable -> . RESULT

    COMMA           shift and go to state 191
    IF              shift and go to state 197
    FROM            shift and go to state 194
    IDENTIFIER      shift and go to state 195
    RESULT          shift and go to state 187

    conditional                    shift and go to state 189
    ins                            shift and go to state 190
    fnbody                         shift and go to state 252
    assignment                     shift and go to state 188
    variable                       shift and go to state 193
    loop                           shift and go to state 196

state 229

    (121) expr -> expr LESS . expr
    (118) expr -> . expr EQUAL expr
    (119) expr -> . expr NOT_EQUAL expr
    (120) expr -> . expr GREATER expr
    (121) expr -> . expr LESS expr
    (122) expr -> . expr LESS_EQUAL expr
    (123) expr -> . expr GREATER_EQUAL expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr MINUS expr
    (126) expr -> . expr TIMES expr
    (127) expr -> . expr DIVIDE expr
    (128) expr -> . expr INT_DIVIDE expr
    (129) expr -> . expr INT_REMAINDER expr
    (130) expr -> . expr AND expr
    (131) expr -> . expr OR expr
    (132) expr -> . expr XOR expr
    (133) expr -> . expr AND_THEN expr
    (134) expr -> . expr OR_ELSE expr
    (135) expr -> . expr IMPLIES expr
    (136) expr -> . RESULT
    (137) expr -> . CURRENT
    (138) expr -> . LPAREN expr RPAREN
    (139) expr -> . bool_const
    (140) expr -> . CHARACTER
    (141) expr -> . INTEGER
    (142) expr -> . REAL
    (143) expr -> . STRING
    (155) bool_const -> . TRUE
    (156) bool_const -> . FALSE

    RESULT          shift and go to state 216
    CURRENT         shift and go to state 215
    LPAREN          shift and go to state 217
    CHARACTER       shift and go to state 211
    INTEGER         shift and go to state 214
    REAL            shift and go to state 210
    STRING          shift and go to state 213
    TRUE            shift and go to state 162
    FALSE           shift and go to state 174

    expr                           shift and go to state 253
    bool_const                     shift and go to state 212

state 230

    (118) expr -> expr EQUAL . expr
    (118) expr -> . expr EQUAL expr
    (119) expr -> . expr NOT_EQUAL expr
    (120) expr -> . expr GREATER expr
    (121) expr -> . expr LESS expr
    (122) expr -> . expr LESS_EQUAL expr
    (123) expr -> . expr GREATER_EQUAL expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr MINUS expr
    (126) expr -> . expr TIMES expr
    (127) expr -> . expr DIVIDE expr
    (128) expr -> . expr INT_DIVIDE expr
    (129) expr -> . expr INT_REMAINDER expr
    (130) expr -> . expr AND expr
    (131) expr -> . expr OR expr
    (132) expr -> . expr XOR expr
    (133) expr -> . expr AND_THEN expr
    (134) expr -> . expr OR_ELSE expr
    (135) expr -> . expr IMPLIES expr
    (136) expr -> . RESULT
    (137) expr -> . CURRENT
    (138) expr -> . LPAREN expr RPAREN
    (139) expr -> . bool_const
    (140) expr -> . CHARACTER
    (141) expr -> . INTEGER
    (142) expr -> . REAL
    (143) expr -> . STRING
    (155) bool_const -> . TRUE
    (156) bool_const -> . FALSE

    RESULT          shift and go to state 216
    CURRENT         shift and go to state 215
    LPAREN          shift and go to state 217
    CHARACTER       shift and go to state 211
    INTEGER         shift and go to state 214
    REAL            shift and go to state 210
    STRING          shift and go to state 213
    TRUE            shift and go to state 162
    FALSE           shift and go to state 174

    expr                           shift and go to state 254
    bool_const                     shift and go to state 212

state 231

    (132) expr -> expr XOR . expr
    (118) expr -> . expr EQUAL expr
    (119) expr -> . expr NOT_EQUAL expr
    (120) expr -> . expr GREATER expr
    (121) expr -> . expr LESS expr
    (122) expr -> . expr LESS_EQUAL expr
    (123) expr -> . expr GREATER_EQUAL expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr MINUS expr
    (126) expr -> . expr TIMES expr
    (127) expr -> . expr DIVIDE expr
    (128) expr -> . expr INT_DIVIDE expr
    (129) expr -> . expr INT_REMAINDER expr
    (130) expr -> . expr AND expr
    (131) expr -> . expr OR expr
    (132) expr -> . expr XOR expr
    (133) expr -> . expr AND_THEN expr
    (134) expr -> . expr OR_ELSE expr
    (135) expr -> . expr IMPLIES expr
    (136) expr -> . RESULT
    (137) expr -> . CURRENT
    (138) expr -> . LPAREN expr RPAREN
    (139) expr -> . bool_const
    (140) expr -> . CHARACTER
    (141) expr -> . INTEGER
    (142) expr -> . REAL
    (143) expr -> . STRING
    (155) bool_const -> . TRUE
    (156) bool_const -> . FALSE

    RESULT          shift and go to state 216
    CURRENT         shift and go to state 215
    LPAREN          shift and go to state 217
    CHARACTER       shift and go to state 211
    INTEGER         shift and go to state 214
    REAL            shift and go to state 210
    STRING          shift and go to state 213
    TRUE            shift and go to state 162
    FALSE           shift and go to state 174

    expr                           shift and go to state 255
    bool_const                     shift and go to state 212

state 232

    (125) expr -> expr MINUS . expr
    (118) expr -> . expr EQUAL expr
    (119) expr -> . expr NOT_EQUAL expr
    (120) expr -> . expr GREATER expr
    (121) expr -> . expr LESS expr
    (122) expr -> . expr LESS_EQUAL expr
    (123) expr -> . expr GREATER_EQUAL expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr MINUS expr
    (126) expr -> . expr TIMES expr
    (127) expr -> . expr DIVIDE expr
    (128) expr -> . expr INT_DIVIDE expr
    (129) expr -> . expr INT_REMAINDER expr
    (130) expr -> . expr AND expr
    (131) expr -> . expr OR expr
    (132) expr -> . expr XOR expr
    (133) expr -> . expr AND_THEN expr
    (134) expr -> . expr OR_ELSE expr
    (135) expr -> . expr IMPLIES expr
    (136) expr -> . RESULT
    (137) expr -> . CURRENT
    (138) expr -> . LPAREN expr RPAREN
    (139) expr -> . bool_const
    (140) expr -> . CHARACTER
    (141) expr -> . INTEGER
    (142) expr -> . REAL
    (143) expr -> . STRING
    (155) bool_const -> . TRUE
    (156) bool_const -> . FALSE

    RESULT          shift and go to state 216
    CURRENT         shift and go to state 215
    LPAREN          shift and go to state 217
    CHARACTER       shift and go to state 211
    INTEGER         shift and go to state 214
    REAL            shift and go to state 210
    STRING          shift and go to state 213
    TRUE            shift and go to state 162
    FALSE           shift and go to state 174

    expr                           shift and go to state 256
    bool_const                     shift and go to state 212

state 233

    (119) expr -> expr NOT_EQUAL . expr
    (118) expr -> . expr EQUAL expr
    (119) expr -> . expr NOT_EQUAL expr
    (120) expr -> . expr GREATER expr
    (121) expr -> . expr LESS expr
    (122) expr -> . expr LESS_EQUAL expr
    (123) expr -> . expr GREATER_EQUAL expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr MINUS expr
    (126) expr -> . expr TIMES expr
    (127) expr -> . expr DIVIDE expr
    (128) expr -> . expr INT_DIVIDE expr
    (129) expr -> . expr INT_REMAINDER expr
    (130) expr -> . expr AND expr
    (131) expr -> . expr OR expr
    (132) expr -> . expr XOR expr
    (133) expr -> . expr AND_THEN expr
    (134) expr -> . expr OR_ELSE expr
    (135) expr -> . expr IMPLIES expr
    (136) expr -> . RESULT
    (137) expr -> . CURRENT
    (138) expr -> . LPAREN expr RPAREN
    (139) expr -> . bool_const
    (140) expr -> . CHARACTER
    (141) expr -> . INTEGER
    (142) expr -> . REAL
    (143) expr -> . STRING
    (155) bool_const -> . TRUE
    (156) bool_const -> . FALSE

    RESULT          shift and go to state 216
    CURRENT         shift and go to state 215
    LPAREN          shift and go to state 217
    CHARACTER       shift and go to state 211
    INTEGER         shift and go to state 214
    REAL            shift and go to state 210
    STRING          shift and go to state 213
    TRUE            shift and go to state 162
    FALSE           shift and go to state 174

    expr                           shift and go to state 257
    bool_const                     shift and go to state 212

state 234

    (123) expr -> expr GREATER_EQUAL . expr
    (118) expr -> . expr EQUAL expr
    (119) expr -> . expr NOT_EQUAL expr
    (120) expr -> . expr GREATER expr
    (121) expr -> . expr LESS expr
    (122) expr -> . expr LESS_EQUAL expr
    (123) expr -> . expr GREATER_EQUAL expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr MINUS expr
    (126) expr -> . expr TIMES expr
    (127) expr -> . expr DIVIDE expr
    (128) expr -> . expr INT_DIVIDE expr
    (129) expr -> . expr INT_REMAINDER expr
    (130) expr -> . expr AND expr
    (131) expr -> . expr OR expr
    (132) expr -> . expr XOR expr
    (133) expr -> . expr AND_THEN expr
    (134) expr -> . expr OR_ELSE expr
    (135) expr -> . expr IMPLIES expr
    (136) expr -> . RESULT
    (137) expr -> . CURRENT
    (138) expr -> . LPAREN expr RPAREN
    (139) expr -> . bool_const
    (140) expr -> . CHARACTER
    (141) expr -> . INTEGER
    (142) expr -> . REAL
    (143) expr -> . STRING
    (155) bool_const -> . TRUE
    (156) bool_const -> . FALSE

    RESULT          shift and go to state 216
    CURRENT         shift and go to state 215
    LPAREN          shift and go to state 217
    CHARACTER       shift and go to state 211
    INTEGER         shift and go to state 214
    REAL            shift and go to state 210
    STRING          shift and go to state 213
    TRUE            shift and go to state 162
    FALSE           shift and go to state 174

    expr                           shift and go to state 258
    bool_const                     shift and go to state 212

state 235

    (134) expr -> expr OR_ELSE . expr
    (118) expr -> . expr EQUAL expr
    (119) expr -> . expr NOT_EQUAL expr
    (120) expr -> . expr GREATER expr
    (121) expr -> . expr LESS expr
    (122) expr -> . expr LESS_EQUAL expr
    (123) expr -> . expr GREATER_EQUAL expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr MINUS expr
    (126) expr -> . expr TIMES expr
    (127) expr -> . expr DIVIDE expr
    (128) expr -> . expr INT_DIVIDE expr
    (129) expr -> . expr INT_REMAINDER expr
    (130) expr -> . expr AND expr
    (131) expr -> . expr OR expr
    (132) expr -> . expr XOR expr
    (133) expr -> . expr AND_THEN expr
    (134) expr -> . expr OR_ELSE expr
    (135) expr -> . expr IMPLIES expr
    (136) expr -> . RESULT
    (137) expr -> . CURRENT
    (138) expr -> . LPAREN expr RPAREN
    (139) expr -> . bool_const
    (140) expr -> . CHARACTER
    (141) expr -> . INTEGER
    (142) expr -> . REAL
    (143) expr -> . STRING
    (155) bool_const -> . TRUE
    (156) bool_const -> . FALSE

    RESULT          shift and go to state 216
    CURRENT         shift and go to state 215
    LPAREN          shift and go to state 217
    CHARACTER       shift and go to state 211
    INTEGER         shift and go to state 214
    REAL            shift and go to state 210
    STRING          shift and go to state 213
    TRUE            shift and go to state 162
    FALSE           shift and go to state 174

    expr                           shift and go to state 259
    bool_const                     shift and go to state 212

state 236

    (124) expr -> expr PLUS . expr
    (118) expr -> . expr EQUAL expr
    (119) expr -> . expr NOT_EQUAL expr
    (120) expr -> . expr GREATER expr
    (121) expr -> . expr LESS expr
    (122) expr -> . expr LESS_EQUAL expr
    (123) expr -> . expr GREATER_EQUAL expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr MINUS expr
    (126) expr -> . expr TIMES expr
    (127) expr -> . expr DIVIDE expr
    (128) expr -> . expr INT_DIVIDE expr
    (129) expr -> . expr INT_REMAINDER expr
    (130) expr -> . expr AND expr
    (131) expr -> . expr OR expr
    (132) expr -> . expr XOR expr
    (133) expr -> . expr AND_THEN expr
    (134) expr -> . expr OR_ELSE expr
    (135) expr -> . expr IMPLIES expr
    (136) expr -> . RESULT
    (137) expr -> . CURRENT
    (138) expr -> . LPAREN expr RPAREN
    (139) expr -> . bool_const
    (140) expr -> . CHARACTER
    (141) expr -> . INTEGER
    (142) expr -> . REAL
    (143) expr -> . STRING
    (155) bool_const -> . TRUE
    (156) bool_const -> . FALSE

    RESULT          shift and go to state 216
    CURRENT         shift and go to state 215
    LPAREN          shift and go to state 217
    CHARACTER       shift and go to state 211
    INTEGER         shift and go to state 214
    REAL            shift and go to state 210
    STRING          shift and go to state 213
    TRUE            shift and go to state 162
    FALSE           shift and go to state 174

    expr                           shift and go to state 260
    bool_const                     shift and go to state 212

state 237

    (133) expr -> expr AND_THEN . expr
    (118) expr -> . expr EQUAL expr
    (119) expr -> . expr NOT_EQUAL expr
    (120) expr -> . expr GREATER expr
    (121) expr -> . expr LESS expr
    (122) expr -> . expr LESS_EQUAL expr
    (123) expr -> . expr GREATER_EQUAL expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr MINUS expr
    (126) expr -> . expr TIMES expr
    (127) expr -> . expr DIVIDE expr
    (128) expr -> . expr INT_DIVIDE expr
    (129) expr -> . expr INT_REMAINDER expr
    (130) expr -> . expr AND expr
    (131) expr -> . expr OR expr
    (132) expr -> . expr XOR expr
    (133) expr -> . expr AND_THEN expr
    (134) expr -> . expr OR_ELSE expr
    (135) expr -> . expr IMPLIES expr
    (136) expr -> . RESULT
    (137) expr -> . CURRENT
    (138) expr -> . LPAREN expr RPAREN
    (139) expr -> . bool_const
    (140) expr -> . CHARACTER
    (141) expr -> . INTEGER
    (142) expr -> . REAL
    (143) expr -> . STRING
    (155) bool_const -> . TRUE
    (156) bool_const -> . FALSE

    RESULT          shift and go to state 216
    CURRENT         shift and go to state 215
    LPAREN          shift and go to state 217
    CHARACTER       shift and go to state 211
    INTEGER         shift and go to state 214
    REAL            shift and go to state 210
    STRING          shift and go to state 213
    TRUE            shift and go to state 162
    FALSE           shift and go to state 174

    expr                           shift and go to state 261
    bool_const                     shift and go to state 212

state 238

    (127) expr -> expr DIVIDE . expr
    (118) expr -> . expr EQUAL expr
    (119) expr -> . expr NOT_EQUAL expr
    (120) expr -> . expr GREATER expr
    (121) expr -> . expr LESS expr
    (122) expr -> . expr LESS_EQUAL expr
    (123) expr -> . expr GREATER_EQUAL expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr MINUS expr
    (126) expr -> . expr TIMES expr
    (127) expr -> . expr DIVIDE expr
    (128) expr -> . expr INT_DIVIDE expr
    (129) expr -> . expr INT_REMAINDER expr
    (130) expr -> . expr AND expr
    (131) expr -> . expr OR expr
    (132) expr -> . expr XOR expr
    (133) expr -> . expr AND_THEN expr
    (134) expr -> . expr OR_ELSE expr
    (135) expr -> . expr IMPLIES expr
    (136) expr -> . RESULT
    (137) expr -> . CURRENT
    (138) expr -> . LPAREN expr RPAREN
    (139) expr -> . bool_const
    (140) expr -> . CHARACTER
    (141) expr -> . INTEGER
    (142) expr -> . REAL
    (143) expr -> . STRING
    (155) bool_const -> . TRUE
    (156) bool_const -> . FALSE

    RESULT          shift and go to state 216
    CURRENT         shift and go to state 215
    LPAREN          shift and go to state 217
    CHARACTER       shift and go to state 211
    INTEGER         shift and go to state 214
    REAL            shift and go to state 210
    STRING          shift and go to state 213
    TRUE            shift and go to state 162
    FALSE           shift and go to state 174

    expr                           shift and go to state 262
    bool_const                     shift and go to state 212

state 239

    (126) expr -> expr TIMES . expr
    (118) expr -> . expr EQUAL expr
    (119) expr -> . expr NOT_EQUAL expr
    (120) expr -> . expr GREATER expr
    (121) expr -> . expr LESS expr
    (122) expr -> . expr LESS_EQUAL expr
    (123) expr -> . expr GREATER_EQUAL expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr MINUS expr
    (126) expr -> . expr TIMES expr
    (127) expr -> . expr DIVIDE expr
    (128) expr -> . expr INT_DIVIDE expr
    (129) expr -> . expr INT_REMAINDER expr
    (130) expr -> . expr AND expr
    (131) expr -> . expr OR expr
    (132) expr -> . expr XOR expr
    (133) expr -> . expr AND_THEN expr
    (134) expr -> . expr OR_ELSE expr
    (135) expr -> . expr IMPLIES expr
    (136) expr -> . RESULT
    (137) expr -> . CURRENT
    (138) expr -> . LPAREN expr RPAREN
    (139) expr -> . bool_const
    (140) expr -> . CHARACTER
    (141) expr -> . INTEGER
    (142) expr -> . REAL
    (143) expr -> . STRING
    (155) bool_const -> . TRUE
    (156) bool_const -> . FALSE

    RESULT          shift and go to state 216
    CURRENT         shift and go to state 215
    LPAREN          shift and go to state 217
    CHARACTER       shift and go to state 211
    INTEGER         shift and go to state 214
    REAL            shift and go to state 210
    STRING          shift and go to state 213
    TRUE            shift and go to state 162
    FALSE           shift and go to state 174

    expr                           shift and go to state 263
    bool_const                     shift and go to state 212

state 240

    (128) expr -> expr INT_DIVIDE . expr
    (118) expr -> . expr EQUAL expr
    (119) expr -> . expr NOT_EQUAL expr
    (120) expr -> . expr GREATER expr
    (121) expr -> . expr LESS expr
    (122) expr -> . expr LESS_EQUAL expr
    (123) expr -> . expr GREATER_EQUAL expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr MINUS expr
    (126) expr -> . expr TIMES expr
    (127) expr -> . expr DIVIDE expr
    (128) expr -> . expr INT_DIVIDE expr
    (129) expr -> . expr INT_REMAINDER expr
    (130) expr -> . expr AND expr
    (131) expr -> . expr OR expr
    (132) expr -> . expr XOR expr
    (133) expr -> . expr AND_THEN expr
    (134) expr -> . expr OR_ELSE expr
    (135) expr -> . expr IMPLIES expr
    (136) expr -> . RESULT
    (137) expr -> . CURRENT
    (138) expr -> . LPAREN expr RPAREN
    (139) expr -> . bool_const
    (140) expr -> . CHARACTER
    (141) expr -> . INTEGER
    (142) expr -> . REAL
    (143) expr -> . STRING
    (155) bool_const -> . TRUE
    (156) bool_const -> . FALSE

    RESULT          shift and go to state 216
    CURRENT         shift and go to state 215
    LPAREN          shift and go to state 217
    CHARACTER       shift and go to state 211
    INTEGER         shift and go to state 214
    REAL            shift and go to state 210
    STRING          shift and go to state 213
    TRUE            shift and go to state 162
    FALSE           shift and go to state 174

    expr                           shift and go to state 264
    bool_const                     shift and go to state 212

state 241

    (122) expr -> expr LESS_EQUAL . expr
    (118) expr -> . expr EQUAL expr
    (119) expr -> . expr NOT_EQUAL expr
    (120) expr -> . expr GREATER expr
    (121) expr -> . expr LESS expr
    (122) expr -> . expr LESS_EQUAL expr
    (123) expr -> . expr GREATER_EQUAL expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr MINUS expr
    (126) expr -> . expr TIMES expr
    (127) expr -> . expr DIVIDE expr
    (128) expr -> . expr INT_DIVIDE expr
    (129) expr -> . expr INT_REMAINDER expr
    (130) expr -> . expr AND expr
    (131) expr -> . expr OR expr
    (132) expr -> . expr XOR expr
    (133) expr -> . expr AND_THEN expr
    (134) expr -> . expr OR_ELSE expr
    (135) expr -> . expr IMPLIES expr
    (136) expr -> . RESULT
    (137) expr -> . CURRENT
    (138) expr -> . LPAREN expr RPAREN
    (139) expr -> . bool_const
    (140) expr -> . CHARACTER
    (141) expr -> . INTEGER
    (142) expr -> . REAL
    (143) expr -> . STRING
    (155) bool_const -> . TRUE
    (156) bool_const -> . FALSE

    RESULT          shift and go to state 216
    CURRENT         shift and go to state 215
    LPAREN          shift and go to state 217
    CHARACTER       shift and go to state 211
    INTEGER         shift and go to state 214
    REAL            shift and go to state 210
    STRING          shift and go to state 213
    TRUE            shift and go to state 162
    FALSE           shift and go to state 174

    expr                           shift and go to state 265
    bool_const                     shift and go to state 212

state 242

    (130) expr -> expr AND . expr
    (118) expr -> . expr EQUAL expr
    (119) expr -> . expr NOT_EQUAL expr
    (120) expr -> . expr GREATER expr
    (121) expr -> . expr LESS expr
    (122) expr -> . expr LESS_EQUAL expr
    (123) expr -> . expr GREATER_EQUAL expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr MINUS expr
    (126) expr -> . expr TIMES expr
    (127) expr -> . expr DIVIDE expr
    (128) expr -> . expr INT_DIVIDE expr
    (129) expr -> . expr INT_REMAINDER expr
    (130) expr -> . expr AND expr
    (131) expr -> . expr OR expr
    (132) expr -> . expr XOR expr
    (133) expr -> . expr AND_THEN expr
    (134) expr -> . expr OR_ELSE expr
    (135) expr -> . expr IMPLIES expr
    (136) expr -> . RESULT
    (137) expr -> . CURRENT
    (138) expr -> . LPAREN expr RPAREN
    (139) expr -> . bool_const
    (140) expr -> . CHARACTER
    (141) expr -> . INTEGER
    (142) expr -> . REAL
    (143) expr -> . STRING
    (155) bool_const -> . TRUE
    (156) bool_const -> . FALSE

    RESULT          shift and go to state 216
    CURRENT         shift and go to state 215
    LPAREN          shift and go to state 217
    CHARACTER       shift and go to state 211
    INTEGER         shift and go to state 214
    REAL            shift and go to state 210
    STRING          shift and go to state 213
    TRUE            shift and go to state 162
    FALSE           shift and go to state 174

    expr                           shift and go to state 266
    bool_const                     shift and go to state 212

state 243

    (120) expr -> expr GREATER . expr
    (118) expr -> . expr EQUAL expr
    (119) expr -> . expr NOT_EQUAL expr
    (120) expr -> . expr GREATER expr
    (121) expr -> . expr LESS expr
    (122) expr -> . expr LESS_EQUAL expr
    (123) expr -> . expr GREATER_EQUAL expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr MINUS expr
    (126) expr -> . expr TIMES expr
    (127) expr -> . expr DIVIDE expr
    (128) expr -> . expr INT_DIVIDE expr
    (129) expr -> . expr INT_REMAINDER expr
    (130) expr -> . expr AND expr
    (131) expr -> . expr OR expr
    (132) expr -> . expr XOR expr
    (133) expr -> . expr AND_THEN expr
    (134) expr -> . expr OR_ELSE expr
    (135) expr -> . expr IMPLIES expr
    (136) expr -> . RESULT
    (137) expr -> . CURRENT
    (138) expr -> . LPAREN expr RPAREN
    (139) expr -> . bool_const
    (140) expr -> . CHARACTER
    (141) expr -> . INTEGER
    (142) expr -> . REAL
    (143) expr -> . STRING
    (155) bool_const -> . TRUE
    (156) bool_const -> . FALSE

    RESULT          shift and go to state 216
    CURRENT         shift and go to state 215
    LPAREN          shift and go to state 217
    CHARACTER       shift and go to state 211
    INTEGER         shift and go to state 214
    REAL            shift and go to state 210
    STRING          shift and go to state 213
    TRUE            shift and go to state 162
    FALSE           shift and go to state 174

    expr                           shift and go to state 267
    bool_const                     shift and go to state 212

state 244

    (135) expr -> expr IMPLIES . expr
    (118) expr -> . expr EQUAL expr
    (119) expr -> . expr NOT_EQUAL expr
    (120) expr -> . expr GREATER expr
    (121) expr -> . expr LESS expr
    (122) expr -> . expr LESS_EQUAL expr
    (123) expr -> . expr GREATER_EQUAL expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr MINUS expr
    (126) expr -> . expr TIMES expr
    (127) expr -> . expr DIVIDE expr
    (128) expr -> . expr INT_DIVIDE expr
    (129) expr -> . expr INT_REMAINDER expr
    (130) expr -> . expr AND expr
    (131) expr -> . expr OR expr
    (132) expr -> . expr XOR expr
    (133) expr -> . expr AND_THEN expr
    (134) expr -> . expr OR_ELSE expr
    (135) expr -> . expr IMPLIES expr
    (136) expr -> . RESULT
    (137) expr -> . CURRENT
    (138) expr -> . LPAREN expr RPAREN
    (139) expr -> . bool_const
    (140) expr -> . CHARACTER
    (141) expr -> . INTEGER
    (142) expr -> . REAL
    (143) expr -> . STRING
    (155) bool_const -> . TRUE
    (156) bool_const -> . FALSE

    RESULT          shift and go to state 216
    CURRENT         shift and go to state 215
    LPAREN          shift and go to state 217
    CHARACTER       shift and go to state 211
    INTEGER         shift and go to state 214
    REAL            shift and go to state 210
    STRING          shift and go to state 213
    TRUE            shift and go to state 162
    FALSE           shift and go to state 174

    expr                           shift and go to state 268
    bool_const                     shift and go to state 212

state 245

    (131) expr -> expr OR . expr
    (118) expr -> . expr EQUAL expr
    (119) expr -> . expr NOT_EQUAL expr
    (120) expr -> . expr GREATER expr
    (121) expr -> . expr LESS expr
    (122) expr -> . expr LESS_EQUAL expr
    (123) expr -> . expr GREATER_EQUAL expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr MINUS expr
    (126) expr -> . expr TIMES expr
    (127) expr -> . expr DIVIDE expr
    (128) expr -> . expr INT_DIVIDE expr
    (129) expr -> . expr INT_REMAINDER expr
    (130) expr -> . expr AND expr
    (131) expr -> . expr OR expr
    (132) expr -> . expr XOR expr
    (133) expr -> . expr AND_THEN expr
    (134) expr -> . expr OR_ELSE expr
    (135) expr -> . expr IMPLIES expr
    (136) expr -> . RESULT
    (137) expr -> . CURRENT
    (138) expr -> . LPAREN expr RPAREN
    (139) expr -> . bool_const
    (140) expr -> . CHARACTER
    (141) expr -> . INTEGER
    (142) expr -> . REAL
    (143) expr -> . STRING
    (155) bool_const -> . TRUE
    (156) bool_const -> . FALSE

    RESULT          shift and go to state 216
    CURRENT         shift and go to state 215
    LPAREN          shift and go to state 217
    CHARACTER       shift and go to state 211
    INTEGER         shift and go to state 214
    REAL            shift and go to state 210
    STRING          shift and go to state 213
    TRUE            shift and go to state 162
    FALSE           shift and go to state 174

    expr                           shift and go to state 269
    bool_const                     shift and go to state 212

state 246

    (129) expr -> expr INT_REMAINDER . expr
    (118) expr -> . expr EQUAL expr
    (119) expr -> . expr NOT_EQUAL expr
    (120) expr -> . expr GREATER expr
    (121) expr -> . expr LESS expr
    (122) expr -> . expr LESS_EQUAL expr
    (123) expr -> . expr GREATER_EQUAL expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr MINUS expr
    (126) expr -> . expr TIMES expr
    (127) expr -> . expr DIVIDE expr
    (128) expr -> . expr INT_DIVIDE expr
    (129) expr -> . expr INT_REMAINDER expr
    (130) expr -> . expr AND expr
    (131) expr -> . expr OR expr
    (132) expr -> . expr XOR expr
    (133) expr -> . expr AND_THEN expr
    (134) expr -> . expr OR_ELSE expr
    (135) expr -> . expr IMPLIES expr
    (136) expr -> . RESULT
    (137) expr -> . CURRENT
    (138) expr -> . LPAREN expr RPAREN
    (139) expr -> . bool_const
    (140) expr -> . CHARACTER
    (141) expr -> . INTEGER
    (142) expr -> . REAL
    (143) expr -> . STRING
    (155) bool_const -> . TRUE
    (156) bool_const -> . FALSE

    RESULT          shift and go to state 216
    CURRENT         shift and go to state 215
    LPAREN          shift and go to state 217
    CHARACTER       shift and go to state 211
    INTEGER         shift and go to state 214
    REAL            shift and go to state 210
    STRING          shift and go to state 213
    TRUE            shift and go to state 162
    FALSE           shift and go to state 174

    expr                           shift and go to state 270
    bool_const                     shift and go to state 212

state 247

    (96) exname -> ALIAS STRING .

    END             reduce using rule 96 (exname -> ALIAS STRING .)


state 248

    (116) variant -> VARIANT IDENTIFIER . COLON expr

    COLON           shift and go to state 271


state 249

    (115) variant -> VARIANT expr .
    (118) expr -> expr . EQUAL expr
    (119) expr -> expr . NOT_EQUAL expr
    (120) expr -> expr . GREATER expr
    (121) expr -> expr . LESS expr
    (122) expr -> expr . LESS_EQUAL expr
    (123) expr -> expr . GREATER_EQUAL expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . MINUS expr
    (126) expr -> expr . TIMES expr
    (127) expr -> expr . DIVIDE expr
    (128) expr -> expr . INT_DIVIDE expr
    (129) expr -> expr . INT_REMAINDER expr
    (130) expr -> expr . AND expr
    (131) expr -> expr . OR expr
    (132) expr -> expr . XOR expr
    (133) expr -> expr . AND_THEN expr
    (134) expr -> expr . OR_ELSE expr
    (135) expr -> expr . IMPLIES expr

    UNTIL           reduce using rule 115 (variant -> VARIANT expr .)
    EQUAL           shift and go to state 230
    NOT_EQUAL       shift and go to state 233
    GREATER         shift and go to state 243
    LESS            shift and go to state 229
    LESS_EQUAL      shift and go to state 241
    GREATER_EQUAL   shift and go to state 234
    PLUS            shift and go to state 236
    MINUS           shift and go to state 232
    TIMES           shift and go to state 239
    DIVIDE          shift and go to state 238
    INT_DIVIDE      shift and go to state 240
    INT_REMAINDER   shift and go to state 246
    AND             shift and go to state 242
    OR              shift and go to state 245
    XOR             shift and go to state 231
    AND_THEN        shift and go to state 237
    OR_ELSE         shift and go to state 235
    IMPLIES         shift and go to state 244


state 250

    (113) loop -> FROM fnbody variant UNTIL . expr LOOP fnbody END
    (118) expr -> . expr EQUAL expr
    (119) expr -> . expr NOT_EQUAL expr
    (120) expr -> . expr GREATER expr
    (121) expr -> . expr LESS expr
    (122) expr -> . expr LESS_EQUAL expr
    (123) expr -> . expr GREATER_EQUAL expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr MINUS expr
    (126) expr -> . expr TIMES expr
    (127) expr -> . expr DIVIDE expr
    (128) expr -> . expr INT_DIVIDE expr
    (129) expr -> . expr INT_REMAINDER expr
    (130) expr -> . expr AND expr
    (131) expr -> . expr OR expr
    (132) expr -> . expr XOR expr
    (133) expr -> . expr AND_THEN expr
    (134) expr -> . expr OR_ELSE expr
    (135) expr -> . expr IMPLIES expr
    (136) expr -> . RESULT
    (137) expr -> . CURRENT
    (138) expr -> . LPAREN expr RPAREN
    (139) expr -> . bool_const
    (140) expr -> . CHARACTER
    (141) expr -> . INTEGER
    (142) expr -> . REAL
    (143) expr -> . STRING
    (155) bool_const -> . TRUE
    (156) bool_const -> . FALSE

    RESULT          shift and go to state 216
    CURRENT         shift and go to state 215
    LPAREN          shift and go to state 217
    CHARACTER       shift and go to state 211
    INTEGER         shift and go to state 214
    REAL            shift and go to state 210
    STRING          shift and go to state 213
    TRUE            shift and go to state 162
    FALSE           shift and go to state 174

    expr                           shift and go to state 272
    bool_const                     shift and go to state 212

state 251

    (138) expr -> LPAREN expr RPAREN .

    LOOP            reduce using rule 138 (expr -> LPAREN expr RPAREN .)
    EQUAL           reduce using rule 138 (expr -> LPAREN expr RPAREN .)
    NOT_EQUAL       reduce using rule 138 (expr -> LPAREN expr RPAREN .)
    GREATER         reduce using rule 138 (expr -> LPAREN expr RPAREN .)
    LESS            reduce using rule 138 (expr -> LPAREN expr RPAREN .)
    LESS_EQUAL      reduce using rule 138 (expr -> LPAREN expr RPAREN .)
    GREATER_EQUAL   reduce using rule 138 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 138 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 138 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 138 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 138 (expr -> LPAREN expr RPAREN .)
    INT_DIVIDE      reduce using rule 138 (expr -> LPAREN expr RPAREN .)
    INT_REMAINDER   reduce using rule 138 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 138 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 138 (expr -> LPAREN expr RPAREN .)
    XOR             reduce using rule 138 (expr -> LPAREN expr RPAREN .)
    AND_THEN        reduce using rule 138 (expr -> LPAREN expr RPAREN .)
    OR_ELSE         reduce using rule 138 (expr -> LPAREN expr RPAREN .)
    IMPLIES         reduce using rule 138 (expr -> LPAREN expr RPAREN .)
    THEN            reduce using rule 138 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 138 (expr -> LPAREN expr RPAREN .)
    IF              reduce using rule 138 (expr -> LPAREN expr RPAREN .)
    FROM            reduce using rule 138 (expr -> LPAREN expr RPAREN .)
    IDENTIFIER      reduce using rule 138 (expr -> LPAREN expr RPAREN .)
    RESULT          reduce using rule 138 (expr -> LPAREN expr RPAREN .)
    END             reduce using rule 138 (expr -> LPAREN expr RPAREN .)
    VARIANT         reduce using rule 138 (expr -> LPAREN expr RPAREN .)
    UNTIL           reduce using rule 138 (expr -> LPAREN expr RPAREN .)
    ELSEIF          reduce using rule 138 (expr -> LPAREN expr RPAREN .)
    ELSE            reduce using rule 138 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 138 (expr -> LPAREN expr RPAREN .)


state 252

    (108) conditional -> IF expr THEN fnbody . elseif_group else_opt END
    (99) fnbody -> fnbody . ins
    (109) elseif_group -> . elseif_group ELSEIF expr THEN fnbody
    (110) elseif_group -> . empty
    (100) ins -> . assignment
    (101) ins -> . conditional
    (102) ins -> . loop
    (103) ins -> . COMMA
    (174) empty -> .
    (104) assignment -> . variable ass_op expr
    (108) conditional -> . IF expr THEN fnbody elseif_group else_opt END
    (113) loop -> . FROM fnbody variant UNTIL expr LOOP fnbody END
    (105) variable -> . IDENTIFIER
    (106) variable -> . RESULT

    COMMA           shift and go to state 191
    ELSEIF          reduce using rule 174 (empty -> .)
    ELSE            reduce using rule 174 (empty -> .)
    END             reduce using rule 174 (empty -> .)
    IF              shift and go to state 197
    FROM            shift and go to state 194
    IDENTIFIER      shift and go to state 195
    RESULT          shift and go to state 187

    conditional                    shift and go to state 189
    elseif_group                   shift and go to state 273
    ins                            shift and go to state 206
    loop                           shift and go to state 196
    assignment                     shift and go to state 188
    variable                       shift and go to state 193
    empty                          shift and go to state 274

state 253

    (121) expr -> expr LESS expr .
    (118) expr -> expr . EQUAL expr
    (119) expr -> expr . NOT_EQUAL expr
    (120) expr -> expr . GREATER expr
    (121) expr -> expr . LESS expr
    (122) expr -> expr . LESS_EQUAL expr
    (123) expr -> expr . GREATER_EQUAL expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . MINUS expr
    (126) expr -> expr . TIMES expr
    (127) expr -> expr . DIVIDE expr
    (128) expr -> expr . INT_DIVIDE expr
    (129) expr -> expr . INT_REMAINDER expr
    (130) expr -> expr . AND expr
    (131) expr -> expr . OR expr
    (132) expr -> expr . XOR expr
    (133) expr -> expr . AND_THEN expr
    (134) expr -> expr . OR_ELSE expr
    (135) expr -> expr . IMPLIES expr

    LOOP            reduce using rule 121 (expr -> expr LESS expr .)
    EQUAL           reduce using rule 121 (expr -> expr LESS expr .)
    NOT_EQUAL       reduce using rule 121 (expr -> expr LESS expr .)
    GREATER         reduce using rule 121 (expr -> expr LESS expr .)
    LESS            reduce using rule 121 (expr -> expr LESS expr .)
    LESS_EQUAL      reduce using rule 121 (expr -> expr LESS expr .)
    GREATER_EQUAL   reduce using rule 121 (expr -> expr LESS expr .)
    AND             reduce using rule 121 (expr -> expr LESS expr .)
    OR              reduce using rule 121 (expr -> expr LESS expr .)
    XOR             reduce using rule 121 (expr -> expr LESS expr .)
    AND_THEN        reduce using rule 121 (expr -> expr LESS expr .)
    OR_ELSE         reduce using rule 121 (expr -> expr LESS expr .)
    IMPLIES         reduce using rule 121 (expr -> expr LESS expr .)
    THEN            reduce using rule 121 (expr -> expr LESS expr .)
    COMMA           reduce using rule 121 (expr -> expr LESS expr .)
    IF              reduce using rule 121 (expr -> expr LESS expr .)
    FROM            reduce using rule 121 (expr -> expr LESS expr .)
    IDENTIFIER      reduce using rule 121 (expr -> expr LESS expr .)
    RESULT          reduce using rule 121 (expr -> expr LESS expr .)
    END             reduce using rule 121 (expr -> expr LESS expr .)
    VARIANT         reduce using rule 121 (expr -> expr LESS expr .)
    UNTIL           reduce using rule 121 (expr -> expr LESS expr .)
    ELSEIF          reduce using rule 121 (expr -> expr LESS expr .)
    ELSE            reduce using rule 121 (expr -> expr LESS expr .)
    RPAREN          reduce using rule 121 (expr -> expr LESS expr .)
    PLUS            shift and go to state 236
    MINUS           shift and go to state 232
    TIMES           shift and go to state 239
    DIVIDE          shift and go to state 238
    INT_DIVIDE      shift and go to state 240
    INT_REMAINDER   shift and go to state 246

  ! PLUS            [ reduce using rule 121 (expr -> expr LESS expr .) ]
  ! MINUS           [ reduce using rule 121 (expr -> expr LESS expr .) ]
  ! TIMES           [ reduce using rule 121 (expr -> expr LESS expr .) ]
  ! DIVIDE          [ reduce using rule 121 (expr -> expr LESS expr .) ]
  ! INT_DIVIDE      [ reduce using rule 121 (expr -> expr LESS expr .) ]
  ! INT_REMAINDER   [ reduce using rule 121 (expr -> expr LESS expr .) ]
  ! EQUAL           [ shift and go to state 230 ]
  ! NOT_EQUAL       [ shift and go to state 233 ]
  ! GREATER         [ shift and go to state 243 ]
  ! LESS            [ shift and go to state 229 ]
  ! LESS_EQUAL      [ shift and go to state 241 ]
  ! GREATER_EQUAL   [ shift and go to state 234 ]
  ! AND             [ shift and go to state 242 ]
  ! OR              [ shift and go to state 245 ]
  ! XOR             [ shift and go to state 231 ]
  ! AND_THEN        [ shift and go to state 237 ]
  ! OR_ELSE         [ shift and go to state 235 ]
  ! IMPLIES         [ shift and go to state 244 ]


state 254

    (118) expr -> expr EQUAL expr .
    (118) expr -> expr . EQUAL expr
    (119) expr -> expr . NOT_EQUAL expr
    (120) expr -> expr . GREATER expr
    (121) expr -> expr . LESS expr
    (122) expr -> expr . LESS_EQUAL expr
    (123) expr -> expr . GREATER_EQUAL expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . MINUS expr
    (126) expr -> expr . TIMES expr
    (127) expr -> expr . DIVIDE expr
    (128) expr -> expr . INT_DIVIDE expr
    (129) expr -> expr . INT_REMAINDER expr
    (130) expr -> expr . AND expr
    (131) expr -> expr . OR expr
    (132) expr -> expr . XOR expr
    (133) expr -> expr . AND_THEN expr
    (134) expr -> expr . OR_ELSE expr
    (135) expr -> expr . IMPLIES expr

    LOOP            reduce using rule 118 (expr -> expr EQUAL expr .)
    EQUAL           reduce using rule 118 (expr -> expr EQUAL expr .)
    NOT_EQUAL       reduce using rule 118 (expr -> expr EQUAL expr .)
    GREATER         reduce using rule 118 (expr -> expr EQUAL expr .)
    LESS            reduce using rule 118 (expr -> expr EQUAL expr .)
    LESS_EQUAL      reduce using rule 118 (expr -> expr EQUAL expr .)
    GREATER_EQUAL   reduce using rule 118 (expr -> expr EQUAL expr .)
    AND             reduce using rule 118 (expr -> expr EQUAL expr .)
    OR              reduce using rule 118 (expr -> expr EQUAL expr .)
    XOR             reduce using rule 118 (expr -> expr EQUAL expr .)
    AND_THEN        reduce using rule 118 (expr -> expr EQUAL expr .)
    OR_ELSE         reduce using rule 118 (expr -> expr EQUAL expr .)
    IMPLIES         reduce using rule 118 (expr -> expr EQUAL expr .)
    THEN            reduce using rule 118 (expr -> expr EQUAL expr .)
    COMMA           reduce using rule 118 (expr -> expr EQUAL expr .)
    IF              reduce using rule 118 (expr -> expr EQUAL expr .)
    FROM            reduce using rule 118 (expr -> expr EQUAL expr .)
    IDENTIFIER      reduce using rule 118 (expr -> expr EQUAL expr .)
    RESULT          reduce using rule 118 (expr -> expr EQUAL expr .)
    END             reduce using rule 118 (expr -> expr EQUAL expr .)
    VARIANT         reduce using rule 118 (expr -> expr EQUAL expr .)
    UNTIL           reduce using rule 118 (expr -> expr EQUAL expr .)
    ELSEIF          reduce using rule 118 (expr -> expr EQUAL expr .)
    ELSE            reduce using rule 118 (expr -> expr EQUAL expr .)
    RPAREN          reduce using rule 118 (expr -> expr EQUAL expr .)
    PLUS            shift and go to state 236
    MINUS           shift and go to state 232
    TIMES           shift and go to state 239
    DIVIDE          shift and go to state 238
    INT_DIVIDE      shift and go to state 240
    INT_REMAINDER   shift and go to state 246

  ! PLUS            [ reduce using rule 118 (expr -> expr EQUAL expr .) ]
  ! MINUS           [ reduce using rule 118 (expr -> expr EQUAL expr .) ]
  ! TIMES           [ reduce using rule 118 (expr -> expr EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 118 (expr -> expr EQUAL expr .) ]
  ! INT_DIVIDE      [ reduce using rule 118 (expr -> expr EQUAL expr .) ]
  ! INT_REMAINDER   [ reduce using rule 118 (expr -> expr EQUAL expr .) ]
  ! EQUAL           [ shift and go to state 230 ]
  ! NOT_EQUAL       [ shift and go to state 233 ]
  ! GREATER         [ shift and go to state 243 ]
  ! LESS            [ shift and go to state 229 ]
  ! LESS_EQUAL      [ shift and go to state 241 ]
  ! GREATER_EQUAL   [ shift and go to state 234 ]
  ! AND             [ shift and go to state 242 ]
  ! OR              [ shift and go to state 245 ]
  ! XOR             [ shift and go to state 231 ]
  ! AND_THEN        [ shift and go to state 237 ]
  ! OR_ELSE         [ shift and go to state 235 ]
  ! IMPLIES         [ shift and go to state 244 ]


state 255

    (132) expr -> expr XOR expr .
    (118) expr -> expr . EQUAL expr
    (119) expr -> expr . NOT_EQUAL expr
    (120) expr -> expr . GREATER expr
    (121) expr -> expr . LESS expr
    (122) expr -> expr . LESS_EQUAL expr
    (123) expr -> expr . GREATER_EQUAL expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . MINUS expr
    (126) expr -> expr . TIMES expr
    (127) expr -> expr . DIVIDE expr
    (128) expr -> expr . INT_DIVIDE expr
    (129) expr -> expr . INT_REMAINDER expr
    (130) expr -> expr . AND expr
    (131) expr -> expr . OR expr
    (132) expr -> expr . XOR expr
    (133) expr -> expr . AND_THEN expr
    (134) expr -> expr . OR_ELSE expr
    (135) expr -> expr . IMPLIES expr

    LOOP            reduce using rule 132 (expr -> expr XOR expr .)
    OR              reduce using rule 132 (expr -> expr XOR expr .)
    XOR             reduce using rule 132 (expr -> expr XOR expr .)
    OR_ELSE         reduce using rule 132 (expr -> expr XOR expr .)
    IMPLIES         reduce using rule 132 (expr -> expr XOR expr .)
    THEN            reduce using rule 132 (expr -> expr XOR expr .)
    COMMA           reduce using rule 132 (expr -> expr XOR expr .)
    IF              reduce using rule 132 (expr -> expr XOR expr .)
    FROM            reduce using rule 132 (expr -> expr XOR expr .)
    IDENTIFIER      reduce using rule 132 (expr -> expr XOR expr .)
    RESULT          reduce using rule 132 (expr -> expr XOR expr .)
    END             reduce using rule 132 (expr -> expr XOR expr .)
    VARIANT         reduce using rule 132 (expr -> expr XOR expr .)
    UNTIL           reduce using rule 132 (expr -> expr XOR expr .)
    ELSEIF          reduce using rule 132 (expr -> expr XOR expr .)
    ELSE            reduce using rule 132 (expr -> expr XOR expr .)
    RPAREN          reduce using rule 132 (expr -> expr XOR expr .)
    EQUAL           shift and go to state 230
    NOT_EQUAL       shift and go to state 233
    GREATER         shift and go to state 243
    LESS            shift and go to state 229
    LESS_EQUAL      shift and go to state 241
    GREATER_EQUAL   shift and go to state 234
    PLUS            shift and go to state 236
    MINUS           shift and go to state 232
    TIMES           shift and go to state 239
    DIVIDE          shift and go to state 238
    INT_DIVIDE      shift and go to state 240
    INT_REMAINDER   shift and go to state 246
    AND             shift and go to state 242
    AND_THEN        shift and go to state 237

  ! EQUAL           [ reduce using rule 132 (expr -> expr XOR expr .) ]
  ! NOT_EQUAL       [ reduce using rule 132 (expr -> expr XOR expr .) ]
  ! GREATER         [ reduce using rule 132 (expr -> expr XOR expr .) ]
  ! LESS            [ reduce using rule 132 (expr -> expr XOR expr .) ]
  ! LESS_EQUAL      [ reduce using rule 132 (expr -> expr XOR expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 132 (expr -> expr XOR expr .) ]
  ! PLUS            [ reduce using rule 132 (expr -> expr XOR expr .) ]
  ! MINUS           [ reduce using rule 132 (expr -> expr XOR expr .) ]
  ! TIMES           [ reduce using rule 132 (expr -> expr XOR expr .) ]
  ! DIVIDE          [ reduce using rule 132 (expr -> expr XOR expr .) ]
  ! INT_DIVIDE      [ reduce using rule 132 (expr -> expr XOR expr .) ]
  ! INT_REMAINDER   [ reduce using rule 132 (expr -> expr XOR expr .) ]
  ! AND             [ reduce using rule 132 (expr -> expr XOR expr .) ]
  ! AND_THEN        [ reduce using rule 132 (expr -> expr XOR expr .) ]
  ! OR              [ shift and go to state 245 ]
  ! XOR             [ shift and go to state 231 ]
  ! OR_ELSE         [ shift and go to state 235 ]
  ! IMPLIES         [ shift and go to state 244 ]


state 256

    (125) expr -> expr MINUS expr .
    (118) expr -> expr . EQUAL expr
    (119) expr -> expr . NOT_EQUAL expr
    (120) expr -> expr . GREATER expr
    (121) expr -> expr . LESS expr
    (122) expr -> expr . LESS_EQUAL expr
    (123) expr -> expr . GREATER_EQUAL expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . MINUS expr
    (126) expr -> expr . TIMES expr
    (127) expr -> expr . DIVIDE expr
    (128) expr -> expr . INT_DIVIDE expr
    (129) expr -> expr . INT_REMAINDER expr
    (130) expr -> expr . AND expr
    (131) expr -> expr . OR expr
    (132) expr -> expr . XOR expr
    (133) expr -> expr . AND_THEN expr
    (134) expr -> expr . OR_ELSE expr
    (135) expr -> expr . IMPLIES expr

    LOOP            reduce using rule 125 (expr -> expr MINUS expr .)
    EQUAL           reduce using rule 125 (expr -> expr MINUS expr .)
    NOT_EQUAL       reduce using rule 125 (expr -> expr MINUS expr .)
    GREATER         reduce using rule 125 (expr -> expr MINUS expr .)
    LESS            reduce using rule 125 (expr -> expr MINUS expr .)
    LESS_EQUAL      reduce using rule 125 (expr -> expr MINUS expr .)
    GREATER_EQUAL   reduce using rule 125 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 125 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 125 (expr -> expr MINUS expr .)
    AND             reduce using rule 125 (expr -> expr MINUS expr .)
    OR              reduce using rule 125 (expr -> expr MINUS expr .)
    XOR             reduce using rule 125 (expr -> expr MINUS expr .)
    AND_THEN        reduce using rule 125 (expr -> expr MINUS expr .)
    OR_ELSE         reduce using rule 125 (expr -> expr MINUS expr .)
    IMPLIES         reduce using rule 125 (expr -> expr MINUS expr .)
    THEN            reduce using rule 125 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 125 (expr -> expr MINUS expr .)
    IF              reduce using rule 125 (expr -> expr MINUS expr .)
    FROM            reduce using rule 125 (expr -> expr MINUS expr .)
    IDENTIFIER      reduce using rule 125 (expr -> expr MINUS expr .)
    RESULT          reduce using rule 125 (expr -> expr MINUS expr .)
    END             reduce using rule 125 (expr -> expr MINUS expr .)
    VARIANT         reduce using rule 125 (expr -> expr MINUS expr .)
    UNTIL           reduce using rule 125 (expr -> expr MINUS expr .)
    ELSEIF          reduce using rule 125 (expr -> expr MINUS expr .)
    ELSE            reduce using rule 125 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 125 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 239
    DIVIDE          shift and go to state 238
    INT_DIVIDE      shift and go to state 240
    INT_REMAINDER   shift and go to state 246

  ! TIMES           [ reduce using rule 125 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 125 (expr -> expr MINUS expr .) ]
  ! INT_DIVIDE      [ reduce using rule 125 (expr -> expr MINUS expr .) ]
  ! INT_REMAINDER   [ reduce using rule 125 (expr -> expr MINUS expr .) ]
  ! EQUAL           [ shift and go to state 230 ]
  ! NOT_EQUAL       [ shift and go to state 233 ]
  ! GREATER         [ shift and go to state 243 ]
  ! LESS            [ shift and go to state 229 ]
  ! LESS_EQUAL      [ shift and go to state 241 ]
  ! GREATER_EQUAL   [ shift and go to state 234 ]
  ! PLUS            [ shift and go to state 236 ]
  ! MINUS           [ shift and go to state 232 ]
  ! AND             [ shift and go to state 242 ]
  ! OR              [ shift and go to state 245 ]
  ! XOR             [ shift and go to state 231 ]
  ! AND_THEN        [ shift and go to state 237 ]
  ! OR_ELSE         [ shift and go to state 235 ]
  ! IMPLIES         [ shift and go to state 244 ]


state 257

    (119) expr -> expr NOT_EQUAL expr .
    (118) expr -> expr . EQUAL expr
    (119) expr -> expr . NOT_EQUAL expr
    (120) expr -> expr . GREATER expr
    (121) expr -> expr . LESS expr
    (122) expr -> expr . LESS_EQUAL expr
    (123) expr -> expr . GREATER_EQUAL expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . MINUS expr
    (126) expr -> expr . TIMES expr
    (127) expr -> expr . DIVIDE expr
    (128) expr -> expr . INT_DIVIDE expr
    (129) expr -> expr . INT_REMAINDER expr
    (130) expr -> expr . AND expr
    (131) expr -> expr . OR expr
    (132) expr -> expr . XOR expr
    (133) expr -> expr . AND_THEN expr
    (134) expr -> expr . OR_ELSE expr
    (135) expr -> expr . IMPLIES expr

    LOOP            reduce using rule 119 (expr -> expr NOT_EQUAL expr .)
    EQUAL           reduce using rule 119 (expr -> expr NOT_EQUAL expr .)
    NOT_EQUAL       reduce using rule 119 (expr -> expr NOT_EQUAL expr .)
    GREATER         reduce using rule 119 (expr -> expr NOT_EQUAL expr .)
    LESS            reduce using rule 119 (expr -> expr NOT_EQUAL expr .)
    LESS_EQUAL      reduce using rule 119 (expr -> expr NOT_EQUAL expr .)
    GREATER_EQUAL   reduce using rule 119 (expr -> expr NOT_EQUAL expr .)
    AND             reduce using rule 119 (expr -> expr NOT_EQUAL expr .)
    OR              reduce using rule 119 (expr -> expr NOT_EQUAL expr .)
    XOR             reduce using rule 119 (expr -> expr NOT_EQUAL expr .)
    AND_THEN        reduce using rule 119 (expr -> expr NOT_EQUAL expr .)
    OR_ELSE         reduce using rule 119 (expr -> expr NOT_EQUAL expr .)
    IMPLIES         reduce using rule 119 (expr -> expr NOT_EQUAL expr .)
    THEN            reduce using rule 119 (expr -> expr NOT_EQUAL expr .)
    COMMA           reduce using rule 119 (expr -> expr NOT_EQUAL expr .)
    IF              reduce using rule 119 (expr -> expr NOT_EQUAL expr .)
    FROM            reduce using rule 119 (expr -> expr NOT_EQUAL expr .)
    IDENTIFIER      reduce using rule 119 (expr -> expr NOT_EQUAL expr .)
    RESULT          reduce using rule 119 (expr -> expr NOT_EQUAL expr .)
    END             reduce using rule 119 (expr -> expr NOT_EQUAL expr .)
    VARIANT         reduce using rule 119 (expr -> expr NOT_EQUAL expr .)
    UNTIL           reduce using rule 119 (expr -> expr NOT_EQUAL expr .)
    ELSEIF          reduce using rule 119 (expr -> expr NOT_EQUAL expr .)
    ELSE            reduce using rule 119 (expr -> expr NOT_EQUAL expr .)
    RPAREN          reduce using rule 119 (expr -> expr NOT_EQUAL expr .)
    PLUS            shift and go to state 236
    MINUS           shift and go to state 232
    TIMES           shift and go to state 239
    DIVIDE          shift and go to state 238
    INT_DIVIDE      shift and go to state 240
    INT_REMAINDER   shift and go to state 246

  ! PLUS            [ reduce using rule 119 (expr -> expr NOT_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 119 (expr -> expr NOT_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 119 (expr -> expr NOT_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 119 (expr -> expr NOT_EQUAL expr .) ]
  ! INT_DIVIDE      [ reduce using rule 119 (expr -> expr NOT_EQUAL expr .) ]
  ! INT_REMAINDER   [ reduce using rule 119 (expr -> expr NOT_EQUAL expr .) ]
  ! EQUAL           [ shift and go to state 230 ]
  ! NOT_EQUAL       [ shift and go to state 233 ]
  ! GREATER         [ shift and go to state 243 ]
  ! LESS            [ shift and go to state 229 ]
  ! LESS_EQUAL      [ shift and go to state 241 ]
  ! GREATER_EQUAL   [ shift and go to state 234 ]
  ! AND             [ shift and go to state 242 ]
  ! OR              [ shift and go to state 245 ]
  ! XOR             [ shift and go to state 231 ]
  ! AND_THEN        [ shift and go to state 237 ]
  ! OR_ELSE         [ shift and go to state 235 ]
  ! IMPLIES         [ shift and go to state 244 ]


state 258

    (123) expr -> expr GREATER_EQUAL expr .
    (118) expr -> expr . EQUAL expr
    (119) expr -> expr . NOT_EQUAL expr
    (120) expr -> expr . GREATER expr
    (121) expr -> expr . LESS expr
    (122) expr -> expr . LESS_EQUAL expr
    (123) expr -> expr . GREATER_EQUAL expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . MINUS expr
    (126) expr -> expr . TIMES expr
    (127) expr -> expr . DIVIDE expr
    (128) expr -> expr . INT_DIVIDE expr
    (129) expr -> expr . INT_REMAINDER expr
    (130) expr -> expr . AND expr
    (131) expr -> expr . OR expr
    (132) expr -> expr . XOR expr
    (133) expr -> expr . AND_THEN expr
    (134) expr -> expr . OR_ELSE expr
    (135) expr -> expr . IMPLIES expr

    LOOP            reduce using rule 123 (expr -> expr GREATER_EQUAL expr .)
    EQUAL           reduce using rule 123 (expr -> expr GREATER_EQUAL expr .)
    NOT_EQUAL       reduce using rule 123 (expr -> expr GREATER_EQUAL expr .)
    GREATER         reduce using rule 123 (expr -> expr GREATER_EQUAL expr .)
    LESS            reduce using rule 123 (expr -> expr GREATER_EQUAL expr .)
    LESS_EQUAL      reduce using rule 123 (expr -> expr GREATER_EQUAL expr .)
    GREATER_EQUAL   reduce using rule 123 (expr -> expr GREATER_EQUAL expr .)
    AND             reduce using rule 123 (expr -> expr GREATER_EQUAL expr .)
    OR              reduce using rule 123 (expr -> expr GREATER_EQUAL expr .)
    XOR             reduce using rule 123 (expr -> expr GREATER_EQUAL expr .)
    AND_THEN        reduce using rule 123 (expr -> expr GREATER_EQUAL expr .)
    OR_ELSE         reduce using rule 123 (expr -> expr GREATER_EQUAL expr .)
    IMPLIES         reduce using rule 123 (expr -> expr GREATER_EQUAL expr .)
    THEN            reduce using rule 123 (expr -> expr GREATER_EQUAL expr .)
    COMMA           reduce using rule 123 (expr -> expr GREATER_EQUAL expr .)
    IF              reduce using rule 123 (expr -> expr GREATER_EQUAL expr .)
    FROM            reduce using rule 123 (expr -> expr GREATER_EQUAL expr .)
    IDENTIFIER      reduce using rule 123 (expr -> expr GREATER_EQUAL expr .)
    RESULT          reduce using rule 123 (expr -> expr GREATER_EQUAL expr .)
    END             reduce using rule 123 (expr -> expr GREATER_EQUAL expr .)
    VARIANT         reduce using rule 123 (expr -> expr GREATER_EQUAL expr .)
    UNTIL           reduce using rule 123 (expr -> expr GREATER_EQUAL expr .)
    ELSEIF          reduce using rule 123 (expr -> expr GREATER_EQUAL expr .)
    ELSE            reduce using rule 123 (expr -> expr GREATER_EQUAL expr .)
    RPAREN          reduce using rule 123 (expr -> expr GREATER_EQUAL expr .)
    PLUS            shift and go to state 236
    MINUS           shift and go to state 232
    TIMES           shift and go to state 239
    DIVIDE          shift and go to state 238
    INT_DIVIDE      shift and go to state 240
    INT_REMAINDER   shift and go to state 246

  ! PLUS            [ reduce using rule 123 (expr -> expr GREATER_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 123 (expr -> expr GREATER_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 123 (expr -> expr GREATER_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 123 (expr -> expr GREATER_EQUAL expr .) ]
  ! INT_DIVIDE      [ reduce using rule 123 (expr -> expr GREATER_EQUAL expr .) ]
  ! INT_REMAINDER   [ reduce using rule 123 (expr -> expr GREATER_EQUAL expr .) ]
  ! EQUAL           [ shift and go to state 230 ]
  ! NOT_EQUAL       [ shift and go to state 233 ]
  ! GREATER         [ shift and go to state 243 ]
  ! LESS            [ shift and go to state 229 ]
  ! LESS_EQUAL      [ shift and go to state 241 ]
  ! GREATER_EQUAL   [ shift and go to state 234 ]
  ! AND             [ shift and go to state 242 ]
  ! OR              [ shift and go to state 245 ]
  ! XOR             [ shift and go to state 231 ]
  ! AND_THEN        [ shift and go to state 237 ]
  ! OR_ELSE         [ shift and go to state 235 ]
  ! IMPLIES         [ shift and go to state 244 ]


state 259

    (134) expr -> expr OR_ELSE expr .
    (118) expr -> expr . EQUAL expr
    (119) expr -> expr . NOT_EQUAL expr
    (120) expr -> expr . GREATER expr
    (121) expr -> expr . LESS expr
    (122) expr -> expr . LESS_EQUAL expr
    (123) expr -> expr . GREATER_EQUAL expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . MINUS expr
    (126) expr -> expr . TIMES expr
    (127) expr -> expr . DIVIDE expr
    (128) expr -> expr . INT_DIVIDE expr
    (129) expr -> expr . INT_REMAINDER expr
    (130) expr -> expr . AND expr
    (131) expr -> expr . OR expr
    (132) expr -> expr . XOR expr
    (133) expr -> expr . AND_THEN expr
    (134) expr -> expr . OR_ELSE expr
    (135) expr -> expr . IMPLIES expr

    LOOP            reduce using rule 134 (expr -> expr OR_ELSE expr .)
    OR              reduce using rule 134 (expr -> expr OR_ELSE expr .)
    XOR             reduce using rule 134 (expr -> expr OR_ELSE expr .)
    OR_ELSE         reduce using rule 134 (expr -> expr OR_ELSE expr .)
    IMPLIES         reduce using rule 134 (expr -> expr OR_ELSE expr .)
    THEN            reduce using rule 134 (expr -> expr OR_ELSE expr .)
    COMMA           reduce using rule 134 (expr -> expr OR_ELSE expr .)
    IF              reduce using rule 134 (expr -> expr OR_ELSE expr .)
    FROM            reduce using rule 134 (expr -> expr OR_ELSE expr .)
    IDENTIFIER      reduce using rule 134 (expr -> expr OR_ELSE expr .)
    RESULT          reduce using rule 134 (expr -> expr OR_ELSE expr .)
    END             reduce using rule 134 (expr -> expr OR_ELSE expr .)
    VARIANT         reduce using rule 134 (expr -> expr OR_ELSE expr .)
    UNTIL           reduce using rule 134 (expr -> expr OR_ELSE expr .)
    ELSEIF          reduce using rule 134 (expr -> expr OR_ELSE expr .)
    ELSE            reduce using rule 134 (expr -> expr OR_ELSE expr .)
    RPAREN          reduce using rule 134 (expr -> expr OR_ELSE expr .)
    EQUAL           shift and go to state 230
    NOT_EQUAL       shift and go to state 233
    GREATER         shift and go to state 243
    LESS            shift and go to state 229
    LESS_EQUAL      shift and go to state 241
    GREATER_EQUAL   shift and go to state 234
    PLUS            shift and go to state 236
    MINUS           shift and go to state 232
    TIMES           shift and go to state 239
    DIVIDE          shift and go to state 238
    INT_DIVIDE      shift and go to state 240
    INT_REMAINDER   shift and go to state 246
    AND             shift and go to state 242
    AND_THEN        shift and go to state 237

  ! EQUAL           [ reduce using rule 134 (expr -> expr OR_ELSE expr .) ]
  ! NOT_EQUAL       [ reduce using rule 134 (expr -> expr OR_ELSE expr .) ]
  ! GREATER         [ reduce using rule 134 (expr -> expr OR_ELSE expr .) ]
  ! LESS            [ reduce using rule 134 (expr -> expr OR_ELSE expr .) ]
  ! LESS_EQUAL      [ reduce using rule 134 (expr -> expr OR_ELSE expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 134 (expr -> expr OR_ELSE expr .) ]
  ! PLUS            [ reduce using rule 134 (expr -> expr OR_ELSE expr .) ]
  ! MINUS           [ reduce using rule 134 (expr -> expr OR_ELSE expr .) ]
  ! TIMES           [ reduce using rule 134 (expr -> expr OR_ELSE expr .) ]
  ! DIVIDE          [ reduce using rule 134 (expr -> expr OR_ELSE expr .) ]
  ! INT_DIVIDE      [ reduce using rule 134 (expr -> expr OR_ELSE expr .) ]
  ! INT_REMAINDER   [ reduce using rule 134 (expr -> expr OR_ELSE expr .) ]
  ! AND             [ reduce using rule 134 (expr -> expr OR_ELSE expr .) ]
  ! AND_THEN        [ reduce using rule 134 (expr -> expr OR_ELSE expr .) ]
  ! OR              [ shift and go to state 245 ]
  ! XOR             [ shift and go to state 231 ]
  ! OR_ELSE         [ shift and go to state 235 ]
  ! IMPLIES         [ shift and go to state 244 ]


state 260

    (124) expr -> expr PLUS expr .
    (118) expr -> expr . EQUAL expr
    (119) expr -> expr . NOT_EQUAL expr
    (120) expr -> expr . GREATER expr
    (121) expr -> expr . LESS expr
    (122) expr -> expr . LESS_EQUAL expr
    (123) expr -> expr . GREATER_EQUAL expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . MINUS expr
    (126) expr -> expr . TIMES expr
    (127) expr -> expr . DIVIDE expr
    (128) expr -> expr . INT_DIVIDE expr
    (129) expr -> expr . INT_REMAINDER expr
    (130) expr -> expr . AND expr
    (131) expr -> expr . OR expr
    (132) expr -> expr . XOR expr
    (133) expr -> expr . AND_THEN expr
    (134) expr -> expr . OR_ELSE expr
    (135) expr -> expr . IMPLIES expr

    LOOP            reduce using rule 124 (expr -> expr PLUS expr .)
    EQUAL           reduce using rule 124 (expr -> expr PLUS expr .)
    NOT_EQUAL       reduce using rule 124 (expr -> expr PLUS expr .)
    GREATER         reduce using rule 124 (expr -> expr PLUS expr .)
    LESS            reduce using rule 124 (expr -> expr PLUS expr .)
    LESS_EQUAL      reduce using rule 124 (expr -> expr PLUS expr .)
    GREATER_EQUAL   reduce using rule 124 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 124 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 124 (expr -> expr PLUS expr .)
    AND             reduce using rule 124 (expr -> expr PLUS expr .)
    OR              reduce using rule 124 (expr -> expr PLUS expr .)
    XOR             reduce using rule 124 (expr -> expr PLUS expr .)
    AND_THEN        reduce using rule 124 (expr -> expr PLUS expr .)
    OR_ELSE         reduce using rule 124 (expr -> expr PLUS expr .)
    IMPLIES         reduce using rule 124 (expr -> expr PLUS expr .)
    THEN            reduce using rule 124 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 124 (expr -> expr PLUS expr .)
    IF              reduce using rule 124 (expr -> expr PLUS expr .)
    FROM            reduce using rule 124 (expr -> expr PLUS expr .)
    IDENTIFIER      reduce using rule 124 (expr -> expr PLUS expr .)
    RESULT          reduce using rule 124 (expr -> expr PLUS expr .)
    END             reduce using rule 124 (expr -> expr PLUS expr .)
    VARIANT         reduce using rule 124 (expr -> expr PLUS expr .)
    UNTIL           reduce using rule 124 (expr -> expr PLUS expr .)
    ELSEIF          reduce using rule 124 (expr -> expr PLUS expr .)
    ELSE            reduce using rule 124 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 124 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 239
    DIVIDE          shift and go to state 238
    INT_DIVIDE      shift and go to state 240
    INT_REMAINDER   shift and go to state 246

  ! TIMES           [ reduce using rule 124 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 124 (expr -> expr PLUS expr .) ]
  ! INT_DIVIDE      [ reduce using rule 124 (expr -> expr PLUS expr .) ]
  ! INT_REMAINDER   [ reduce using rule 124 (expr -> expr PLUS expr .) ]
  ! EQUAL           [ shift and go to state 230 ]
  ! NOT_EQUAL       [ shift and go to state 233 ]
  ! GREATER         [ shift and go to state 243 ]
  ! LESS            [ shift and go to state 229 ]
  ! LESS_EQUAL      [ shift and go to state 241 ]
  ! GREATER_EQUAL   [ shift and go to state 234 ]
  ! PLUS            [ shift and go to state 236 ]
  ! MINUS           [ shift and go to state 232 ]
  ! AND             [ shift and go to state 242 ]
  ! OR              [ shift and go to state 245 ]
  ! XOR             [ shift and go to state 231 ]
  ! AND_THEN        [ shift and go to state 237 ]
  ! OR_ELSE         [ shift and go to state 235 ]
  ! IMPLIES         [ shift and go to state 244 ]


state 261

    (133) expr -> expr AND_THEN expr .
    (118) expr -> expr . EQUAL expr
    (119) expr -> expr . NOT_EQUAL expr
    (120) expr -> expr . GREATER expr
    (121) expr -> expr . LESS expr
    (122) expr -> expr . LESS_EQUAL expr
    (123) expr -> expr . GREATER_EQUAL expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . MINUS expr
    (126) expr -> expr . TIMES expr
    (127) expr -> expr . DIVIDE expr
    (128) expr -> expr . INT_DIVIDE expr
    (129) expr -> expr . INT_REMAINDER expr
    (130) expr -> expr . AND expr
    (131) expr -> expr . OR expr
    (132) expr -> expr . XOR expr
    (133) expr -> expr . AND_THEN expr
    (134) expr -> expr . OR_ELSE expr
    (135) expr -> expr . IMPLIES expr

    LOOP            reduce using rule 133 (expr -> expr AND_THEN expr .)
    AND             reduce using rule 133 (expr -> expr AND_THEN expr .)
    OR              reduce using rule 133 (expr -> expr AND_THEN expr .)
    XOR             reduce using rule 133 (expr -> expr AND_THEN expr .)
    AND_THEN        reduce using rule 133 (expr -> expr AND_THEN expr .)
    OR_ELSE         reduce using rule 133 (expr -> expr AND_THEN expr .)
    IMPLIES         reduce using rule 133 (expr -> expr AND_THEN expr .)
    THEN            reduce using rule 133 (expr -> expr AND_THEN expr .)
    COMMA           reduce using rule 133 (expr -> expr AND_THEN expr .)
    IF              reduce using rule 133 (expr -> expr AND_THEN expr .)
    FROM            reduce using rule 133 (expr -> expr AND_THEN expr .)
    IDENTIFIER      reduce using rule 133 (expr -> expr AND_THEN expr .)
    RESULT          reduce using rule 133 (expr -> expr AND_THEN expr .)
    END             reduce using rule 133 (expr -> expr AND_THEN expr .)
    VARIANT         reduce using rule 133 (expr -> expr AND_THEN expr .)
    UNTIL           reduce using rule 133 (expr -> expr AND_THEN expr .)
    ELSEIF          reduce using rule 133 (expr -> expr AND_THEN expr .)
    ELSE            reduce using rule 133 (expr -> expr AND_THEN expr .)
    RPAREN          reduce using rule 133 (expr -> expr AND_THEN expr .)
    EQUAL           shift and go to state 230
    NOT_EQUAL       shift and go to state 233
    GREATER         shift and go to state 243
    LESS            shift and go to state 229
    LESS_EQUAL      shift and go to state 241
    GREATER_EQUAL   shift and go to state 234
    PLUS            shift and go to state 236
    MINUS           shift and go to state 232
    TIMES           shift and go to state 239
    DIVIDE          shift and go to state 238
    INT_DIVIDE      shift and go to state 240
    INT_REMAINDER   shift and go to state 246

  ! EQUAL           [ reduce using rule 133 (expr -> expr AND_THEN expr .) ]
  ! NOT_EQUAL       [ reduce using rule 133 (expr -> expr AND_THEN expr .) ]
  ! GREATER         [ reduce using rule 133 (expr -> expr AND_THEN expr .) ]
  ! LESS            [ reduce using rule 133 (expr -> expr AND_THEN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 133 (expr -> expr AND_THEN expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 133 (expr -> expr AND_THEN expr .) ]
  ! PLUS            [ reduce using rule 133 (expr -> expr AND_THEN expr .) ]
  ! MINUS           [ reduce using rule 133 (expr -> expr AND_THEN expr .) ]
  ! TIMES           [ reduce using rule 133 (expr -> expr AND_THEN expr .) ]
  ! DIVIDE          [ reduce using rule 133 (expr -> expr AND_THEN expr .) ]
  ! INT_DIVIDE      [ reduce using rule 133 (expr -> expr AND_THEN expr .) ]
  ! INT_REMAINDER   [ reduce using rule 133 (expr -> expr AND_THEN expr .) ]
  ! AND             [ shift and go to state 242 ]
  ! OR              [ shift and go to state 245 ]
  ! XOR             [ shift and go to state 231 ]
  ! AND_THEN        [ shift and go to state 237 ]
  ! OR_ELSE         [ shift and go to state 235 ]
  ! IMPLIES         [ shift and go to state 244 ]


state 262

    (127) expr -> expr DIVIDE expr .
    (118) expr -> expr . EQUAL expr
    (119) expr -> expr . NOT_EQUAL expr
    (120) expr -> expr . GREATER expr
    (121) expr -> expr . LESS expr
    (122) expr -> expr . LESS_EQUAL expr
    (123) expr -> expr . GREATER_EQUAL expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . MINUS expr
    (126) expr -> expr . TIMES expr
    (127) expr -> expr . DIVIDE expr
    (128) expr -> expr . INT_DIVIDE expr
    (129) expr -> expr . INT_REMAINDER expr
    (130) expr -> expr . AND expr
    (131) expr -> expr . OR expr
    (132) expr -> expr . XOR expr
    (133) expr -> expr . AND_THEN expr
    (134) expr -> expr . OR_ELSE expr
    (135) expr -> expr . IMPLIES expr

    LOOP            reduce using rule 127 (expr -> expr DIVIDE expr .)
    EQUAL           reduce using rule 127 (expr -> expr DIVIDE expr .)
    NOT_EQUAL       reduce using rule 127 (expr -> expr DIVIDE expr .)
    GREATER         reduce using rule 127 (expr -> expr DIVIDE expr .)
    LESS            reduce using rule 127 (expr -> expr DIVIDE expr .)
    LESS_EQUAL      reduce using rule 127 (expr -> expr DIVIDE expr .)
    GREATER_EQUAL   reduce using rule 127 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 127 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 127 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 127 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 127 (expr -> expr DIVIDE expr .)
    INT_DIVIDE      reduce using rule 127 (expr -> expr DIVIDE expr .)
    INT_REMAINDER   reduce using rule 127 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 127 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 127 (expr -> expr DIVIDE expr .)
    XOR             reduce using rule 127 (expr -> expr DIVIDE expr .)
    AND_THEN        reduce using rule 127 (expr -> expr DIVIDE expr .)
    OR_ELSE         reduce using rule 127 (expr -> expr DIVIDE expr .)
    IMPLIES         reduce using rule 127 (expr -> expr DIVIDE expr .)
    THEN            reduce using rule 127 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 127 (expr -> expr DIVIDE expr .)
    IF              reduce using rule 127 (expr -> expr DIVIDE expr .)
    FROM            reduce using rule 127 (expr -> expr DIVIDE expr .)
    IDENTIFIER      reduce using rule 127 (expr -> expr DIVIDE expr .)
    RESULT          reduce using rule 127 (expr -> expr DIVIDE expr .)
    END             reduce using rule 127 (expr -> expr DIVIDE expr .)
    VARIANT         reduce using rule 127 (expr -> expr DIVIDE expr .)
    UNTIL           reduce using rule 127 (expr -> expr DIVIDE expr .)
    ELSEIF          reduce using rule 127 (expr -> expr DIVIDE expr .)
    ELSE            reduce using rule 127 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 127 (expr -> expr DIVIDE expr .)

  ! EQUAL           [ shift and go to state 230 ]
  ! NOT_EQUAL       [ shift and go to state 233 ]
  ! GREATER         [ shift and go to state 243 ]
  ! LESS            [ shift and go to state 229 ]
  ! LESS_EQUAL      [ shift and go to state 241 ]
  ! GREATER_EQUAL   [ shift and go to state 234 ]
  ! PLUS            [ shift and go to state 236 ]
  ! MINUS           [ shift and go to state 232 ]
  ! TIMES           [ shift and go to state 239 ]
  ! DIVIDE          [ shift and go to state 238 ]
  ! INT_DIVIDE      [ shift and go to state 240 ]
  ! INT_REMAINDER   [ shift and go to state 246 ]
  ! AND             [ shift and go to state 242 ]
  ! OR              [ shift and go to state 245 ]
  ! XOR             [ shift and go to state 231 ]
  ! AND_THEN        [ shift and go to state 237 ]
  ! OR_ELSE         [ shift and go to state 235 ]
  ! IMPLIES         [ shift and go to state 244 ]


state 263

    (126) expr -> expr TIMES expr .
    (118) expr -> expr . EQUAL expr
    (119) expr -> expr . NOT_EQUAL expr
    (120) expr -> expr . GREATER expr
    (121) expr -> expr . LESS expr
    (122) expr -> expr . LESS_EQUAL expr
    (123) expr -> expr . GREATER_EQUAL expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . MINUS expr
    (126) expr -> expr . TIMES expr
    (127) expr -> expr . DIVIDE expr
    (128) expr -> expr . INT_DIVIDE expr
    (129) expr -> expr . INT_REMAINDER expr
    (130) expr -> expr . AND expr
    (131) expr -> expr . OR expr
    (132) expr -> expr . XOR expr
    (133) expr -> expr . AND_THEN expr
    (134) expr -> expr . OR_ELSE expr
    (135) expr -> expr . IMPLIES expr

    LOOP            reduce using rule 126 (expr -> expr TIMES expr .)
    EQUAL           reduce using rule 126 (expr -> expr TIMES expr .)
    NOT_EQUAL       reduce using rule 126 (expr -> expr TIMES expr .)
    GREATER         reduce using rule 126 (expr -> expr TIMES expr .)
    LESS            reduce using rule 126 (expr -> expr TIMES expr .)
    LESS_EQUAL      reduce using rule 126 (expr -> expr TIMES expr .)
    GREATER_EQUAL   reduce using rule 126 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 126 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 126 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 126 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 126 (expr -> expr TIMES expr .)
    INT_DIVIDE      reduce using rule 126 (expr -> expr TIMES expr .)
    INT_REMAINDER   reduce using rule 126 (expr -> expr TIMES expr .)
    AND             reduce using rule 126 (expr -> expr TIMES expr .)
    OR              reduce using rule 126 (expr -> expr TIMES expr .)
    XOR             reduce using rule 126 (expr -> expr TIMES expr .)
    AND_THEN        reduce using rule 126 (expr -> expr TIMES expr .)
    OR_ELSE         reduce using rule 126 (expr -> expr TIMES expr .)
    IMPLIES         reduce using rule 126 (expr -> expr TIMES expr .)
    THEN            reduce using rule 126 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 126 (expr -> expr TIMES expr .)
    IF              reduce using rule 126 (expr -> expr TIMES expr .)
    FROM            reduce using rule 126 (expr -> expr TIMES expr .)
    IDENTIFIER      reduce using rule 126 (expr -> expr TIMES expr .)
    RESULT          reduce using rule 126 (expr -> expr TIMES expr .)
    END             reduce using rule 126 (expr -> expr TIMES expr .)
    VARIANT         reduce using rule 126 (expr -> expr TIMES expr .)
    UNTIL           reduce using rule 126 (expr -> expr TIMES expr .)
    ELSEIF          reduce using rule 126 (expr -> expr TIMES expr .)
    ELSE            reduce using rule 126 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 126 (expr -> expr TIMES expr .)

  ! EQUAL           [ shift and go to state 230 ]
  ! NOT_EQUAL       [ shift and go to state 233 ]
  ! GREATER         [ shift and go to state 243 ]
  ! LESS            [ shift and go to state 229 ]
  ! LESS_EQUAL      [ shift and go to state 241 ]
  ! GREATER_EQUAL   [ shift and go to state 234 ]
  ! PLUS            [ shift and go to state 236 ]
  ! MINUS           [ shift and go to state 232 ]
  ! TIMES           [ shift and go to state 239 ]
  ! DIVIDE          [ shift and go to state 238 ]
  ! INT_DIVIDE      [ shift and go to state 240 ]
  ! INT_REMAINDER   [ shift and go to state 246 ]
  ! AND             [ shift and go to state 242 ]
  ! OR              [ shift and go to state 245 ]
  ! XOR             [ shift and go to state 231 ]
  ! AND_THEN        [ shift and go to state 237 ]
  ! OR_ELSE         [ shift and go to state 235 ]
  ! IMPLIES         [ shift and go to state 244 ]


state 264

    (128) expr -> expr INT_DIVIDE expr .
    (118) expr -> expr . EQUAL expr
    (119) expr -> expr . NOT_EQUAL expr
    (120) expr -> expr . GREATER expr
    (121) expr -> expr . LESS expr
    (122) expr -> expr . LESS_EQUAL expr
    (123) expr -> expr . GREATER_EQUAL expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . MINUS expr
    (126) expr -> expr . TIMES expr
    (127) expr -> expr . DIVIDE expr
    (128) expr -> expr . INT_DIVIDE expr
    (129) expr -> expr . INT_REMAINDER expr
    (130) expr -> expr . AND expr
    (131) expr -> expr . OR expr
    (132) expr -> expr . XOR expr
    (133) expr -> expr . AND_THEN expr
    (134) expr -> expr . OR_ELSE expr
    (135) expr -> expr . IMPLIES expr

    LOOP            reduce using rule 128 (expr -> expr INT_DIVIDE expr .)
    EQUAL           reduce using rule 128 (expr -> expr INT_DIVIDE expr .)
    NOT_EQUAL       reduce using rule 128 (expr -> expr INT_DIVIDE expr .)
    GREATER         reduce using rule 128 (expr -> expr INT_DIVIDE expr .)
    LESS            reduce using rule 128 (expr -> expr INT_DIVIDE expr .)
    LESS_EQUAL      reduce using rule 128 (expr -> expr INT_DIVIDE expr .)
    GREATER_EQUAL   reduce using rule 128 (expr -> expr INT_DIVIDE expr .)
    PLUS            reduce using rule 128 (expr -> expr INT_DIVIDE expr .)
    MINUS           reduce using rule 128 (expr -> expr INT_DIVIDE expr .)
    TIMES           reduce using rule 128 (expr -> expr INT_DIVIDE expr .)
    DIVIDE          reduce using rule 128 (expr -> expr INT_DIVIDE expr .)
    INT_DIVIDE      reduce using rule 128 (expr -> expr INT_DIVIDE expr .)
    INT_REMAINDER   reduce using rule 128 (expr -> expr INT_DIVIDE expr .)
    AND             reduce using rule 128 (expr -> expr INT_DIVIDE expr .)
    OR              reduce using rule 128 (expr -> expr INT_DIVIDE expr .)
    XOR             reduce using rule 128 (expr -> expr INT_DIVIDE expr .)
    AND_THEN        reduce using rule 128 (expr -> expr INT_DIVIDE expr .)
    OR_ELSE         reduce using rule 128 (expr -> expr INT_DIVIDE expr .)
    IMPLIES         reduce using rule 128 (expr -> expr INT_DIVIDE expr .)
    THEN            reduce using rule 128 (expr -> expr INT_DIVIDE expr .)
    COMMA           reduce using rule 128 (expr -> expr INT_DIVIDE expr .)
    IF              reduce using rule 128 (expr -> expr INT_DIVIDE expr .)
    FROM            reduce using rule 128 (expr -> expr INT_DIVIDE expr .)
    IDENTIFIER      reduce using rule 128 (expr -> expr INT_DIVIDE expr .)
    RESULT          reduce using rule 128 (expr -> expr INT_DIVIDE expr .)
    END             reduce using rule 128 (expr -> expr INT_DIVIDE expr .)
    VARIANT         reduce using rule 128 (expr -> expr INT_DIVIDE expr .)
    UNTIL           reduce using rule 128 (expr -> expr INT_DIVIDE expr .)
    ELSEIF          reduce using rule 128 (expr -> expr INT_DIVIDE expr .)
    ELSE            reduce using rule 128 (expr -> expr INT_DIVIDE expr .)
    RPAREN          reduce using rule 128 (expr -> expr INT_DIVIDE expr .)

  ! EQUAL           [ shift and go to state 230 ]
  ! NOT_EQUAL       [ shift and go to state 233 ]
  ! GREATER         [ shift and go to state 243 ]
  ! LESS            [ shift and go to state 229 ]
  ! LESS_EQUAL      [ shift and go to state 241 ]
  ! GREATER_EQUAL   [ shift and go to state 234 ]
  ! PLUS            [ shift and go to state 236 ]
  ! MINUS           [ shift and go to state 232 ]
  ! TIMES           [ shift and go to state 239 ]
  ! DIVIDE          [ shift and go to state 238 ]
  ! INT_DIVIDE      [ shift and go to state 240 ]
  ! INT_REMAINDER   [ shift and go to state 246 ]
  ! AND             [ shift and go to state 242 ]
  ! OR              [ shift and go to state 245 ]
  ! XOR             [ shift and go to state 231 ]
  ! AND_THEN        [ shift and go to state 237 ]
  ! OR_ELSE         [ shift and go to state 235 ]
  ! IMPLIES         [ shift and go to state 244 ]


state 265

    (122) expr -> expr LESS_EQUAL expr .
    (118) expr -> expr . EQUAL expr
    (119) expr -> expr . NOT_EQUAL expr
    (120) expr -> expr . GREATER expr
    (121) expr -> expr . LESS expr
    (122) expr -> expr . LESS_EQUAL expr
    (123) expr -> expr . GREATER_EQUAL expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . MINUS expr
    (126) expr -> expr . TIMES expr
    (127) expr -> expr . DIVIDE expr
    (128) expr -> expr . INT_DIVIDE expr
    (129) expr -> expr . INT_REMAINDER expr
    (130) expr -> expr . AND expr
    (131) expr -> expr . OR expr
    (132) expr -> expr . XOR expr
    (133) expr -> expr . AND_THEN expr
    (134) expr -> expr . OR_ELSE expr
    (135) expr -> expr . IMPLIES expr

    LOOP            reduce using rule 122 (expr -> expr LESS_EQUAL expr .)
    EQUAL           reduce using rule 122 (expr -> expr LESS_EQUAL expr .)
    NOT_EQUAL       reduce using rule 122 (expr -> expr LESS_EQUAL expr .)
    GREATER         reduce using rule 122 (expr -> expr LESS_EQUAL expr .)
    LESS            reduce using rule 122 (expr -> expr LESS_EQUAL expr .)
    LESS_EQUAL      reduce using rule 122 (expr -> expr LESS_EQUAL expr .)
    GREATER_EQUAL   reduce using rule 122 (expr -> expr LESS_EQUAL expr .)
    AND             reduce using rule 122 (expr -> expr LESS_EQUAL expr .)
    OR              reduce using rule 122 (expr -> expr LESS_EQUAL expr .)
    XOR             reduce using rule 122 (expr -> expr LESS_EQUAL expr .)
    AND_THEN        reduce using rule 122 (expr -> expr LESS_EQUAL expr .)
    OR_ELSE         reduce using rule 122 (expr -> expr LESS_EQUAL expr .)
    IMPLIES         reduce using rule 122 (expr -> expr LESS_EQUAL expr .)
    THEN            reduce using rule 122 (expr -> expr LESS_EQUAL expr .)
    COMMA           reduce using rule 122 (expr -> expr LESS_EQUAL expr .)
    IF              reduce using rule 122 (expr -> expr LESS_EQUAL expr .)
    FROM            reduce using rule 122 (expr -> expr LESS_EQUAL expr .)
    IDENTIFIER      reduce using rule 122 (expr -> expr LESS_EQUAL expr .)
    RESULT          reduce using rule 122 (expr -> expr LESS_EQUAL expr .)
    END             reduce using rule 122 (expr -> expr LESS_EQUAL expr .)
    VARIANT         reduce using rule 122 (expr -> expr LESS_EQUAL expr .)
    UNTIL           reduce using rule 122 (expr -> expr LESS_EQUAL expr .)
    ELSEIF          reduce using rule 122 (expr -> expr LESS_EQUAL expr .)
    ELSE            reduce using rule 122 (expr -> expr LESS_EQUAL expr .)
    RPAREN          reduce using rule 122 (expr -> expr LESS_EQUAL expr .)
    PLUS            shift and go to state 236
    MINUS           shift and go to state 232
    TIMES           shift and go to state 239
    DIVIDE          shift and go to state 238
    INT_DIVIDE      shift and go to state 240
    INT_REMAINDER   shift and go to state 246

  ! PLUS            [ reduce using rule 122 (expr -> expr LESS_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 122 (expr -> expr LESS_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 122 (expr -> expr LESS_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 122 (expr -> expr LESS_EQUAL expr .) ]
  ! INT_DIVIDE      [ reduce using rule 122 (expr -> expr LESS_EQUAL expr .) ]
  ! INT_REMAINDER   [ reduce using rule 122 (expr -> expr LESS_EQUAL expr .) ]
  ! EQUAL           [ shift and go to state 230 ]
  ! NOT_EQUAL       [ shift and go to state 233 ]
  ! GREATER         [ shift and go to state 243 ]
  ! LESS            [ shift and go to state 229 ]
  ! LESS_EQUAL      [ shift and go to state 241 ]
  ! GREATER_EQUAL   [ shift and go to state 234 ]
  ! AND             [ shift and go to state 242 ]
  ! OR              [ shift and go to state 245 ]
  ! XOR             [ shift and go to state 231 ]
  ! AND_THEN        [ shift and go to state 237 ]
  ! OR_ELSE         [ shift and go to state 235 ]
  ! IMPLIES         [ shift and go to state 244 ]


state 266

    (130) expr -> expr AND expr .
    (118) expr -> expr . EQUAL expr
    (119) expr -> expr . NOT_EQUAL expr
    (120) expr -> expr . GREATER expr
    (121) expr -> expr . LESS expr
    (122) expr -> expr . LESS_EQUAL expr
    (123) expr -> expr . GREATER_EQUAL expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . MINUS expr
    (126) expr -> expr . TIMES expr
    (127) expr -> expr . DIVIDE expr
    (128) expr -> expr . INT_DIVIDE expr
    (129) expr -> expr . INT_REMAINDER expr
    (130) expr -> expr . AND expr
    (131) expr -> expr . OR expr
    (132) expr -> expr . XOR expr
    (133) expr -> expr . AND_THEN expr
    (134) expr -> expr . OR_ELSE expr
    (135) expr -> expr . IMPLIES expr

    LOOP            reduce using rule 130 (expr -> expr AND expr .)
    AND             reduce using rule 130 (expr -> expr AND expr .)
    OR              reduce using rule 130 (expr -> expr AND expr .)
    XOR             reduce using rule 130 (expr -> expr AND expr .)
    AND_THEN        reduce using rule 130 (expr -> expr AND expr .)
    OR_ELSE         reduce using rule 130 (expr -> expr AND expr .)
    IMPLIES         reduce using rule 130 (expr -> expr AND expr .)
    THEN            reduce using rule 130 (expr -> expr AND expr .)
    COMMA           reduce using rule 130 (expr -> expr AND expr .)
    IF              reduce using rule 130 (expr -> expr AND expr .)
    FROM            reduce using rule 130 (expr -> expr AND expr .)
    IDENTIFIER      reduce using rule 130 (expr -> expr AND expr .)
    RESULT          reduce using rule 130 (expr -> expr AND expr .)
    END             reduce using rule 130 (expr -> expr AND expr .)
    VARIANT         reduce using rule 130 (expr -> expr AND expr .)
    UNTIL           reduce using rule 130 (expr -> expr AND expr .)
    ELSEIF          reduce using rule 130 (expr -> expr AND expr .)
    ELSE            reduce using rule 130 (expr -> expr AND expr .)
    RPAREN          reduce using rule 130 (expr -> expr AND expr .)
    EQUAL           shift and go to state 230
    NOT_EQUAL       shift and go to state 233
    GREATER         shift and go to state 243
    LESS            shift and go to state 229
    LESS_EQUAL      shift and go to state 241
    GREATER_EQUAL   shift and go to state 234
    PLUS            shift and go to state 236
    MINUS           shift and go to state 232
    TIMES           shift and go to state 239
    DIVIDE          shift and go to state 238
    INT_DIVIDE      shift and go to state 240
    INT_REMAINDER   shift and go to state 246

  ! EQUAL           [ reduce using rule 130 (expr -> expr AND expr .) ]
  ! NOT_EQUAL       [ reduce using rule 130 (expr -> expr AND expr .) ]
  ! GREATER         [ reduce using rule 130 (expr -> expr AND expr .) ]
  ! LESS            [ reduce using rule 130 (expr -> expr AND expr .) ]
  ! LESS_EQUAL      [ reduce using rule 130 (expr -> expr AND expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 130 (expr -> expr AND expr .) ]
  ! PLUS            [ reduce using rule 130 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 130 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 130 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 130 (expr -> expr AND expr .) ]
  ! INT_DIVIDE      [ reduce using rule 130 (expr -> expr AND expr .) ]
  ! INT_REMAINDER   [ reduce using rule 130 (expr -> expr AND expr .) ]
  ! AND             [ shift and go to state 242 ]
  ! OR              [ shift and go to state 245 ]
  ! XOR             [ shift and go to state 231 ]
  ! AND_THEN        [ shift and go to state 237 ]
  ! OR_ELSE         [ shift and go to state 235 ]
  ! IMPLIES         [ shift and go to state 244 ]


state 267

    (120) expr -> expr GREATER expr .
    (118) expr -> expr . EQUAL expr
    (119) expr -> expr . NOT_EQUAL expr
    (120) expr -> expr . GREATER expr
    (121) expr -> expr . LESS expr
    (122) expr -> expr . LESS_EQUAL expr
    (123) expr -> expr . GREATER_EQUAL expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . MINUS expr
    (126) expr -> expr . TIMES expr
    (127) expr -> expr . DIVIDE expr
    (128) expr -> expr . INT_DIVIDE expr
    (129) expr -> expr . INT_REMAINDER expr
    (130) expr -> expr . AND expr
    (131) expr -> expr . OR expr
    (132) expr -> expr . XOR expr
    (133) expr -> expr . AND_THEN expr
    (134) expr -> expr . OR_ELSE expr
    (135) expr -> expr . IMPLIES expr

    LOOP            reduce using rule 120 (expr -> expr GREATER expr .)
    EQUAL           reduce using rule 120 (expr -> expr GREATER expr .)
    NOT_EQUAL       reduce using rule 120 (expr -> expr GREATER expr .)
    GREATER         reduce using rule 120 (expr -> expr GREATER expr .)
    LESS            reduce using rule 120 (expr -> expr GREATER expr .)
    LESS_EQUAL      reduce using rule 120 (expr -> expr GREATER expr .)
    GREATER_EQUAL   reduce using rule 120 (expr -> expr GREATER expr .)
    AND             reduce using rule 120 (expr -> expr GREATER expr .)
    OR              reduce using rule 120 (expr -> expr GREATER expr .)
    XOR             reduce using rule 120 (expr -> expr GREATER expr .)
    AND_THEN        reduce using rule 120 (expr -> expr GREATER expr .)
    OR_ELSE         reduce using rule 120 (expr -> expr GREATER expr .)
    IMPLIES         reduce using rule 120 (expr -> expr GREATER expr .)
    THEN            reduce using rule 120 (expr -> expr GREATER expr .)
    COMMA           reduce using rule 120 (expr -> expr GREATER expr .)
    IF              reduce using rule 120 (expr -> expr GREATER expr .)
    FROM            reduce using rule 120 (expr -> expr GREATER expr .)
    IDENTIFIER      reduce using rule 120 (expr -> expr GREATER expr .)
    RESULT          reduce using rule 120 (expr -> expr GREATER expr .)
    END             reduce using rule 120 (expr -> expr GREATER expr .)
    VARIANT         reduce using rule 120 (expr -> expr GREATER expr .)
    UNTIL           reduce using rule 120 (expr -> expr GREATER expr .)
    ELSEIF          reduce using rule 120 (expr -> expr GREATER expr .)
    ELSE            reduce using rule 120 (expr -> expr GREATER expr .)
    RPAREN          reduce using rule 120 (expr -> expr GREATER expr .)
    PLUS            shift and go to state 236
    MINUS           shift and go to state 232
    TIMES           shift and go to state 239
    DIVIDE          shift and go to state 238
    INT_DIVIDE      shift and go to state 240
    INT_REMAINDER   shift and go to state 246

  ! PLUS            [ reduce using rule 120 (expr -> expr GREATER expr .) ]
  ! MINUS           [ reduce using rule 120 (expr -> expr GREATER expr .) ]
  ! TIMES           [ reduce using rule 120 (expr -> expr GREATER expr .) ]
  ! DIVIDE          [ reduce using rule 120 (expr -> expr GREATER expr .) ]
  ! INT_DIVIDE      [ reduce using rule 120 (expr -> expr GREATER expr .) ]
  ! INT_REMAINDER   [ reduce using rule 120 (expr -> expr GREATER expr .) ]
  ! EQUAL           [ shift and go to state 230 ]
  ! NOT_EQUAL       [ shift and go to state 233 ]
  ! GREATER         [ shift and go to state 243 ]
  ! LESS            [ shift and go to state 229 ]
  ! LESS_EQUAL      [ shift and go to state 241 ]
  ! GREATER_EQUAL   [ shift and go to state 234 ]
  ! AND             [ shift and go to state 242 ]
  ! OR              [ shift and go to state 245 ]
  ! XOR             [ shift and go to state 231 ]
  ! AND_THEN        [ shift and go to state 237 ]
  ! OR_ELSE         [ shift and go to state 235 ]
  ! IMPLIES         [ shift and go to state 244 ]


state 268

    (135) expr -> expr IMPLIES expr .
    (118) expr -> expr . EQUAL expr
    (119) expr -> expr . NOT_EQUAL expr
    (120) expr -> expr . GREATER expr
    (121) expr -> expr . LESS expr
    (122) expr -> expr . LESS_EQUAL expr
    (123) expr -> expr . GREATER_EQUAL expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . MINUS expr
    (126) expr -> expr . TIMES expr
    (127) expr -> expr . DIVIDE expr
    (128) expr -> expr . INT_DIVIDE expr
    (129) expr -> expr . INT_REMAINDER expr
    (130) expr -> expr . AND expr
    (131) expr -> expr . OR expr
    (132) expr -> expr . XOR expr
    (133) expr -> expr . AND_THEN expr
    (134) expr -> expr . OR_ELSE expr
    (135) expr -> expr . IMPLIES expr

    LOOP            reduce using rule 135 (expr -> expr IMPLIES expr .)
    IMPLIES         reduce using rule 135 (expr -> expr IMPLIES expr .)
    THEN            reduce using rule 135 (expr -> expr IMPLIES expr .)
    COMMA           reduce using rule 135 (expr -> expr IMPLIES expr .)
    IF              reduce using rule 135 (expr -> expr IMPLIES expr .)
    FROM            reduce using rule 135 (expr -> expr IMPLIES expr .)
    IDENTIFIER      reduce using rule 135 (expr -> expr IMPLIES expr .)
    RESULT          reduce using rule 135 (expr -> expr IMPLIES expr .)
    END             reduce using rule 135 (expr -> expr IMPLIES expr .)
    VARIANT         reduce using rule 135 (expr -> expr IMPLIES expr .)
    UNTIL           reduce using rule 135 (expr -> expr IMPLIES expr .)
    ELSEIF          reduce using rule 135 (expr -> expr IMPLIES expr .)
    ELSE            reduce using rule 135 (expr -> expr IMPLIES expr .)
    RPAREN          reduce using rule 135 (expr -> expr IMPLIES expr .)
    EQUAL           shift and go to state 230
    NOT_EQUAL       shift and go to state 233
    GREATER         shift and go to state 243
    LESS            shift and go to state 229
    LESS_EQUAL      shift and go to state 241
    GREATER_EQUAL   shift and go to state 234
    PLUS            shift and go to state 236
    MINUS           shift and go to state 232
    TIMES           shift and go to state 239
    DIVIDE          shift and go to state 238
    INT_DIVIDE      shift and go to state 240
    INT_REMAINDER   shift and go to state 246
    AND             shift and go to state 242
    OR              shift and go to state 245
    XOR             shift and go to state 231
    AND_THEN        shift and go to state 237
    OR_ELSE         shift and go to state 235

  ! EQUAL           [ reduce using rule 135 (expr -> expr IMPLIES expr .) ]
  ! NOT_EQUAL       [ reduce using rule 135 (expr -> expr IMPLIES expr .) ]
  ! GREATER         [ reduce using rule 135 (expr -> expr IMPLIES expr .) ]
  ! LESS            [ reduce using rule 135 (expr -> expr IMPLIES expr .) ]
  ! LESS_EQUAL      [ reduce using rule 135 (expr -> expr IMPLIES expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 135 (expr -> expr IMPLIES expr .) ]
  ! PLUS            [ reduce using rule 135 (expr -> expr IMPLIES expr .) ]
  ! MINUS           [ reduce using rule 135 (expr -> expr IMPLIES expr .) ]
  ! TIMES           [ reduce using rule 135 (expr -> expr IMPLIES expr .) ]
  ! DIVIDE          [ reduce using rule 135 (expr -> expr IMPLIES expr .) ]
  ! INT_DIVIDE      [ reduce using rule 135 (expr -> expr IMPLIES expr .) ]
  ! INT_REMAINDER   [ reduce using rule 135 (expr -> expr IMPLIES expr .) ]
  ! AND             [ reduce using rule 135 (expr -> expr IMPLIES expr .) ]
  ! OR              [ reduce using rule 135 (expr -> expr IMPLIES expr .) ]
  ! XOR             [ reduce using rule 135 (expr -> expr IMPLIES expr .) ]
  ! AND_THEN        [ reduce using rule 135 (expr -> expr IMPLIES expr .) ]
  ! OR_ELSE         [ reduce using rule 135 (expr -> expr IMPLIES expr .) ]
  ! IMPLIES         [ shift and go to state 244 ]


state 269

    (131) expr -> expr OR expr .
    (118) expr -> expr . EQUAL expr
    (119) expr -> expr . NOT_EQUAL expr
    (120) expr -> expr . GREATER expr
    (121) expr -> expr . LESS expr
    (122) expr -> expr . LESS_EQUAL expr
    (123) expr -> expr . GREATER_EQUAL expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . MINUS expr
    (126) expr -> expr . TIMES expr
    (127) expr -> expr . DIVIDE expr
    (128) expr -> expr . INT_DIVIDE expr
    (129) expr -> expr . INT_REMAINDER expr
    (130) expr -> expr . AND expr
    (131) expr -> expr . OR expr
    (132) expr -> expr . XOR expr
    (133) expr -> expr . AND_THEN expr
    (134) expr -> expr . OR_ELSE expr
    (135) expr -> expr . IMPLIES expr

    LOOP            reduce using rule 131 (expr -> expr OR expr .)
    OR              reduce using rule 131 (expr -> expr OR expr .)
    XOR             reduce using rule 131 (expr -> expr OR expr .)
    OR_ELSE         reduce using rule 131 (expr -> expr OR expr .)
    IMPLIES         reduce using rule 131 (expr -> expr OR expr .)
    THEN            reduce using rule 131 (expr -> expr OR expr .)
    COMMA           reduce using rule 131 (expr -> expr OR expr .)
    IF              reduce using rule 131 (expr -> expr OR expr .)
    FROM            reduce using rule 131 (expr -> expr OR expr .)
    IDENTIFIER      reduce using rule 131 (expr -> expr OR expr .)
    RESULT          reduce using rule 131 (expr -> expr OR expr .)
    END             reduce using rule 131 (expr -> expr OR expr .)
    VARIANT         reduce using rule 131 (expr -> expr OR expr .)
    UNTIL           reduce using rule 131 (expr -> expr OR expr .)
    ELSEIF          reduce using rule 131 (expr -> expr OR expr .)
    ELSE            reduce using rule 131 (expr -> expr OR expr .)
    RPAREN          reduce using rule 131 (expr -> expr OR expr .)
    EQUAL           shift and go to state 230
    NOT_EQUAL       shift and go to state 233
    GREATER         shift and go to state 243
    LESS            shift and go to state 229
    LESS_EQUAL      shift and go to state 241
    GREATER_EQUAL   shift and go to state 234
    PLUS            shift and go to state 236
    MINUS           shift and go to state 232
    TIMES           shift and go to state 239
    DIVIDE          shift and go to state 238
    INT_DIVIDE      shift and go to state 240
    INT_REMAINDER   shift and go to state 246
    AND             shift and go to state 242
    AND_THEN        shift and go to state 237

  ! EQUAL           [ reduce using rule 131 (expr -> expr OR expr .) ]
  ! NOT_EQUAL       [ reduce using rule 131 (expr -> expr OR expr .) ]
  ! GREATER         [ reduce using rule 131 (expr -> expr OR expr .) ]
  ! LESS            [ reduce using rule 131 (expr -> expr OR expr .) ]
  ! LESS_EQUAL      [ reduce using rule 131 (expr -> expr OR expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 131 (expr -> expr OR expr .) ]
  ! PLUS            [ reduce using rule 131 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 131 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 131 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 131 (expr -> expr OR expr .) ]
  ! INT_DIVIDE      [ reduce using rule 131 (expr -> expr OR expr .) ]
  ! INT_REMAINDER   [ reduce using rule 131 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 131 (expr -> expr OR expr .) ]
  ! AND_THEN        [ reduce using rule 131 (expr -> expr OR expr .) ]
  ! OR              [ shift and go to state 245 ]
  ! XOR             [ shift and go to state 231 ]
  ! OR_ELSE         [ shift and go to state 235 ]
  ! IMPLIES         [ shift and go to state 244 ]


state 270

    (129) expr -> expr INT_REMAINDER expr .
    (118) expr -> expr . EQUAL expr
    (119) expr -> expr . NOT_EQUAL expr
    (120) expr -> expr . GREATER expr
    (121) expr -> expr . LESS expr
    (122) expr -> expr . LESS_EQUAL expr
    (123) expr -> expr . GREATER_EQUAL expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . MINUS expr
    (126) expr -> expr . TIMES expr
    (127) expr -> expr . DIVIDE expr
    (128) expr -> expr . INT_DIVIDE expr
    (129) expr -> expr . INT_REMAINDER expr
    (130) expr -> expr . AND expr
    (131) expr -> expr . OR expr
    (132) expr -> expr . XOR expr
    (133) expr -> expr . AND_THEN expr
    (134) expr -> expr . OR_ELSE expr
    (135) expr -> expr . IMPLIES expr

    LOOP            reduce using rule 129 (expr -> expr INT_REMAINDER expr .)
    EQUAL           reduce using rule 129 (expr -> expr INT_REMAINDER expr .)
    NOT_EQUAL       reduce using rule 129 (expr -> expr INT_REMAINDER expr .)
    GREATER         reduce using rule 129 (expr -> expr INT_REMAINDER expr .)
    LESS            reduce using rule 129 (expr -> expr INT_REMAINDER expr .)
    LESS_EQUAL      reduce using rule 129 (expr -> expr INT_REMAINDER expr .)
    GREATER_EQUAL   reduce using rule 129 (expr -> expr INT_REMAINDER expr .)
    PLUS            reduce using rule 129 (expr -> expr INT_REMAINDER expr .)
    MINUS           reduce using rule 129 (expr -> expr INT_REMAINDER expr .)
    TIMES           reduce using rule 129 (expr -> expr INT_REMAINDER expr .)
    DIVIDE          reduce using rule 129 (expr -> expr INT_REMAINDER expr .)
    INT_DIVIDE      reduce using rule 129 (expr -> expr INT_REMAINDER expr .)
    INT_REMAINDER   reduce using rule 129 (expr -> expr INT_REMAINDER expr .)
    AND             reduce using rule 129 (expr -> expr INT_REMAINDER expr .)
    OR              reduce using rule 129 (expr -> expr INT_REMAINDER expr .)
    XOR             reduce using rule 129 (expr -> expr INT_REMAINDER expr .)
    AND_THEN        reduce using rule 129 (expr -> expr INT_REMAINDER expr .)
    OR_ELSE         reduce using rule 129 (expr -> expr INT_REMAINDER expr .)
    IMPLIES         reduce using rule 129 (expr -> expr INT_REMAINDER expr .)
    THEN            reduce using rule 129 (expr -> expr INT_REMAINDER expr .)
    COMMA           reduce using rule 129 (expr -> expr INT_REMAINDER expr .)
    IF              reduce using rule 129 (expr -> expr INT_REMAINDER expr .)
    FROM            reduce using rule 129 (expr -> expr INT_REMAINDER expr .)
    IDENTIFIER      reduce using rule 129 (expr -> expr INT_REMAINDER expr .)
    RESULT          reduce using rule 129 (expr -> expr INT_REMAINDER expr .)
    END             reduce using rule 129 (expr -> expr INT_REMAINDER expr .)
    VARIANT         reduce using rule 129 (expr -> expr INT_REMAINDER expr .)
    UNTIL           reduce using rule 129 (expr -> expr INT_REMAINDER expr .)
    ELSEIF          reduce using rule 129 (expr -> expr INT_REMAINDER expr .)
    ELSE            reduce using rule 129 (expr -> expr INT_REMAINDER expr .)
    RPAREN          reduce using rule 129 (expr -> expr INT_REMAINDER expr .)

  ! EQUAL           [ shift and go to state 230 ]
  ! NOT_EQUAL       [ shift and go to state 233 ]
  ! GREATER         [ shift and go to state 243 ]
  ! LESS            [ shift and go to state 229 ]
  ! LESS_EQUAL      [ shift and go to state 241 ]
  ! GREATER_EQUAL   [ shift and go to state 234 ]
  ! PLUS            [ shift and go to state 236 ]
  ! MINUS           [ shift and go to state 232 ]
  ! TIMES           [ shift and go to state 239 ]
  ! DIVIDE          [ shift and go to state 238 ]
  ! INT_DIVIDE      [ shift and go to state 240 ]
  ! INT_REMAINDER   [ shift and go to state 246 ]
  ! AND             [ shift and go to state 242 ]
  ! OR              [ shift and go to state 245 ]
  ! XOR             [ shift and go to state 231 ]
  ! AND_THEN        [ shift and go to state 237 ]
  ! OR_ELSE         [ shift and go to state 235 ]
  ! IMPLIES         [ shift and go to state 244 ]


state 271

    (116) variant -> VARIANT IDENTIFIER COLON . expr
    (118) expr -> . expr EQUAL expr
    (119) expr -> . expr NOT_EQUAL expr
    (120) expr -> . expr GREATER expr
    (121) expr -> . expr LESS expr
    (122) expr -> . expr LESS_EQUAL expr
    (123) expr -> . expr GREATER_EQUAL expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr MINUS expr
    (126) expr -> . expr TIMES expr
    (127) expr -> . expr DIVIDE expr
    (128) expr -> . expr INT_DIVIDE expr
    (129) expr -> . expr INT_REMAINDER expr
    (130) expr -> . expr AND expr
    (131) expr -> . expr OR expr
    (132) expr -> . expr XOR expr
    (133) expr -> . expr AND_THEN expr
    (134) expr -> . expr OR_ELSE expr
    (135) expr -> . expr IMPLIES expr
    (136) expr -> . RESULT
    (137) expr -> . CURRENT
    (138) expr -> . LPAREN expr RPAREN
    (139) expr -> . bool_const
    (140) expr -> . CHARACTER
    (141) expr -> . INTEGER
    (142) expr -> . REAL
    (143) expr -> . STRING
    (155) bool_const -> . TRUE
    (156) bool_const -> . FALSE

    RESULT          shift and go to state 216
    CURRENT         shift and go to state 215
    LPAREN          shift and go to state 217
    CHARACTER       shift and go to state 211
    INTEGER         shift and go to state 214
    REAL            shift and go to state 210
    STRING          shift and go to state 213
    TRUE            shift and go to state 162
    FALSE           shift and go to state 174

    expr                           shift and go to state 275
    bool_const                     shift and go to state 212

state 272

    (113) loop -> FROM fnbody variant UNTIL expr . LOOP fnbody END
    (118) expr -> expr . EQUAL expr
    (119) expr -> expr . NOT_EQUAL expr
    (120) expr -> expr . GREATER expr
    (121) expr -> expr . LESS expr
    (122) expr -> expr . LESS_EQUAL expr
    (123) expr -> expr . GREATER_EQUAL expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . MINUS expr
    (126) expr -> expr . TIMES expr
    (127) expr -> expr . DIVIDE expr
    (128) expr -> expr . INT_DIVIDE expr
    (129) expr -> expr . INT_REMAINDER expr
    (130) expr -> expr . AND expr
    (131) expr -> expr . OR expr
    (132) expr -> expr . XOR expr
    (133) expr -> expr . AND_THEN expr
    (134) expr -> expr . OR_ELSE expr
    (135) expr -> expr . IMPLIES expr

    LOOP            shift and go to state 276
    EQUAL           shift and go to state 230
    NOT_EQUAL       shift and go to state 233
    GREATER         shift and go to state 243
    LESS            shift and go to state 229
    LESS_EQUAL      shift and go to state 241
    GREATER_EQUAL   shift and go to state 234
    PLUS            shift and go to state 236
    MINUS           shift and go to state 232
    TIMES           shift and go to state 239
    DIVIDE          shift and go to state 238
    INT_DIVIDE      shift and go to state 240
    INT_REMAINDER   shift and go to state 246
    AND             shift and go to state 242
    OR              shift and go to state 245
    XOR             shift and go to state 231
    AND_THEN        shift and go to state 237
    OR_ELSE         shift and go to state 235
    IMPLIES         shift and go to state 244


state 273

    (108) conditional -> IF expr THEN fnbody elseif_group . else_opt END
    (109) elseif_group -> elseif_group . ELSEIF expr THEN fnbody
    (111) else_opt -> . ELSE fnbody
    (112) else_opt -> . empty
    (174) empty -> .

    ELSEIF          shift and go to state 279
    ELSE            shift and go to state 277
    END             reduce using rule 174 (empty -> .)

    empty                          shift and go to state 280
    else_opt                       shift and go to state 278

state 274

    (110) elseif_group -> empty .

    ELSEIF          reduce using rule 110 (elseif_group -> empty .)
    ELSE            reduce using rule 110 (elseif_group -> empty .)
    END             reduce using rule 110 (elseif_group -> empty .)


state 275

    (116) variant -> VARIANT IDENTIFIER COLON expr .
    (118) expr -> expr . EQUAL expr
    (119) expr -> expr . NOT_EQUAL expr
    (120) expr -> expr . GREATER expr
    (121) expr -> expr . LESS expr
    (122) expr -> expr . LESS_EQUAL expr
    (123) expr -> expr . GREATER_EQUAL expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . MINUS expr
    (126) expr -> expr . TIMES expr
    (127) expr -> expr . DIVIDE expr
    (128) expr -> expr . INT_DIVIDE expr
    (129) expr -> expr . INT_REMAINDER expr
    (130) expr -> expr . AND expr
    (131) expr -> expr . OR expr
    (132) expr -> expr . XOR expr
    (133) expr -> expr . AND_THEN expr
    (134) expr -> expr . OR_ELSE expr
    (135) expr -> expr . IMPLIES expr

    UNTIL           reduce using rule 116 (variant -> VARIANT IDENTIFIER COLON expr .)
    EQUAL           shift and go to state 230
    NOT_EQUAL       shift and go to state 233
    GREATER         shift and go to state 243
    LESS            shift and go to state 229
    LESS_EQUAL      shift and go to state 241
    GREATER_EQUAL   shift and go to state 234
    PLUS            shift and go to state 236
    MINUS           shift and go to state 232
    TIMES           shift and go to state 239
    DIVIDE          shift and go to state 238
    INT_DIVIDE      shift and go to state 240
    INT_REMAINDER   shift and go to state 246
    AND             shift and go to state 242
    OR              shift and go to state 245
    XOR             shift and go to state 231
    AND_THEN        shift and go to state 237
    OR_ELSE         shift and go to state 235
    IMPLIES         shift and go to state 244


state 276

    (113) loop -> FROM fnbody variant UNTIL expr LOOP . fnbody END
    (98) fnbody -> . ins
    (99) fnbody -> . fnbody ins
    (100) ins -> . assignment
    (101) ins -> . conditional
    (102) ins -> . loop
    (103) ins -> . COMMA
    (104) assignment -> . variable ass_op expr
    (108) conditional -> . IF expr THEN fnbody elseif_group else_opt END
    (113) loop -> . FROM fnbody variant UNTIL expr LOOP fnbody END
    (105) variable -> . IDENTIFIER
    (106) variable -> . RESULT

    COMMA           shift and go to state 191
    IF              shift and go to state 197
    FROM            shift and go to state 194
    IDENTIFIER      shift and go to state 195
    RESULT          shift and go to state 187

    conditional                    shift and go to state 189
    ins                            shift and go to state 190
    fnbody                         shift and go to state 281
    assignment                     shift and go to state 188
    variable                       shift and go to state 193
    loop                           shift and go to state 196

state 277

    (111) else_opt -> ELSE . fnbody
    (98) fnbody -> . ins
    (99) fnbody -> . fnbody ins
    (100) ins -> . assignment
    (101) ins -> . conditional
    (102) ins -> . loop
    (103) ins -> . COMMA
    (104) assignment -> . variable ass_op expr
    (108) conditional -> . IF expr THEN fnbody elseif_group else_opt END
    (113) loop -> . FROM fnbody variant UNTIL expr LOOP fnbody END
    (105) variable -> . IDENTIFIER
    (106) variable -> . RESULT

    COMMA           shift and go to state 191
    IF              shift and go to state 197
    FROM            shift and go to state 194
    IDENTIFIER      shift and go to state 195
    RESULT          shift and go to state 187

    assignment                     shift and go to state 188
    conditional                    shift and go to state 189
    ins                            shift and go to state 190
    fnbody                         shift and go to state 282
    variable                       shift and go to state 193
    loop                           shift and go to state 196

state 278

    (108) conditional -> IF expr THEN fnbody elseif_group else_opt . END

    END             shift and go to state 283


state 279

    (109) elseif_group -> elseif_group ELSEIF . expr THEN fnbody
    (118) expr -> . expr EQUAL expr
    (119) expr -> . expr NOT_EQUAL expr
    (120) expr -> . expr GREATER expr
    (121) expr -> . expr LESS expr
    (122) expr -> . expr LESS_EQUAL expr
    (123) expr -> . expr GREATER_EQUAL expr
    (124) expr -> . expr PLUS expr
    (125) expr -> . expr MINUS expr
    (126) expr -> . expr TIMES expr
    (127) expr -> . expr DIVIDE expr
    (128) expr -> . expr INT_DIVIDE expr
    (129) expr -> . expr INT_REMAINDER expr
    (130) expr -> . expr AND expr
    (131) expr -> . expr OR expr
    (132) expr -> . expr XOR expr
    (133) expr -> . expr AND_THEN expr
    (134) expr -> . expr OR_ELSE expr
    (135) expr -> . expr IMPLIES expr
    (136) expr -> . RESULT
    (137) expr -> . CURRENT
    (138) expr -> . LPAREN expr RPAREN
    (139) expr -> . bool_const
    (140) expr -> . CHARACTER
    (141) expr -> . INTEGER
    (142) expr -> . REAL
    (143) expr -> . STRING
    (155) bool_const -> . TRUE
    (156) bool_const -> . FALSE

    RESULT          shift and go to state 216
    CURRENT         shift and go to state 215
    LPAREN          shift and go to state 217
    CHARACTER       shift and go to state 211
    INTEGER         shift and go to state 214
    REAL            shift and go to state 210
    STRING          shift and go to state 213
    TRUE            shift and go to state 162
    FALSE           shift and go to state 174

    expr                           shift and go to state 284
    bool_const                     shift and go to state 212

state 280

    (112) else_opt -> empty .

    END             reduce using rule 112 (else_opt -> empty .)


state 281

    (113) loop -> FROM fnbody variant UNTIL expr LOOP fnbody . END
    (99) fnbody -> fnbody . ins
    (100) ins -> . assignment
    (101) ins -> . conditional
    (102) ins -> . loop
    (103) ins -> . COMMA
    (104) assignment -> . variable ass_op expr
    (108) conditional -> . IF expr THEN fnbody elseif_group else_opt END
    (113) loop -> . FROM fnbody variant UNTIL expr LOOP fnbody END
    (105) variable -> . IDENTIFIER
    (106) variable -> . RESULT

    END             shift and go to state 285
    COMMA           shift and go to state 191
    IF              shift and go to state 197
    FROM            shift and go to state 194
    IDENTIFIER      shift and go to state 195
    RESULT          shift and go to state 187

    conditional                    shift and go to state 189
    ins                            shift and go to state 206
    assignment                     shift and go to state 188
    variable                       shift and go to state 193
    loop                           shift and go to state 196

state 282

    (111) else_opt -> ELSE fnbody .
    (99) fnbody -> fnbody . ins
    (100) ins -> . assignment
    (101) ins -> . conditional
    (102) ins -> . loop
    (103) ins -> . COMMA
    (104) assignment -> . variable ass_op expr
    (108) conditional -> . IF expr THEN fnbody elseif_group else_opt END
    (113) loop -> . FROM fnbody variant UNTIL expr LOOP fnbody END
    (105) variable -> . IDENTIFIER
    (106) variable -> . RESULT

    END             reduce using rule 111 (else_opt -> ELSE fnbody .)
    COMMA           shift and go to state 191
    IF              shift and go to state 197
    FROM            shift and go to state 194
    IDENTIFIER      shift and go to state 195
    RESULT          shift and go to state 187

    assignment                     shift and go to state 188
    conditional                    shift and go to state 189
    ins                            shift and go to state 206
    variable                       shift and go to state 193
    loop                           shift and go to state 196

state 283

    (108) conditional -> IF expr THEN fnbody elseif_group else_opt END .

    VARIANT         reduce using rule 108 (conditional -> IF expr THEN fnbody elseif_group else_opt END .)
    COMMA           reduce using rule 108 (conditional -> IF expr THEN fnbody elseif_group else_opt END .)
    IF              reduce using rule 108 (conditional -> IF expr THEN fnbody elseif_group else_opt END .)
    FROM            reduce using rule 108 (conditional -> IF expr THEN fnbody elseif_group else_opt END .)
    IDENTIFIER      reduce using rule 108 (conditional -> IF expr THEN fnbody elseif_group else_opt END .)
    RESULT          reduce using rule 108 (conditional -> IF expr THEN fnbody elseif_group else_opt END .)
    UNTIL           reduce using rule 108 (conditional -> IF expr THEN fnbody elseif_group else_opt END .)
    ELSEIF          reduce using rule 108 (conditional -> IF expr THEN fnbody elseif_group else_opt END .)
    ELSE            reduce using rule 108 (conditional -> IF expr THEN fnbody elseif_group else_opt END .)
    END             reduce using rule 108 (conditional -> IF expr THEN fnbody elseif_group else_opt END .)


state 284

    (109) elseif_group -> elseif_group ELSEIF expr . THEN fnbody
    (118) expr -> expr . EQUAL expr
    (119) expr -> expr . NOT_EQUAL expr
    (120) expr -> expr . GREATER expr
    (121) expr -> expr . LESS expr
    (122) expr -> expr . LESS_EQUAL expr
    (123) expr -> expr . GREATER_EQUAL expr
    (124) expr -> expr . PLUS expr
    (125) expr -> expr . MINUS expr
    (126) expr -> expr . TIMES expr
    (127) expr -> expr . DIVIDE expr
    (128) expr -> expr . INT_DIVIDE expr
    (129) expr -> expr . INT_REMAINDER expr
    (130) expr -> expr . AND expr
    (131) expr -> expr . OR expr
    (132) expr -> expr . XOR expr
    (133) expr -> expr . AND_THEN expr
    (134) expr -> expr . OR_ELSE expr
    (135) expr -> expr . IMPLIES expr

    THEN            shift and go to state 286
    EQUAL           shift and go to state 230
    NOT_EQUAL       shift and go to state 233
    GREATER         shift and go to state 243
    LESS            shift and go to state 229
    LESS_EQUAL      shift and go to state 241
    GREATER_EQUAL   shift and go to state 234
    PLUS            shift and go to state 236
    MINUS           shift and go to state 232
    TIMES           shift and go to state 239
    DIVIDE          shift and go to state 238
    INT_DIVIDE      shift and go to state 240
    INT_REMAINDER   shift and go to state 246
    AND             shift and go to state 242
    OR              shift and go to state 245
    XOR             shift and go to state 231
    AND_THEN        shift and go to state 237
    OR_ELSE         shift and go to state 235
    IMPLIES         shift and go to state 244


state 285

    (113) loop -> FROM fnbody variant UNTIL expr LOOP fnbody END .

    COMMA           reduce using rule 113 (loop -> FROM fnbody variant UNTIL expr LOOP fnbody END .)
    IF              reduce using rule 113 (loop -> FROM fnbody variant UNTIL expr LOOP fnbody END .)
    FROM            reduce using rule 113 (loop -> FROM fnbody variant UNTIL expr LOOP fnbody END .)
    IDENTIFIER      reduce using rule 113 (loop -> FROM fnbody variant UNTIL expr LOOP fnbody END .)
    RESULT          reduce using rule 113 (loop -> FROM fnbody variant UNTIL expr LOOP fnbody END .)
    ELSEIF          reduce using rule 113 (loop -> FROM fnbody variant UNTIL expr LOOP fnbody END .)
    ELSE            reduce using rule 113 (loop -> FROM fnbody variant UNTIL expr LOOP fnbody END .)
    END             reduce using rule 113 (loop -> FROM fnbody variant UNTIL expr LOOP fnbody END .)
    VARIANT         reduce using rule 113 (loop -> FROM fnbody variant UNTIL expr LOOP fnbody END .)
    UNTIL           reduce using rule 113 (loop -> FROM fnbody variant UNTIL expr LOOP fnbody END .)


state 286

    (109) elseif_group -> elseif_group ELSEIF expr THEN . fnbody
    (98) fnbody -> . ins
    (99) fnbody -> . fnbody ins
    (100) ins -> . assignment
    (101) ins -> . conditional
    (102) ins -> . loop
    (103) ins -> . COMMA
    (104) assignment -> . variable ass_op expr
    (108) conditional -> . IF expr THEN fnbody elseif_group else_opt END
    (113) loop -> . FROM fnbody variant UNTIL expr LOOP fnbody END
    (105) variable -> . IDENTIFIER
    (106) variable -> . RESULT

    COMMA           shift and go to state 191
    IF              shift and go to state 197
    FROM            shift and go to state 194
    IDENTIFIER      shift and go to state 195
    RESULT          shift and go to state 187

    conditional                    shift and go to state 189
    ins                            shift and go to state 190
    fnbody                         shift and go to state 287
    assignment                     shift and go to state 188
    variable                       shift and go to state 193
    loop                           shift and go to state 196

state 287

    (109) elseif_group -> elseif_group ELSEIF expr THEN fnbody .
    (99) fnbody -> fnbody . ins
    (100) ins -> . assignment
    (101) ins -> . conditional
    (102) ins -> . loop
    (103) ins -> . COMMA
    (104) assignment -> . variable ass_op expr
    (108) conditional -> . IF expr THEN fnbody elseif_group else_opt END
    (113) loop -> . FROM fnbody variant UNTIL expr LOOP fnbody END
    (105) variable -> . IDENTIFIER
    (106) variable -> . RESULT

    ELSEIF          reduce using rule 109 (elseif_group -> elseif_group ELSEIF expr THEN fnbody .)
    ELSE            reduce using rule 109 (elseif_group -> elseif_group ELSEIF expr THEN fnbody .)
    END             reduce using rule 109 (elseif_group -> elseif_group ELSEIF expr THEN fnbody .)
    COMMA           shift and go to state 191
    IF              shift and go to state 197
    FROM            shift and go to state 194
    IDENTIFIER      shift and go to state 195
    RESULT          shift and go to state 187

    conditional                    shift and go to state 189
    ins                            shift and go to state 206
    assignment                     shift and go to state 188
    variable                       shift and go to state 193
    loop                           shift and go to state 196
